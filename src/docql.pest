WHITESPACE          = _{ " " | "\t" | "\r" | "\n" }
NEWLINE             = _{ "\r\n" | "\n" }

template            =  { SOI ~ (match_definition | expression)* ~ EOI }

// Match configuration definitions
match_definition    =  { "Match" ~ "<" ~ identifier ~ ">" ~ identifier ~ match_body }
match_body          =  { "{" ~ match_expression* ~ "}" }

// Match expressions and types
match_expression    =  { function_call | value }
function_call       =  { identifier ~ "(" ~ function_args? ~ ")" }
function_args       =  { function_arg ~ ("," ~ function_arg)* ~ ","? }
function_arg        =  { (identifier ~ "=" ~ function_arg_value) | function_arg_value }
function_arg_value  =  { comparison_expr | function_call | value }

// Comparison operators for heuristics (used only in function arguments)
comparison_op       =  { ">=" | "<=" | "==" | "!=" | ">" | "<" }
comparison_expr     =  { identifier ~ comparison_op ~ comparison_value }
comparison_value    =  { string | number | boolean | identifier }

expression          =  { element }

element             =  { identifier ~ attributes? ~ element_body? }

attributes          =  { "(" ~ attribute_list? ~ ")" }

attribute_list      =  { attribute ~ ("," ~ attribute)* ~ ","? }

attribute           =  { identifier ~ "=" ~ value }

value               =  { string | number | boolean | array | identifier }

array               =  { "[" ~ array_values? ~ "]" }
array_values        =  { value ~ ("," ~ value)* ~ ","? }

element_body        =  { "{" ~ expression* ~ "}" }

identifier          =  @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

string              =  ${ "\"" ~ inner_string ~ "\"" }
inner_string        =  @{ char* }
char                =  {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number              =  @{ "-"? ~ float }
float               =  { int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("-" | "+")? ~ ASCII_DIGIT+)? }
int                 =  { "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
boolean             =  { "true" | "false" }