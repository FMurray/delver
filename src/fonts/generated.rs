// AUTO-GENERATED FILE - DO NOT EDIT
use super::FontMetrics;
use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref AvantGarde_BookOblique: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 547.0,
        italic_angle: -10.5,
        bbox: (-113.0, -222.0, 1279.0, 955.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Book".to_string(),
        glyph_widths: vec![
(79, 869.0),(65, 740.0),(119, 831.0),(241, 1157.0),(165, 554.0),(113, 682.0),(184, 354.0),(166, 554.0),(83, 498.0),(164, 166.0),(55, 554.0),(96, 351.0),(205, 552.0),(75, 591.0),(107, 502.0),(174, 487.0),(81, 871.0),(103, 673.0),(120, 480.0),(187, 425.0),(198, 453.0),(189, 1174.0),(234, 1194.0),(118, 554.0),(35, 554.0),(80, 592.0),(58, 277.0),(82, 607.0),(99, 647.0),(102, 314.0),(95, 500.0),(180, 277.0),(169, 198.0),(97, 683.0),(177, 500.0),(179, 553.0),(104, 610.0),(109, 938.0),(172, 251.0),(33, 295.0),(77, 919.0),(200, 369.0),(203, 324.0),(202, 332.0),(74, 482.0),(45, 332.0),(63, 591.0),(162, 554.0),(67, 813.0),(105, 200.0),(183, 606.0),(245, 200.0),(249, 653.0),(78, 740.0),(50, 554.0),(70, 485.0),(66, 574.0),(171, 425.0),(207, 502.0),(51, 554.0),(90, 480.0),(116, 339.0),(122, 425.0),(235, 369.0),(123, 351.0),(62, 606.0),(163, 554.0),(36, 554.0),(49, 554.0),(124, 672.0),(52, 554.0),(59, 277.0),(54, 554.0),(106, 203.0),(193, 378.0),(91, 351.0),(64, 867.0),(94, 606.0),(53, 554.0),(194, 375.0),(111, 655.0),(251, 554.0),(126, 606.0),(100, 685.0),(185, 502.0),(85, 655.0),(125, 351.0),(167, 615.0),(161, 295.0),(170, 502.0),(196, 439.0),(233, 868.0),(206, 302.0),(108, 200.0),(68, 744.0),(121, 536.0),(60, 606.0),(101, 650.0),(44, 277.0),(93, 351.0),(225, 992.0),(42, 425.0),(73, 226.0),(250, 1137.0),(38, 757.0),(178, 553.0),(39, 351.0),(76, 462.0),(88, 609.0),(115, 388.0),(117, 608.0),(71, 872.0),(175, 485.0),(186, 484.0),(197, 485.0),(61, 606.0),(56, 554.0),(114, 301.0),(40, 369.0),(112, 682.0),(168, 554.0),(248, 300.0),(191, 591.0),(92, 605.0),(232, 517.0),(199, 222.0),(34, 309.0),(43, 606.0),(182, 564.0),(173, 251.0),(37, 775.0),(48, 554.0),(57, 554.0),(208, 1000.0),(72, 683.0),(98, 682.0),(188, 1000.0),(89, 592.0),(41, 369.0),(47, 437.0),(84, 426.0),(46, 277.0),(110, 610.0),(86, 702.0),(87, 960.0),(32, 277.0),(227, 369.0),(195, 502.0),(69, 536.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_Light: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 484.0,
        italic_angle: 0.0,
        bbox: (-188.0, -251.0, 1266.0, 908.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Light".to_string(),
        glyph_widths: vec![
(206, 320.0),(208, 1000.0),(245, 300.0),(78, 740.0),(87, 960.0),(108, 300.0),(114, 440.0),(86, 700.0),(170, 400.0),(96, 220.0),(62, 600.0),(60, 600.0),(93, 300.0),(196, 440.0),(70, 640.0),(207, 420.0),(83, 660.0),(42, 440.0),(61, 600.0),(199, 260.0),(76, 600.0),(116, 380.0),(49, 620.0),(172, 240.0),(69, 720.0),(50, 620.0),(177, 500.0),(167, 520.0),(118, 520.0),(198, 460.0),(173, 240.0),(187, 360.0),(168, 620.0),(48, 620.0),(161, 300.0),(71, 800.0),(202, 320.0),(44, 320.0),(57, 620.0),(175, 620.0),(34, 380.0),(115, 520.0),(58, 320.0),(104, 660.0),(249, 560.0),(166, 620.0),(102, 320.0),(122, 480.0),(107, 620.0),(45, 400.0),(85, 780.0),(162, 620.0),(39, 220.0),(110, 660.0),(179, 540.0),(182, 600.0),(53, 620.0),(90, 640.0),(73, 340.0),(92, 600.0),(124, 600.0),(191, 540.0),(101, 520.0),(97, 580.0),(197, 440.0),(65, 680.0),(98, 620.0),(125, 280.0),(100, 620.0),(250, 900.0),(33, 300.0),(55, 620.0),(63, 540.0),(95, 500.0),(126, 600.0),(185, 400.0),(193, 340.0),(241, 860.0),(40, 300.0),(112, 620.0),(113, 580.0),(37, 900.0),(64, 820.0),(54, 620.0),(251, 660.0),(36, 620.0),(32, 320.0),(188, 1000.0),(123, 280.0),(165, 620.0),(180, 320.0),(66, 740.0),(43, 600.0),(178, 540.0),(46, 320.0),(109, 940.0),(51, 620.0),(91, 300.0),(205, 380.0),(234, 1240.0),(171, 360.0),(120, 560.0),(200, 420.0),(52, 620.0),(174, 620.0),(74, 600.0),(248, 320.0),(169, 220.0),(77, 920.0),(194, 340.0),(68, 800.0),(195, 420.0),(72, 800.0),(227, 420.0),(106, 300.0),(119, 780.0),(225, 1260.0),(59, 320.0),(38, 800.0),(117, 680.0),(80, 620.0),(164, 140.0),(56, 620.0),(67, 740.0),(103, 540.0),(232, 600.0),(81, 820.0),(184, 220.0),(189, 1280.0),(89, 640.0),(88, 720.0),(233, 800.0),(41, 300.0),(105, 300.0),(75, 720.0),(99, 520.0),(235, 420.0),(111, 560.0),(163, 620.0),(186, 400.0),(47, 600.0),(203, 320.0),(94, 600.0),(121, 540.0),(84, 620.0),(79, 800.0),(82, 720.0),(35, 620.0),(183, 460.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 426.0,
        italic_angle: 0.0,
        bbox: (-23.0, -250.0, 715.0, 805.0),
        flags: 1,
        font_family: "Courier".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(124, 600.0),(200, 600.0),(36, 600.0),(182, 600.0),(105, 600.0),(56, 600.0),(73, 600.0),(78, 600.0),(48, 600.0),(208, 600.0),(91, 600.0),(180, 600.0),(101, 600.0),(121, 600.0),(114, 600.0),(62, 600.0),(93, 600.0),(112, 600.0),(184, 600.0),(81, 600.0),(41, 600.0),(97, 600.0),(40, 600.0),(117, 600.0),(241, 600.0),(249, 600.0),(106, 600.0),(164, 600.0),(179, 600.0),(50, 600.0),(168, 600.0),(77, 600.0),(108, 600.0),(172, 600.0),(227, 600.0),(64, 600.0),(187, 600.0),(60, 600.0),(125, 600.0),(174, 600.0),(47, 600.0),(66, 600.0),(42, 600.0),(203, 600.0),(163, 600.0),(225, 600.0),(173, 600.0),(86, 600.0),(178, 600.0),(195, 600.0),(175, 600.0),(170, 600.0),(196, 600.0),(235, 600.0),(33, 600.0),(44, 600.0),(65, 600.0),(61, 600.0),(161, 600.0),(35, 600.0),(165, 600.0),(162, 600.0),(75, 600.0),(49, 600.0),(85, 600.0),(67, 600.0),(88, 600.0),(51, 600.0),(120, 600.0),(185, 600.0),(197, 600.0),(87, 600.0),(232, 600.0),(234, 600.0),(63, 600.0),(110, 600.0),(37, 600.0),(76, 600.0),(194, 600.0),(248, 600.0),(123, 600.0),(169, 600.0),(94, 600.0),(39, 600.0),(122, 600.0),(206, 600.0),(104, 600.0),(109, 600.0),(233, 600.0),(199, 600.0),(55, 600.0),(54, 600.0),(83, 600.0),(198, 600.0),(32, 600.0),(45, 600.0),(82, 600.0),(95, 600.0),(115, 600.0),(183, 600.0),(34, 600.0),(80, 600.0),(99, 600.0),(118, 600.0),(177, 600.0),(98, 600.0),(166, 600.0),(103, 600.0),(188, 600.0),(116, 600.0),(193, 600.0),(89, 600.0),(250, 600.0),(74, 600.0),(113, 600.0),(189, 600.0),(43, 600.0),(59, 600.0),(71, 600.0),(111, 600.0),(52, 600.0),(69, 600.0),(90, 600.0),(92, 600.0),(119, 600.0),(191, 600.0),(207, 600.0),(96, 600.0),(186, 600.0),(46, 600.0),(79, 600.0),(100, 600.0),(58, 600.0),(68, 600.0),(126, 600.0),(202, 600.0),(84, 600.0),(70, 600.0),(38, 600.0),(53, 600.0),(245, 600.0),(57, 600.0),(72, 600.0),(102, 600.0),(107, 600.0),(167, 600.0),(171, 600.0),(205, 600.0),(251, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_BoldItalic: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 669.0,
        x_height: 462.0,
        italic_angle: -15.0,
        bbox: (-200.0, -218.0, 996.0, 921.0),
        flags: 64,
        font_family: "Times".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(198, 333.0),(102, 333.0),(111, 500.0),(194, 333.0),(55, 500.0),(112, 500.0),(126, 570.0),(250, 722.0),(121, 444.0),(106, 278.0),(235, 300.0),(115, 389.0),(187, 500.0),(41, 333.0),(191, 500.0),(207, 333.0),(44, 250.0),(53, 500.0),(95, 500.0),(96, 333.0),(120, 500.0),(165, 500.0),(169, 278.0),(232, 611.0),(200, 333.0),(180, 250.0),(76, 611.0),(84, 611.0),(98, 500.0),(100, 500.0),(63, 500.0),(206, 333.0),(109, 778.0),(60, 570.0),(40, 333.0),(47, 278.0),(163, 500.0),(195, 333.0),(92, 278.0),(74, 500.0),(178, 500.0),(174, 556.0),(68, 722.0),(81, 722.0),(89, 611.0),(58, 333.0),(61, 570.0),(38, 778.0),(69, 667.0),(99, 444.0),(94, 570.0),(42, 500.0),(184, 333.0),(186, 500.0),(182, 500.0),(251, 500.0),(34, 555.0),(72, 778.0),(108, 278.0),(32, 250.0),(78, 722.0),(172, 333.0),(77, 889.0),(36, 500.0),(234, 944.0),(205, 333.0),(117, 556.0),(113, 500.0),(227, 266.0),(225, 944.0),(166, 500.0),(177, 500.0),(97, 500.0),(241, 722.0),(56, 500.0),(62, 570.0),(179, 500.0),(188, 1000.0),(122, 389.0),(37, 833.0),(116, 278.0),(101, 444.0),(170, 500.0),(73, 389.0),(43, 570.0),(48, 500.0),(105, 278.0),(185, 500.0),(91, 333.0),(82, 667.0),(104, 556.0),(197, 333.0),(193, 333.0),(125, 348.0),(93, 333.0),(203, 333.0),(167, 500.0),(71, 722.0),(164, 167.0),(123, 348.0),(162, 500.0),(54, 500.0),(173, 333.0),(46, 250.0),(114, 389.0),(233, 722.0),(87, 889.0),(79, 722.0),(75, 667.0),(67, 667.0),(107, 500.0),(168, 500.0),(118, 444.0),(119, 667.0),(52, 500.0),(66, 667.0),(45, 333.0),(51, 500.0),(39, 333.0),(64, 832.0),(88, 667.0),(35, 500.0),(171, 500.0),(189, 1000.0),(199, 333.0),(208, 1000.0),(80, 611.0),(202, 333.0),(65, 667.0),(249, 500.0),(85, 722.0),(110, 556.0),(59, 333.0),(83, 556.0),(33, 389.0),(90, 611.0),(183, 350.0),(103, 500.0),(57, 500.0),(86, 667.0),(50, 500.0),(196, 333.0),(161, 389.0),(70, 667.0),(49, 500.0),(124, 220.0),(245, 278.0),(248, 278.0),(175, 556.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref AvantGarde_DemiOblique: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 555.0,
        italic_angle: -10.5,
        bbox: (-123.0, -251.0, 1256.0, 1021.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(62, 600.0),(56, 560.0),(86, 700.0),(113, 660.0),(83, 520.0),(195, 540.0),(118, 560.0),(74, 480.0),(166, 560.0),(164, 160.0),(241, 1080.0),(205, 700.0),(168, 560.0),(92, 640.0),(103, 660.0),(39, 280.0),(87, 900.0),(81, 840.0),(95, 500.0),(89, 620.0),(208, 1000.0),(248, 320.0),(38, 680.0),(123, 340.0),(34, 360.0),(174, 520.0),(58, 280.0),(79, 840.0),(59, 280.0),(52, 560.0),(120, 560.0),(175, 520.0),(196, 480.0),(163, 560.0),(173, 240.0),(48, 560.0),(108, 240.0),(233, 840.0),(110, 600.0),(84, 420.0),(44, 280.0),(186, 480.0),(169, 220.0),(184, 280.0),(194, 420.0),(100, 660.0),(107, 580.0),(45, 420.0),(235, 360.0),(101, 640.0),(41, 380.0),(68, 700.0),(121, 580.0),(88, 680.0),(162, 560.0),(96, 280.0),(65, 740.0),(199, 280.0),(76, 440.0),(32, 280.0),(203, 340.0),(93, 320.0),(63, 560.0),(125, 340.0),(67, 780.0),(188, 1000.0),(54, 560.0),(187, 460.0),(40, 380.0),(197, 420.0),(46, 280.0),(75, 620.0),(180, 280.0),(70, 480.0),(61, 600.0),(90, 500.0),(104, 600.0),(115, 440.0),(60, 600.0),(85, 640.0),(116, 300.0),(102, 280.0),(78, 740.0),(77, 900.0),(167, 560.0),(112, 660.0),(53, 560.0),(117, 600.0),(182, 600.0),(185, 480.0),(225, 900.0),(234, 1060.0),(250, 1080.0),(37, 860.0),(183, 600.0),(72, 680.0),(99, 640.0),(64, 740.0),(245, 240.0),(191, 560.0),(193, 420.0),(249, 660.0),(47, 460.0),(178, 560.0),(51, 560.0),(57, 560.0),(50, 560.0),(49, 560.0),(80, 560.0),(206, 340.0),(114, 320.0),(42, 440.0),(91, 320.0),(179, 560.0),(122, 460.0),(189, 1280.0),(105, 240.0),(161, 280.0),(69, 520.0),(119, 800.0),(124, 600.0),(200, 500.0),(35, 560.0),(171, 460.0),(202, 360.0),(55, 560.0),(66, 580.0),(94, 600.0),(97, 660.0),(165, 560.0),(177, 500.0),(111, 640.0),(71, 840.0),(73, 280.0),(227, 360.0),(98, 660.0),(43, 600.0),(232, 480.0),(198, 480.0),(207, 540.0),(36, 560.0),(33, 280.0),(82, 580.0),(109, 940.0),(170, 480.0),(251, 600.0),(126, 600.0),(106, 260.0),(172, 240.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_Roman: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 692.0,
        x_height: 469.0,
        italic_angle: 0.0,
        bbox: (-166.0, -283.0, 1021.0, 927.0),
        flags: 0,
        font_family: "Palatino".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(50, 500.0),(207, 333.0),(177, 500.0),(44, 250.0),(85, 778.0),(34, 371.0),(39, 278.0),(56, 500.0),(205, 380.0),(42, 389.0),(233, 833.0),(86, 722.0),(32, 250.0),(45, 333.0),(169, 208.0),(52, 500.0),(65, 778.0),(58, 250.0),(92, 606.0),(49, 500.0),(112, 601.0),(106, 234.0),(38, 778.0),(124, 606.0),(179, 500.0),(206, 313.0),(68, 774.0),(113, 560.0),(107, 556.0),(196, 333.0),(108, 291.0),(183, 606.0),(175, 608.0),(33, 278.0),(96, 278.0),(43, 606.0),(117, 603.0),(119, 834.0),(120, 516.0),(93, 333.0),(118, 565.0),(102, 333.0),(188, 1000.0),(55, 500.0),(76, 611.0),(163, 500.0),(186, 500.0),(94, 606.0),(227, 333.0),(193, 333.0),(185, 500.0),(72, 832.0),(83, 525.0),(63, 444.0),(105, 291.0),(208, 1000.0),(84, 613.0),(114, 395.0),(73, 337.0),(116, 326.0),(88, 667.0),(164, 167.0),(80, 604.0),(115, 424.0),(71, 763.0),(61, 606.0),(81, 786.0),(59, 250.0),(189, 1144.0),(57, 500.0),(36, 500.0),(251, 556.0),(171, 500.0),(41, 333.0),(199, 250.0),(79, 786.0),(48, 500.0),(40, 333.0),(123, 333.0),(37, 840.0),(184, 278.0),(198, 333.0),(62, 606.0),(78, 831.0),(95, 500.0),(125, 333.0),(122, 500.0),(166, 500.0),(91, 333.0),(249, 556.0),(64, 747.0),(167, 500.0),(195, 333.0),(162, 500.0),(99, 444.0),(82, 668.0),(60, 606.0),(232, 611.0),(87, 1000.0),(191, 444.0),(203, 333.0),(69, 611.0),(77, 946.0),(225, 944.0),(126, 606.0),(98, 553.0),(234, 998.0),(172, 331.0),(70, 556.0),(90, 667.0),(250, 827.0),(103, 556.0),(51, 500.0),(104, 582.0),(67, 709.0),(97, 500.0),(197, 333.0),(89, 667.0),(121, 556.0),(66, 611.0),(101, 479.0),(111, 546.0),(46, 250.0),(235, 333.0),(161, 278.0),(170, 500.0),(47, 606.0),(53, 500.0),(180, 250.0),(165, 500.0),(173, 331.0),(35, 500.0),(74, 333.0),(100, 611.0),(187, 500.0),(241, 758.0),(54, 500.0),(174, 605.0),(75, 726.0),(248, 291.0),(109, 883.0),(110, 582.0),(168, 500.0),(182, 628.0),(200, 333.0),(202, 333.0),(245, 287.0),(178, 500.0),(194, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref ZapfChancery_MediumItalic: FontMetrics = FontMetrics {
        ascent: 714.0,
        descent: -314.0,
        cap_height: 708.0,
        x_height: 438.0,
        italic_angle: -14.0,
        bbox: (-181.0, -314.0, 1065.0, 831.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(200, 360.0),(52, 440.0),(41, 220.0),(84, 500.0),(168, 440.0),(81, 600.0),(178, 460.0),(233, 660.0),(89, 560.0),(234, 820.0),(80, 540.0),(92, 480.0),(185, 280.0),(123, 240.0),(113, 400.0),(175, 520.0),(184, 180.0),(55, 440.0),(197, 440.0),(100, 440.0),(241, 540.0),(56, 440.0),(44, 220.0),(117, 460.0),(37, 680.0),(65, 620.0),(96, 240.0),(161, 280.0),(167, 420.0),(169, 160.0),(235, 260.0),(171, 340.0),(125, 240.0),(88, 560.0),(191, 400.0),(225, 740.0),(33, 280.0),(195, 340.0),(94, 520.0),(250, 560.0),(43, 520.0),(163, 440.0),(66, 600.0),(48, 440.0),(68, 700.0),(193, 220.0),(116, 320.0),(182, 500.0),(72, 680.0),(85, 740.0),(194, 300.0),(120, 420.0),(99, 340.0),(115, 320.0),(87, 880.0),(170, 340.0),(179, 480.0),(174, 520.0),(122, 440.0),(198, 440.0),(90, 620.0),(98, 420.0),(42, 420.0),(188, 1000.0),(74, 400.0),(82, 600.0),(69, 620.0),(186, 360.0),(108, 240.0),(77, 840.0),(91, 240.0),(71, 620.0),(172, 240.0),(189, 960.0),(205, 400.0),(248, 300.0),(180, 220.0),(75, 660.0),(36, 440.0),(227, 260.0),(196, 440.0),(60, 520.0),(40, 260.0),(49, 440.0),(106, 220.0),(103, 400.0),(124, 520.0),(245, 240.0),(109, 620.0),(86, 640.0),(173, 260.0),(34, 220.0),(95, 500.0),(97, 420.0),(101, 340.0),(206, 280.0),(35, 440.0),(62, 520.0),(121, 400.0),(208, 1000.0),(93, 320.0),(73, 380.0),(249, 440.0),(199, 220.0),(50, 440.0),(61, 520.0),(38, 780.0),(251, 420.0),(76, 580.0),(203, 300.0),(166, 440.0),(32, 220.0),(119, 680.0),(39, 240.0),(165, 440.0),(46, 220.0),(162, 440.0),(164, 60.0),(51, 440.0),(105, 240.0),(58, 260.0),(47, 340.0),(59, 240.0),(78, 700.0),(112, 440.0),(118, 440.0),(202, 300.0),(70, 580.0),(64, 700.0),(187, 380.0),(45, 280.0),(57, 440.0),(102, 320.0),(126, 520.0),(183, 600.0),(207, 340.0),(232, 580.0),(54, 440.0),(111, 400.0),(114, 300.0),(67, 520.0),(110, 460.0),(177, 500.0),(104, 440.0),(83, 460.0),(53, 440.0),(79, 600.0),(63, 380.0),(107, 440.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: 0.0,
        bbox: (-136.0, -225.0, 820.0, 931.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(115, 410.0),(44, 228.0),(225, 820.0),(97, 456.0),(90, 501.0),(163, 456.0),(202, 273.0),(82, 592.0),(233, 638.0),(125, 274.0),(177, 456.0),(36, 456.0),(193, 273.0),(57, 456.0),(42, 319.0),(53, 456.0),(123, 274.0),(75, 547.0),(33, 228.0),(170, 273.0),(103, 456.0),(196, 273.0),(98, 456.0),(62, 479.0),(41, 273.0),(110, 456.0),(56, 456.0),(199, 273.0),(79, 638.0),(65, 547.0),(116, 228.0),(162, 456.0),(203, 273.0),(120, 410.0),(175, 410.0),(183, 287.0),(189, 820.0),(207, 273.0),(35, 456.0),(71, 638.0),(114, 273.0),(101, 456.0),(105, 182.0),(67, 592.0),(119, 592.0),(70, 501.0),(164, 137.0),(180, 228.0),(39, 182.0),(69, 547.0),(167, 456.0),(185, 273.0),(113, 456.0),(198, 273.0),(81, 638.0),(76, 456.0),(87, 774.0),(248, 182.0),(124, 213.0),(64, 832.0),(102, 228.0),(43, 479.0),(100, 456.0),(122, 410.0),(197, 273.0),(234, 820.0),(249, 501.0),(47, 228.0),(58, 228.0),(51, 456.0),(191, 501.0),(80, 547.0),(106, 182.0),(235, 299.0),(206, 273.0),(99, 410.0),(78, 592.0),(195, 273.0),(63, 456.0),(96, 182.0),(54, 456.0),(179, 456.0),(107, 410.0),(172, 273.0),(173, 273.0),(166, 456.0),(109, 683.0),(168, 456.0),(88, 547.0),(241, 729.0),(83, 547.0),(171, 456.0),(187, 456.0),(174, 410.0),(52, 456.0),(84, 501.0),(50, 456.0),(48, 456.0),(73, 228.0),(104, 456.0),(45, 273.0),(184, 182.0),(74, 410.0),(86, 547.0),(89, 547.0),(227, 303.0),(117, 456.0),(200, 273.0),(121, 410.0),(194, 273.0),(165, 456.0),(208, 820.0),(66, 547.0),(161, 273.0),(61, 479.0),(182, 440.0),(188, 820.0),(59, 228.0),(205, 273.0),(40, 273.0),(95, 456.0),(126, 479.0),(250, 774.0),(92, 228.0),(186, 273.0),(91, 228.0),(77, 683.0),(111, 456.0),(245, 228.0),(32, 228.0),(85, 592.0),(37, 729.0),(72, 592.0),(118, 410.0),(169, 157.0),(49, 456.0),(178, 456.0),(232, 456.0),(68, 592.0),(94, 385.0),(60, 479.0),(108, 182.0),(34, 291.0),(46, 228.0),(112, 456.0),(251, 501.0),(93, 228.0),(55, 456.0),(38, 547.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref AvantGarde_Book: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 547.0,
        italic_angle: 0.0,
        bbox: (-113.0, -222.0, 1148.0, 955.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Book".to_string(),
        glyph_widths: vec![
(63, 591.0),(122, 425.0),(89, 592.0),(37, 775.0),(188, 1000.0),(100, 685.0),(97, 683.0),(46, 277.0),(79, 869.0),(76, 462.0),(184, 354.0),(195, 502.0),(177, 500.0),(67, 813.0),(82, 607.0),(61, 606.0),(121, 536.0),(70, 485.0),(249, 653.0),(251, 554.0),(56, 554.0),(193, 378.0),(43, 606.0),(95, 500.0),(102, 314.0),(234, 1194.0),(108, 200.0),(60, 606.0),(85, 655.0),(36, 554.0),(51, 554.0),(117, 608.0),(84, 426.0),(227, 369.0),(41, 369.0),(245, 200.0),(162, 554.0),(72, 683.0),(71, 872.0),(107, 502.0),(38, 757.0),(58, 277.0),(45, 332.0),(65, 740.0),(74, 482.0),(75, 591.0),(49, 554.0),(104, 610.0),(206, 302.0),(185, 502.0),(68, 744.0),(115, 388.0),(33, 295.0),(170, 502.0),(99, 647.0),(183, 606.0),(163, 554.0),(109, 938.0),(87, 960.0),(52, 554.0),(110, 610.0),(114, 301.0),(166, 554.0),(35, 554.0),(116, 339.0),(106, 203.0),(42, 425.0),(92, 605.0),(91, 351.0),(189, 1174.0),(55, 554.0),(96, 351.0),(178, 553.0),(123, 351.0),(81, 871.0),(125, 351.0),(161, 295.0),(80, 592.0),(112, 682.0),(187, 425.0),(94, 606.0),(113, 682.0),(180, 277.0),(205, 552.0),(233, 868.0),(98, 682.0),(164, 166.0),(34, 309.0),(50, 554.0),(103, 673.0),(173, 251.0),(197, 485.0),(248, 300.0),(111, 655.0),(40, 369.0),(47, 437.0),(62, 606.0),(179, 553.0),(186, 484.0),(32, 277.0),(172, 251.0),(175, 485.0),(59, 277.0),(78, 740.0),(119, 831.0),(235, 369.0),(69, 536.0),(48, 554.0),(165, 554.0),(191, 591.0),(93, 351.0),(77, 919.0),(207, 502.0),(126, 606.0),(194, 375.0),(241, 1157.0),(64, 867.0),(174, 487.0),(202, 332.0),(250, 1137.0),(90, 480.0),(73, 226.0),(83, 498.0),(199, 222.0),(225, 992.0),(118, 554.0),(88, 609.0),(86, 702.0),(167, 615.0),(120, 480.0),(200, 369.0),(66, 574.0),(53, 554.0),(54, 554.0),(171, 425.0),(124, 672.0),(57, 554.0),(196, 439.0),(203, 324.0),(101, 650.0),(182, 564.0),(198, 453.0),(169, 198.0),(232, 517.0),(44, 277.0),(39, 351.0),(105, 200.0),(208, 1000.0),(168, 554.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_Bold: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 475.0,
        italic_angle: 0.0,
        bbox: (-165.0, -250.0, 1000.0, 988.0),
        flags: 0,
        font_family: "New".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(85, 833.0),(105, 370.0),(167, 500.0),(179, 500.0),(234, 1000.0),(41, 389.0),(51, 574.0),(78, 833.0),(232, 722.0),(205, 333.0),(62, 606.0),(66, 778.0),(95, 500.0),(70, 722.0),(202, 333.0),(125, 389.0),(103, 611.0),(99, 556.0),(55, 574.0),(83, 667.0),(44, 278.0),(58, 278.0),(199, 333.0),(116, 426.0),(113, 648.0),(171, 500.0),(194, 333.0),(197, 333.0),(208, 1000.0),(75, 815.0),(189, 1000.0),(170, 481.0),(172, 333.0),(53, 574.0),(119, 889.0),(173, 333.0),(169, 241.0),(175, 685.0),(61, 606.0),(56, 574.0),(81, 833.0),(88, 722.0),(60, 606.0),(102, 389.0),(200, 333.0),(111, 611.0),(92, 606.0),(245, 370.0),(86, 759.0),(37, 833.0),(71, 833.0),(82, 815.0),(100, 667.0),(101, 574.0),(126, 606.0),(45, 333.0),(117, 685.0),(163, 574.0),(36, 574.0),(110, 685.0),(185, 481.0),(187, 500.0),(241, 870.0),(38, 852.0),(64, 747.0),(50, 574.0),(203, 333.0),(52, 574.0),(233, 833.0),(191, 500.0),(68, 833.0),(166, 574.0),(178, 500.0),(118, 611.0),(108, 352.0),(121, 611.0),(34, 333.0),(123, 389.0),(76, 722.0),(90, 667.0),(96, 241.0),(124, 606.0),(39, 241.0),(164, 167.0),(174, 685.0),(162, 574.0),(54, 574.0),(73, 444.0),(188, 1000.0),(177, 500.0),(87, 981.0),(35, 574.0),(74, 648.0),(198, 333.0),(107, 667.0),(67, 778.0),(91, 389.0),(168, 574.0),(63, 500.0),(48, 574.0),(84, 722.0),(184, 241.0),(206, 333.0),(225, 981.0),(161, 296.0),(42, 500.0),(79, 833.0),(59, 278.0),(227, 367.0),(109, 963.0),(195, 333.0),(33, 296.0),(47, 278.0),(182, 747.0),(115, 500.0),(248, 352.0),(72, 870.0),(77, 981.0),(165, 574.0),(93, 389.0),(114, 519.0),(98, 648.0),(186, 481.0),(251, 611.0),(106, 352.0),(196, 333.0),(80, 759.0),(46, 278.0),(94, 606.0),(180, 278.0),(49, 574.0),(122, 537.0),(193, 333.0),(43, 606.0),(32, 287.0),(57, 574.0),(65, 759.0),(89, 722.0),(183, 606.0),(207, 333.0),(250, 907.0),(104, 685.0),(40, 389.0),(120, 611.0),(235, 367.0),(69, 759.0),(97, 611.0),(112, 667.0),(249, 611.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Bold: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: 0.0,
        bbox: (-170.0, -228.0, 1003.0, 962.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(251, 611.0),(54, 556.0),(74, 556.0),(198, 333.0),(235, 365.0),(109, 889.0),(96, 278.0),(70, 611.0),(44, 278.0),(46, 278.0),(111, 611.0),(78, 722.0),(42, 389.0),(67, 722.0),(49, 556.0),(193, 333.0),(88, 667.0),(121, 556.0),(184, 278.0),(203, 333.0),(47, 278.0),(64, 975.0),(81, 778.0),(113, 611.0),(173, 333.0),(197, 333.0),(167, 556.0),(93, 333.0),(182, 556.0),(119, 778.0),(60, 584.0),(104, 611.0),(200, 333.0),(207, 333.0),(48, 556.0),(36, 556.0),(175, 611.0),(179, 556.0),(195, 333.0),(83, 667.0),(115, 556.0),(106, 278.0),(52, 556.0),(117, 611.0),(34, 474.0),(170, 500.0),(84, 611.0),(123, 389.0),(202, 333.0),(205, 333.0),(79, 778.0),(94, 584.0),(110, 611.0),(116, 333.0),(103, 611.0),(248, 278.0),(168, 556.0),(180, 278.0),(186, 500.0),(69, 667.0),(194, 333.0),(95, 556.0),(43, 584.0),(63, 611.0),(191, 611.0),(35, 556.0),(58, 333.0),(189, 1000.0),(162, 556.0),(107, 556.0),(56, 556.0),(249, 611.0),(71, 778.0),(108, 278.0),(161, 333.0),(73, 278.0),(245, 278.0),(234, 1000.0),(91, 333.0),(232, 611.0),(38, 722.0),(50, 556.0),(225, 1000.0),(178, 556.0),(37, 889.0),(100, 611.0),(89, 667.0),(72, 722.0),(250, 944.0),(61, 584.0),(208, 1000.0),(98, 611.0),(57, 556.0),(172, 333.0),(187, 556.0),(51, 556.0),(76, 611.0),(105, 278.0),(41, 333.0),(53, 556.0),(55, 556.0),(65, 722.0),(120, 556.0),(166, 556.0),(90, 611.0),(118, 556.0),(188, 1000.0),(199, 333.0),(87, 944.0),(39, 278.0),(99, 556.0),(177, 556.0),(66, 722.0),(169, 238.0),(86, 667.0),(125, 389.0),(102, 333.0),(82, 722.0),(126, 584.0),(206, 333.0),(114, 389.0),(171, 556.0),(124, 280.0),(45, 333.0),(185, 500.0),(75, 722.0),(92, 278.0),(77, 833.0),(32, 278.0),(33, 333.0),(163, 556.0),(40, 333.0),(85, 722.0),(101, 556.0),(122, 500.0),(165, 556.0),(174, 611.0),(97, 556.0),(241, 889.0),(112, 611.0),(59, 333.0),(68, 722.0),(227, 370.0),(62, 584.0),(80, 667.0),(196, 333.0),(183, 350.0),(233, 778.0),(164, 167.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier_BoldOblique: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 439.0,
        italic_angle: -12.0,
        bbox: (-57.0, -250.0, 869.0, 801.0),
        flags: 65,
        font_family: "Courier".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(232, 600.0),(92, 600.0),(250, 600.0),(174, 600.0),(36, 600.0),(180, 600.0),(182, 600.0),(75, 600.0),(115, 600.0),(116, 600.0),(162, 600.0),(41, 600.0),(96, 600.0),(38, 600.0),(208, 600.0),(74, 600.0),(126, 600.0),(123, 600.0),(82, 600.0),(185, 600.0),(62, 600.0),(87, 600.0),(79, 600.0),(97, 600.0),(102, 600.0),(108, 600.0),(122, 600.0),(189, 600.0),(85, 600.0),(183, 600.0),(43, 600.0),(59, 600.0),(161, 600.0),(170, 600.0),(69, 600.0),(195, 600.0),(225, 600.0),(40, 600.0),(199, 600.0),(109, 600.0),(80, 600.0),(241, 600.0),(163, 600.0),(98, 600.0),(202, 600.0),(93, 600.0),(103, 600.0),(88, 600.0),(172, 600.0),(248, 600.0),(53, 600.0),(94, 600.0),(117, 600.0),(33, 600.0),(60, 600.0),(57, 600.0),(101, 600.0),(99, 600.0),(55, 600.0),(50, 600.0),(81, 600.0),(89, 600.0),(193, 600.0),(95, 600.0),(84, 600.0),(177, 600.0),(49, 600.0),(51, 600.0),(70, 600.0),(119, 600.0),(77, 600.0),(46, 600.0),(91, 600.0),(203, 600.0),(245, 600.0),(34, 600.0),(111, 600.0),(171, 600.0),(251, 600.0),(178, 600.0),(32, 600.0),(124, 600.0),(39, 600.0),(45, 600.0),(68, 600.0),(100, 600.0),(107, 600.0),(66, 600.0),(184, 600.0),(86, 600.0),(207, 600.0),(54, 600.0),(90, 600.0),(175, 600.0),(105, 600.0),(37, 600.0),(71, 600.0),(187, 600.0),(188, 600.0),(194, 600.0),(42, 600.0),(169, 600.0),(205, 600.0),(249, 600.0),(234, 600.0),(35, 600.0),(58, 600.0),(64, 600.0),(114, 600.0),(166, 600.0),(76, 600.0),(52, 600.0),(198, 600.0),(106, 600.0),(121, 600.0),(191, 600.0),(168, 600.0),(125, 600.0),(61, 600.0),(44, 600.0),(47, 600.0),(72, 600.0),(110, 600.0),(200, 600.0),(112, 600.0),(48, 600.0),(65, 600.0),(56, 600.0),(164, 600.0),(233, 600.0),(104, 600.0),(167, 600.0),(235, 600.0),(186, 600.0),(63, 600.0),(113, 600.0),(227, 600.0),(67, 600.0),(83, 600.0),(78, 600.0),(118, 600.0),(173, 600.0),(179, 600.0),(196, 600.0),(206, 600.0),(73, 600.0),(120, 600.0),(165, 600.0),(197, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_Italic: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 692.0,
        x_height: 482.0,
        italic_angle: -10.0,
        bbox: (-170.0, -276.0, 1010.0, 918.0),
        flags: 64,
        font_family: "Palatino".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(173, 333.0),(94, 606.0),(193, 333.0),(33, 333.0),(170, 500.0),(78, 778.0),(103, 500.0),(73, 333.0),(164, 167.0),(63, 500.0),(206, 333.0),(248, 278.0),(75, 667.0),(62, 606.0),(196, 333.0),(43, 606.0),(205, 333.0),(123, 333.0),(112, 500.0),(46, 250.0),(180, 250.0),(121, 500.0),(48, 500.0),(81, 778.0),(74, 333.0),(102, 278.0),(171, 500.0),(108, 278.0),(59, 250.0),(101, 389.0),(177, 500.0),(122, 444.0),(251, 500.0),(167, 500.0),(106, 278.0),(183, 500.0),(125, 333.0),(234, 1028.0),(200, 333.0),(93, 333.0),(208, 1000.0),(174, 528.0),(197, 333.0),(87, 944.0),(227, 333.0),(39, 278.0),(199, 333.0),(86, 722.0),(120, 500.0),(49, 500.0),(82, 667.0),(119, 722.0),(233, 778.0),(36, 500.0),(194, 333.0),(72, 778.0),(188, 1000.0),(186, 500.0),(198, 333.0),(67, 667.0),(117, 556.0),(178, 500.0),(249, 444.0),(89, 667.0),(168, 500.0),(38, 778.0),(83, 556.0),(55, 500.0),(116, 333.0),(70, 556.0),(107, 444.0),(40, 333.0),(84, 611.0),(60, 606.0),(250, 669.0),(105, 278.0),(175, 545.0),(80, 611.0),(114, 389.0),(225, 941.0),(169, 333.0),(97, 444.0),(35, 500.0),(241, 638.0),(111, 444.0),(162, 500.0),(182, 500.0),(77, 944.0),(207, 333.0),(165, 500.0),(191, 500.0),(47, 296.0),(126, 606.0),(53, 500.0),(166, 500.0),(56, 500.0),(187, 500.0),(79, 778.0),(66, 611.0),(54, 500.0),(96, 278.0),(32, 250.0),(68, 778.0),(124, 606.0),(71, 722.0),(185, 500.0),(57, 500.0),(100, 500.0),(88, 722.0),(163, 500.0),(179, 500.0),(235, 333.0),(104, 500.0),(52, 500.0),(50, 500.0),(76, 556.0),(58, 250.0),(161, 333.0),(172, 333.0),(44, 250.0),(189, 1000.0),(61, 606.0),(64, 747.0),(232, 556.0),(98, 463.0),(90, 667.0),(245, 278.0),(184, 278.0),(203, 333.0),(34, 500.0),(37, 889.0),(110, 556.0),(41, 333.0),(95, 500.0),(51, 500.0),(195, 333.0),(85, 778.0),(202, 333.0),(109, 778.0),(99, 407.0),(91, 333.0),(42, 389.0),(69, 611.0),(115, 389.0),(45, 333.0),(118, 500.0),(65, 722.0),(92, 606.0),(113, 463.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_Roman: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 464.0,
        italic_angle: 0.0,
        bbox: (-195.0, -250.0, 1000.0, 965.0),
        flags: 0,
        font_family: "New".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(194, 333.0),(196, 333.0),(198, 333.0),(235, 300.0),(85, 815.0),(234, 1000.0),(114, 444.0),(112, 574.0),(72, 833.0),(46, 278.0),(122, 481.0),(53, 556.0),(54, 556.0),(69, 722.0),(118, 537.0),(42, 500.0),(95, 500.0),(200, 333.0),(232, 667.0),(197, 333.0),(163, 556.0),(110, 611.0),(227, 334.0),(59, 278.0),(241, 796.0),(167, 500.0),(166, 556.0),(64, 737.0),(91, 333.0),(102, 333.0),(104, 611.0),(119, 778.0),(77, 944.0),(62, 606.0),(86, 722.0),(56, 556.0),(93, 333.0),(101, 500.0),(168, 556.0),(195, 333.0),(106, 296.0),(33, 296.0),(116, 389.0),(66, 722.0),(90, 611.0),(182, 606.0),(199, 333.0),(71, 778.0),(45, 333.0),(165, 556.0),(115, 463.0),(185, 389.0),(96, 204.0),(184, 204.0),(83, 630.0),(111, 500.0),(50, 556.0),(120, 537.0),(121, 537.0),(187, 426.0),(43, 606.0),(82, 722.0),(103, 537.0),(125, 333.0),(193, 333.0),(225, 1000.0),(171, 426.0),(70, 667.0),(175, 611.0),(113, 556.0),(32, 278.0),(47, 278.0),(73, 407.0),(78, 815.0),(207, 333.0),(205, 333.0),(109, 889.0),(36, 556.0),(81, 778.0),(84, 667.0),(245, 315.0),(180, 278.0),(249, 500.0),(179, 500.0),(49, 556.0),(99, 444.0),(92, 606.0),(94, 606.0),(248, 315.0),(206, 333.0),(105, 315.0),(61, 606.0),(123, 333.0),(208, 1000.0),(189, 1000.0),(172, 259.0),(233, 778.0),(65, 722.0),(75, 778.0),(108, 315.0),(79, 778.0),(107, 593.0),(41, 333.0),(89, 704.0),(124, 606.0),(202, 333.0),(203, 333.0),(174, 611.0),(162, 556.0),(51, 556.0),(186, 389.0),(52, 556.0),(170, 389.0),(88, 704.0),(250, 833.0),(251, 574.0),(39, 204.0),(44, 278.0),(117, 611.0),(40, 333.0),(37, 833.0),(74, 556.0),(178, 500.0),(35, 556.0),(177, 556.0),(68, 778.0),(55, 556.0),(161, 296.0),(63, 444.0),(87, 981.0),(48, 556.0),(169, 204.0),(183, 606.0),(164, 167.0),(58, 278.0),(76, 667.0),(98, 556.0),(60, 606.0),(80, 667.0),(57, 556.0),(191, 444.0),(97, 556.0),(100, 574.0),(173, 259.0),(126, 606.0),(38, 815.0),(67, 722.0),(34, 389.0),(188, 1000.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_Italic: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 466.0,
        italic_angle: -16.0,
        bbox: (-166.0, -250.0, 994.0, 958.0),
        flags: 64,
        font_family: "New".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(113, 556.0),(67, 722.0),(173, 333.0),(187, 426.0),(53, 556.0),(83, 667.0),(122, 463.0),(191, 444.0),(50, 556.0),(52, 556.0),(232, 667.0),(97, 574.0),(249, 500.0),(62, 606.0),(233, 778.0),(182, 650.0),(116, 352.0),(119, 778.0),(165, 556.0),(87, 926.0),(178, 500.0),(186, 389.0),(248, 333.0),(81, 778.0),(227, 422.0),(57, 556.0),(124, 606.0),(32, 278.0),(197, 333.0),(171, 426.0),(126, 606.0),(61, 606.0),(183, 606.0),(107, 556.0),(94, 606.0),(189, 1000.0),(114, 444.0),(35, 556.0),(63, 444.0),(76, 667.0),(77, 944.0),(100, 611.0),(194, 333.0),(170, 389.0),(47, 606.0),(56, 556.0),(46, 278.0),(39, 204.0),(104, 611.0),(49, 556.0),(164, 167.0),(185, 389.0),(89, 685.0),(84, 685.0),(44, 278.0),(43, 606.0),(74, 611.0),(55, 556.0),(70, 667.0),(193, 333.0),(208, 1000.0),(108, 333.0),(121, 500.0),(162, 556.0),(202, 333.0),(169, 278.0),(250, 778.0),(206, 333.0),(195, 333.0),(93, 333.0),(207, 333.0),(111, 500.0),(65, 704.0),(66, 722.0),(86, 704.0),(99, 444.0),(109, 889.0),(48, 556.0),(59, 278.0),(106, 315.0),(92, 606.0),(112, 574.0),(241, 722.0),(105, 333.0),(101, 444.0),(41, 333.0),(71, 778.0),(78, 815.0),(68, 778.0),(95, 500.0),(168, 556.0),(36, 556.0),(198, 333.0),(245, 333.0),(180, 278.0),(174, 611.0),(203, 333.0),(118, 519.0),(42, 500.0),(33, 333.0),(60, 606.0),(82, 741.0),(90, 667.0),(96, 204.0),(102, 333.0),(125, 333.0),(179, 500.0),(234, 981.0),(98, 556.0),(64, 747.0),(163, 556.0),(235, 372.0),(120, 500.0),(51, 556.0),(110, 611.0),(45, 333.0),(73, 407.0),(58, 278.0),(196, 333.0),(72, 833.0),(175, 611.0),(188, 1000.0),(79, 778.0),(205, 333.0),(34, 400.0),(167, 500.0),(38, 852.0),(123, 333.0),(88, 704.0),(80, 667.0),(161, 333.0),(199, 333.0),(184, 204.0),(69, 722.0),(91, 333.0),(54, 556.0),(103, 537.0),(37, 833.0),(225, 870.0),(85, 815.0),(40, 333.0),(115, 444.0),(172, 333.0),(177, 500.0),(117, 611.0),(200, 333.0),(75, 741.0),(166, 556.0),(251, 556.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier_Oblique: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 426.0,
        italic_angle: -12.0,
        bbox: (-27.0, -250.0, 849.0, 805.0),
        flags: 65,
        font_family: "Courier".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(81, 600.0),(74, 600.0),(86, 600.0),(103, 600.0),(35, 600.0),(68, 600.0),(189, 600.0),(233, 600.0),(245, 600.0),(49, 600.0),(72, 600.0),(167, 600.0),(171, 600.0),(51, 600.0),(80, 600.0),(121, 600.0),(33, 600.0),(38, 600.0),(34, 600.0),(179, 600.0),(55, 600.0),(100, 600.0),(235, 600.0),(77, 600.0),(67, 600.0),(108, 600.0),(79, 600.0),(57, 600.0),(105, 600.0),(98, 600.0),(115, 600.0),(206, 600.0),(76, 600.0),(91, 600.0),(126, 600.0),(48, 600.0),(63, 600.0),(177, 600.0),(56, 600.0),(197, 600.0),(32, 600.0),(165, 600.0),(116, 600.0),(205, 600.0),(170, 600.0),(46, 600.0),(119, 600.0),(234, 600.0),(122, 600.0),(175, 600.0),(95, 600.0),(207, 600.0),(232, 600.0),(174, 600.0),(169, 600.0),(113, 600.0),(178, 600.0),(249, 600.0),(60, 600.0),(111, 600.0),(185, 600.0),(173, 600.0),(118, 600.0),(90, 600.0),(202, 600.0),(82, 600.0),(39, 600.0),(194, 600.0),(84, 600.0),(102, 600.0),(69, 600.0),(36, 600.0),(64, 600.0),(99, 600.0),(200, 600.0),(107, 600.0),(109, 600.0),(85, 600.0),(104, 600.0),(182, 600.0),(37, 600.0),(162, 600.0),(172, 600.0),(117, 600.0),(88, 600.0),(71, 600.0),(112, 600.0),(123, 600.0),(186, 600.0),(161, 600.0),(184, 600.0),(83, 600.0),(183, 600.0),(125, 600.0),(59, 600.0),(58, 600.0),(43, 600.0),(52, 600.0),(97, 600.0),(41, 600.0),(44, 600.0),(53, 600.0),(61, 600.0),(92, 600.0),(50, 600.0),(196, 600.0),(75, 600.0),(89, 600.0),(188, 600.0),(180, 600.0),(87, 600.0),(73, 600.0),(101, 600.0),(164, 600.0),(225, 600.0),(227, 600.0),(250, 600.0),(163, 600.0),(168, 600.0),(40, 600.0),(241, 600.0),(120, 600.0),(166, 600.0),(193, 600.0),(45, 600.0),(94, 600.0),(203, 600.0),(42, 600.0),(248, 600.0),(78, 600.0),(208, 600.0),(93, 600.0),(110, 600.0),(187, 600.0),(114, 600.0),(198, 600.0),(199, 600.0),(124, 600.0),(54, 600.0),(66, 600.0),(65, 600.0),(106, 600.0),(195, 600.0),(251, 600.0),(70, 600.0),(96, 600.0),(62, 600.0),(191, 600.0),(47, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_LightItalic: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 494.0,
        italic_angle: -10.0,
        bbox: (-228.0, -250.0, 1269.0, 883.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Light".to_string(),
        glyph_widths: vec![
(85, 720.0),(86, 680.0),(120, 540.0),(178, 620.0),(44, 300.0),(233, 760.0),(251, 620.0),(186, 440.0),(42, 440.0),(73, 320.0),(183, 460.0),(82, 700.0),(241, 880.0),(172, 180.0),(62, 600.0),(249, 540.0),(108, 280.0),(32, 300.0),(164, 20.0),(196, 440.0),(69, 680.0),(177, 500.0),(195, 440.0),(37, 800.0),(94, 600.0),(117, 620.0),(60, 600.0),(74, 560.0),(124, 600.0),(174, 640.0),(47, 600.0),(232, 580.0),(57, 620.0),(83, 640.0),(180, 300.0),(56, 620.0),(65, 700.0),(107, 600.0),(121, 600.0),(34, 360.0),(198, 440.0),(200, 420.0),(235, 400.0),(72, 800.0),(105, 280.0),(250, 900.0),(163, 620.0),(185, 480.0),(199, 260.0),(64, 780.0),(202, 300.0),(80, 600.0),(58, 300.0),(191, 540.0),(167, 620.0),(89, 660.0),(109, 880.0),(245, 280.0),(184, 320.0),(182, 620.0),(114, 400.0),(54, 620.0),(169, 200.0),(36, 620.0),(111, 540.0),(33, 320.0),(208, 1000.0),(225, 1220.0),(115, 540.0),(187, 300.0),(99, 480.0),(101, 540.0),(67, 720.0),(113, 560.0),(77, 860.0),(68, 740.0),(46, 300.0),(52, 620.0),(162, 620.0),(50, 620.0),(84, 600.0),(102, 340.0),(61, 600.0),(78, 720.0),(197, 440.0),(207, 440.0),(92, 600.0),(104, 620.0),(166, 620.0),(88, 700.0),(110, 620.0),(118, 540.0),(70, 620.0),(125, 380.0),(48, 620.0),(40, 280.0),(97, 620.0),(168, 620.0),(91, 260.0),(43, 600.0),(76, 580.0),(59, 300.0),(98, 600.0),(66, 720.0),(122, 520.0),(194, 320.0),(96, 280.0),(90, 580.0),(206, 260.0),(189, 1180.0),(49, 620.0),(173, 180.0),(39, 280.0),(126, 600.0),(179, 620.0),(95, 500.0),(100, 640.0),(71, 760.0),(119, 880.0),(87, 960.0),(81, 780.0),(41, 280.0),(75, 720.0),(38, 820.0),(103, 560.0),(161, 320.0),(123, 360.0),(175, 660.0),(248, 340.0),(79, 760.0),(193, 340.0),(63, 540.0),(93, 260.0),(165, 620.0),(234, 1180.0),(55, 620.0),(227, 440.0),(203, 320.0),(170, 440.0),(35, 620.0),(188, 1000.0),(53, 620.0),(51, 620.0),(45, 320.0),(171, 300.0),(112, 600.0),(205, 340.0),(106, 280.0),(116, 340.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_Italic: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 653.0,
        x_height: 441.0,
        italic_angle: -15.5,
        bbox: (-169.0, -217.0, 1010.0, 883.0),
        flags: 64,
        font_family: "Times".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(51, 500.0),(189, 1000.0),(235, 310.0),(241, 667.0),(168, 500.0),(110, 500.0),(167, 500.0),(99, 444.0),(248, 278.0),(195, 333.0),(42, 500.0),(48, 500.0),(66, 611.0),(113, 500.0),(77, 833.0),(182, 523.0),(191, 500.0),(84, 556.0),(97, 500.0),(114, 389.0),(78, 667.0),(107, 444.0),(36, 500.0),(117, 500.0),(225, 889.0),(245, 278.0),(112, 500.0),(164, 167.0),(96, 333.0),(124, 275.0),(103, 500.0),(119, 667.0),(118, 444.0),(53, 500.0),(62, 675.0),(187, 500.0),(200, 333.0),(251, 500.0),(199, 333.0),(234, 944.0),(75, 667.0),(63, 500.0),(95, 500.0),(180, 250.0),(61, 675.0),(161, 389.0),(126, 541.0),(186, 556.0),(207, 333.0),(54, 500.0),(120, 444.0),(93, 389.0),(89, 556.0),(175, 500.0),(50, 500.0),(125, 400.0),(233, 722.0),(86, 611.0),(106, 278.0),(123, 400.0),(166, 500.0),(169, 214.0),(184, 333.0),(208, 889.0),(82, 611.0),(196, 333.0),(121, 444.0),(49, 500.0),(87, 833.0),(232, 556.0),(47, 278.0),(105, 278.0),(115, 389.0),(202, 333.0),(60, 675.0),(98, 500.0),(100, 500.0),(34, 420.0),(33, 333.0),(43, 675.0),(80, 611.0),(90, 556.0),(122, 389.0),(185, 556.0),(194, 333.0),(227, 276.0),(249, 500.0),(170, 556.0),(81, 722.0),(55, 500.0),(56, 500.0),(59, 333.0),(35, 500.0),(76, 556.0),(101, 444.0),(206, 333.0),(188, 889.0),(102, 278.0),(116, 278.0),(85, 722.0),(37, 833.0),(79, 722.0),(39, 333.0),(83, 500.0),(92, 278.0),(40, 333.0),(108, 278.0),(69, 611.0),(183, 350.0),(162, 500.0),(91, 389.0),(64, 920.0),(41, 333.0),(73, 333.0),(88, 611.0),(172, 333.0),(198, 333.0),(58, 333.0),(197, 333.0),(165, 500.0),(178, 500.0),(179, 500.0),(45, 333.0),(203, 333.0),(163, 500.0),(193, 333.0),(72, 722.0),(174, 500.0),(57, 500.0),(70, 611.0),(68, 722.0),(173, 333.0),(205, 333.0),(38, 778.0),(111, 500.0),(250, 667.0),(177, 500.0),(94, 422.0),(109, 722.0),(46, 250.0),(74, 444.0),(32, 250.0),(52, 500.0),(65, 611.0),(67, 667.0),(171, 500.0),(71, 722.0),(104, 500.0),(44, 250.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref AvantGarde_Demi: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 555.0,
        italic_angle: 0.0,
        bbox: (-123.0, -251.0, 1222.0, 1021.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(102, 280.0),(93, 320.0),(43, 600.0),(124, 600.0),(184, 280.0),(168, 560.0),(103, 660.0),(186, 480.0),(251, 600.0),(95, 500.0),(86, 700.0),(39, 280.0),(169, 220.0),(47, 460.0),(97, 660.0),(123, 340.0),(245, 240.0),(122, 460.0),(110, 600.0),(111, 640.0),(45, 420.0),(170, 480.0),(189, 1280.0),(166, 560.0),(78, 740.0),(94, 600.0),(98, 660.0),(208, 1000.0),(40, 380.0),(81, 840.0),(202, 360.0),(206, 340.0),(33, 280.0),(80, 560.0),(109, 940.0),(71, 840.0),(225, 900.0),(68, 700.0),(76, 440.0),(46, 280.0),(125, 340.0),(191, 560.0),(188, 1000.0),(175, 520.0),(50, 560.0),(116, 300.0),(173, 240.0),(108, 240.0),(199, 280.0),(99, 640.0),(112, 660.0),(161, 280.0),(162, 560.0),(85, 640.0),(163, 560.0),(177, 500.0),(84, 420.0),(198, 480.0),(241, 1080.0),(92, 640.0),(104, 600.0),(52, 560.0),(89, 620.0),(120, 560.0),(51, 560.0),(235, 360.0),(53, 560.0),(60, 600.0),(66, 580.0),(48, 560.0),(55, 560.0),(197, 420.0),(37, 860.0),(74, 480.0),(167, 560.0),(58, 280.0),(59, 280.0),(171, 460.0),(35, 560.0),(69, 520.0),(248, 320.0),(193, 420.0),(119, 800.0),(114, 320.0),(207, 540.0),(90, 500.0),(42, 440.0),(61, 600.0),(107, 580.0),(49, 560.0),(73, 280.0),(183, 600.0),(54, 560.0),(117, 600.0),(250, 1080.0),(172, 240.0),(44, 280.0),(121, 580.0),(180, 280.0),(194, 420.0),(249, 660.0),(187, 460.0),(234, 1060.0),(70, 480.0),(63, 560.0),(115, 440.0),(118, 560.0),(62, 600.0),(232, 480.0),(200, 500.0),(101, 640.0),(41, 380.0),(91, 320.0),(227, 360.0),(75, 620.0),(36, 560.0),(38, 680.0),(32, 280.0),(65, 740.0),(96, 280.0),(233, 840.0),(205, 700.0),(100, 660.0),(67, 780.0),(106, 260.0),(64, 740.0),(182, 600.0),(164, 160.0),(113, 660.0),(34, 360.0),(72, 680.0),(77, 900.0),(105, 240.0),(178, 560.0),(82, 580.0),(179, 560.0),(88, 680.0),(174, 520.0),(185, 480.0),(79, 840.0),(126, 600.0),(83, 520.0),(87, 900.0),(195, 540.0),(165, 560.0),(57, 560.0),(196, 480.0),(203, 340.0),(56, 560.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow_Oblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: -12.0,
        bbox: (-139.0, -225.0, 915.0, 931.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(180, 228.0),(114, 273.0),(168, 456.0),(48, 456.0),(55, 456.0),(74, 410.0),(89, 547.0),(196, 273.0),(227, 303.0),(208, 820.0),(96, 182.0),(125, 274.0),(178, 456.0),(92, 228.0),(182, 440.0),(235, 299.0),(34, 291.0),(36, 456.0),(52, 456.0),(109, 683.0),(35, 456.0),(41, 273.0),(90, 501.0),(171, 456.0),(169, 157.0),(85, 592.0),(84, 501.0),(44, 228.0),(63, 456.0),(103, 456.0),(108, 182.0),(73, 228.0),(106, 182.0),(166, 456.0),(51, 456.0),(107, 410.0),(194, 273.0),(205, 273.0),(113, 456.0),(187, 456.0),(199, 273.0),(165, 456.0),(104, 456.0),(54, 456.0),(225, 820.0),(49, 456.0),(119, 592.0),(172, 273.0),(177, 456.0),(249, 501.0),(65, 547.0),(184, 182.0),(95, 456.0),(173, 273.0),(232, 456.0),(79, 638.0),(183, 287.0),(251, 501.0),(70, 501.0),(116, 228.0),(77, 683.0),(179, 456.0),(66, 547.0),(111, 456.0),(71, 638.0),(164, 137.0),(167, 456.0),(32, 228.0),(68, 592.0),(175, 410.0),(50, 456.0),(162, 456.0),(91, 228.0),(126, 479.0),(174, 410.0),(56, 456.0),(248, 182.0),(61, 479.0),(86, 547.0),(101, 456.0),(191, 501.0),(88, 547.0),(76, 456.0),(87, 774.0),(38, 547.0),(62, 479.0),(198, 273.0),(250, 774.0),(42, 319.0),(60, 479.0),(94, 385.0),(46, 228.0),(93, 228.0),(186, 273.0),(33, 228.0),(57, 456.0),(99, 410.0),(81, 638.0),(115, 410.0),(117, 456.0),(98, 456.0),(170, 273.0),(161, 273.0),(207, 273.0),(80, 547.0),(200, 273.0),(43, 479.0),(102, 228.0),(120, 410.0),(123, 274.0),(203, 273.0),(245, 228.0),(189, 820.0),(100, 456.0),(118, 410.0),(37, 729.0),(122, 410.0),(112, 456.0),(206, 273.0),(163, 456.0),(64, 832.0),(75, 547.0),(193, 273.0),(59, 228.0),(195, 273.0),(234, 820.0),(69, 547.0),(197, 273.0),(82, 592.0),(40, 273.0),(72, 592.0),(185, 273.0),(105, 182.0),(241, 729.0),(202, 273.0),(39, 182.0),(45, 273.0),(67, 592.0),(58, 228.0),(47, 228.0),(78, 592.0),(97, 456.0),(121, 410.0),(188, 820.0),(124, 213.0),(83, 547.0),(110, 456.0),(233, 638.0),(53, 456.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow_BoldOblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: -12.0,
        bbox: (-143.0, -228.0, 913.0, 962.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(98, 501.0),(51, 456.0),(205, 273.0),(225, 820.0),(101, 456.0),(73, 228.0),(69, 547.0),(168, 456.0),(178, 456.0),(50, 456.0),(95, 456.0),(119, 638.0),(241, 729.0),(118, 456.0),(122, 410.0),(55, 456.0),(76, 501.0),(82, 592.0),(111, 501.0),(162, 456.0),(248, 228.0),(39, 228.0),(250, 774.0),(57, 456.0),(170, 410.0),(199, 273.0),(117, 501.0),(164, 137.0),(49, 456.0),(59, 273.0),(196, 273.0),(179, 456.0),(56, 456.0),(123, 319.0),(245, 228.0),(58, 273.0),(88, 547.0),(114, 319.0),(71, 638.0),(91, 273.0),(110, 501.0),(121, 456.0),(94, 479.0),(103, 501.0),(182, 456.0),(251, 501.0),(171, 456.0),(99, 456.0),(42, 319.0),(48, 456.0),(198, 273.0),(234, 820.0),(172, 273.0),(120, 456.0),(84, 501.0),(107, 456.0),(166, 456.0),(67, 592.0),(34, 389.0),(186, 410.0),(89, 547.0),(92, 228.0),(53, 456.0),(163, 456.0),(180, 228.0),(100, 501.0),(115, 456.0),(227, 303.0),(202, 273.0),(81, 638.0),(104, 501.0),(109, 729.0),(38, 592.0),(52, 456.0),(208, 820.0),(193, 273.0),(79, 638.0),(54, 456.0),(126, 479.0),(93, 273.0),(37, 729.0),(167, 456.0),(46, 228.0),(161, 273.0),(174, 501.0),(61, 479.0),(177, 456.0),(106, 228.0),(60, 479.0),(64, 800.0),(32, 228.0),(33, 273.0),(112, 501.0),(96, 228.0),(235, 299.0),(36, 456.0),(78, 592.0),(173, 273.0),(41, 273.0),(43, 479.0),(45, 273.0),(62, 479.0),(86, 547.0),(108, 228.0),(125, 319.0),(185, 410.0),(191, 501.0),(206, 273.0),(194, 273.0),(207, 273.0),(90, 501.0),(85, 592.0),(116, 273.0),(188, 820.0),(74, 456.0),(63, 501.0),(47, 228.0),(70, 501.0),(87, 774.0),(197, 273.0),(184, 228.0),(40, 273.0),(72, 592.0),(105, 228.0),(124, 230.0),(77, 683.0),(189, 820.0),(249, 501.0),(113, 501.0),(169, 195.0),(200, 273.0),(187, 456.0),(203, 273.0),(232, 501.0),(233, 638.0),(44, 228.0),(66, 592.0),(102, 273.0),(195, 273.0),(75, 592.0),(183, 287.0),(35, 456.0),(97, 456.0),(165, 456.0),(65, 592.0),(68, 592.0),(83, 547.0),(175, 501.0),(80, 547.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_DemiItalic: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 515.0,
        italic_angle: -10.0,
        bbox: (-231.0, -250.0, 1333.0, 941.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(92, 580.0),(53, 680.0),(57, 680.0),(66, 720.0),(60, 620.0),(98, 600.0),(235, 440.0),(186, 520.0),(202, 360.0),(110, 680.0),(188, 1000.0),(41, 260.0),(48, 680.0),(35, 680.0),(33, 320.0),(46, 340.0),(117, 680.0),(165, 680.0),(47, 360.0),(180, 340.0),(126, 620.0),(189, 1360.0),(96, 320.0),(161, 320.0),(174, 820.0),(198, 460.0),(170, 520.0),(90, 680.0),(250, 920.0),(182, 680.0),(116, 440.0),(173, 220.0),(208, 1000.0),(241, 880.0),(51, 680.0),(121, 600.0),(124, 620.0),(185, 520.0),(233, 760.0),(37, 880.0),(36, 680.0),(45, 280.0),(59, 340.0),(79, 760.0),(83, 700.0),(101, 560.0),(108, 380.0),(120, 620.0),(184, 300.0),(58, 340.0),(80, 640.0),(200, 520.0),(63, 620.0),(69, 720.0),(87, 1000.0),(171, 380.0),(81, 760.0),(163, 680.0),(122, 560.0),(73, 380.0),(91, 260.0),(225, 1140.0),(168, 680.0),(178, 420.0),(70, 660.0),(199, 380.0),(206, 320.0),(40, 260.0),(67, 700.0),(167, 620.0),(251, 660.0),(175, 820.0),(32, 340.0),(54, 680.0),(56, 680.0),(179, 420.0),(115, 540.0),(38, 980.0),(62, 620.0),(88, 740.0),(93, 260.0),(107, 700.0),(76, 640.0),(205, 560.0),(164, 120.0),(103, 620.0),(72, 800.0),(34, 380.0),(232, 640.0),(249, 600.0),(64, 780.0),(169, 180.0),(114, 500.0),(194, 340.0),(75, 780.0),(94, 620.0),(111, 600.0),(97, 680.0),(177, 500.0),(203, 360.0),(102, 420.0),(71, 760.0),(89, 660.0),(245, 380.0),(68, 760.0),(123, 300.0),(113, 620.0),(125, 300.0),(42, 460.0),(65, 720.0),(112, 660.0),(52, 680.0),(109, 960.0),(191, 620.0),(195, 480.0),(82, 740.0),(227, 440.0),(39, 320.0),(74, 620.0),(172, 220.0),(100, 680.0),(50, 680.0),(55, 680.0),(77, 860.0),(95, 500.0),(106, 320.0),(84, 700.0),(193, 380.0),(119, 860.0),(162, 680.0),(196, 480.0),(44, 340.0),(78, 740.0),(234, 1180.0),(104, 700.0),(99, 560.0),(187, 380.0),(197, 480.0),(49, 680.0),(118, 540.0),(43, 600.0),(85, 740.0),(183, 360.0),(207, 480.0),(248, 380.0),(105, 380.0),(61, 600.0),(86, 660.0),(166, 680.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_Bold: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 681.0,
        x_height: 471.0,
        italic_angle: 0.0,
        bbox: (-152.0, -266.0, 1000.0, 924.0),
        flags: 0,
        font_family: "Palatino".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(126, 606.0),(45, 333.0),(225, 1000.0),(251, 611.0),(42, 444.0),(163, 500.0),(90, 667.0),(52, 500.0),(105, 333.0),(108, 333.0),(249, 556.0),(93, 333.0),(183, 606.0),(101, 500.0),(169, 227.0),(173, 389.0),(109, 889.0),(107, 611.0),(35, 500.0),(172, 389.0),(114, 389.0),(124, 606.0),(235, 488.0),(56, 500.0),(170, 500.0),(66, 667.0),(187, 500.0),(123, 310.0),(186, 500.0),(232, 611.0),(119, 833.0),(203, 333.0),(60, 606.0),(98, 611.0),(174, 611.0),(85, 778.0),(88, 667.0),(99, 444.0),(117, 611.0),(166, 500.0),(44, 250.0),(205, 333.0),(67, 722.0),(165, 500.0),(78, 833.0),(182, 641.0),(100, 611.0),(76, 611.0),(193, 333.0),(38, 833.0),(74, 389.0),(104, 611.0),(37, 889.0),(81, 833.0),(65, 778.0),(180, 250.0),(206, 333.0),(33, 278.0),(122, 500.0),(125, 310.0),(55, 500.0),(79, 833.0),(43, 606.0),(53, 500.0),(63, 444.0),(69, 611.0),(50, 500.0),(227, 438.0),(250, 833.0),(162, 500.0),(178, 500.0),(49, 500.0),(168, 500.0),(121, 556.0),(36, 500.0),(245, 333.0),(89, 667.0),(96, 278.0),(47, 296.0),(58, 250.0),(71, 833.0),(110, 611.0),(175, 611.0),(177, 500.0),(196, 333.0),(70, 556.0),(92, 606.0),(94, 606.0),(184, 333.0),(188, 1000.0),(59, 250.0),(54, 500.0),(77, 1000.0),(161, 278.0),(82, 722.0),(185, 500.0),(202, 333.0),(120, 500.0),(62, 606.0),(68, 833.0),(95, 500.0),(189, 1000.0),(233, 833.0),(248, 333.0),(72, 833.0),(39, 278.0),(73, 389.0),(164, 167.0),(113, 611.0),(207, 333.0),(48, 500.0),(87, 1000.0),(116, 333.0),(197, 333.0),(80, 611.0),(111, 556.0),(102, 389.0),(40, 333.0),(75, 778.0),(91, 333.0),(198, 333.0),(106, 333.0),(208, 1000.0),(51, 500.0),(179, 500.0),(112, 611.0),(115, 444.0),(191, 444.0),(34, 402.0),(194, 333.0),(200, 333.0),(83, 611.0),(61, 606.0),(241, 778.0),(32, 250.0),(57, 500.0),(46, 250.0),(41, 333.0),(195, 333.0),(171, 500.0),(84, 667.0),(118, 556.0),(86, 778.0),(64, 747.0),(167, 500.0),(103, 556.0),(199, 333.0),(234, 1000.0),(97, 500.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref ZapfDingbats: FontMetrics = FontMetrics {
        ascent: 0.0,
        descent: 0.0,
        cap_height: 0.0,
        x_height: 0.0,
        italic_angle: 0.0,
        bbox: (-1.0, -143.0, 981.0, 820.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(254, 918.0),(36, 980.0),(89, 792.0),(213, 838.0),(207, 788.0),(194, 788.0),(105, 713.0),(93, 682.0),(90, 759.0),(188, 788.0),(202, 788.0),(73, 823.0),(86, 695.0),(241, 874.0),(32, 278.0),(128, 390.0),(67, 788.0),(186, 788.0),(133, 276.0),(169, 595.0),(52, 846.0),(79, 831.0),(60, 754.0),(107, 785.0),(119, 438.0),(61, 494.0),(170, 694.0),(50, 974.0),(74, 789.0),(183, 788.0),(195, 788.0),(223, 834.0),(70, 793.0),(33, 974.0),(80, 923.0),(48, 911.0),(109, 873.0),(179, 788.0),(234, 836.0),(217, 924.0),(242, 760.0),(106, 791.0),(47, 933.0),(245, 865.0),(211, 788.0),(216, 748.0),(76, 823.0),(221, 928.0),(66, 786.0),(112, 762.0),(121, 277.0),(78, 816.0),(85, 792.0),(113, 759.0),(37, 719.0),(125, 668.0),(132, 276.0),(141, 334.0),(82, 723.0),(189, 788.0),(219, 918.0),(226, 924.0),(72, 816.0),(237, 696.0),(114, 759.0),(92, 708.0),(39, 790.0),(162, 544.0),(184, 788.0),(58, 760.0),(59, 759.0),(139, 234.0),(198, 788.0),(205, 788.0),(209, 788.0),(225, 828.0),(104, 787.0),(214, 1016.0),(62, 552.0),(164, 910.0),(182, 788.0),(177, 788.0),(193, 788.0),(218, 748.0),(101, 696.0),(116, 892.0),(117, 788.0),(180, 788.0),(185, 788.0),(192, 788.0),(200, 788.0),(64, 577.0),(49, 945.0),(81, 744.0),(94, 701.0),(122, 415.0),(172, 788.0),(231, 463.0),(236, 867.0),(34, 961.0),(232, 883.0),(131, 317.0),(235, 867.0),(137, 410.0),(210, 788.0),(68, 788.0),(115, 892.0),(126, 668.0),(212, 894.0),(38, 789.0),(215, 458.0),(135, 509.0),(65, 692.0),(46, 911.0),(204, 788.0),(250, 831.0),(181, 788.0),(166, 760.0),(124, 392.0),(55, 571.0),(57, 763.0),(43, 939.0),(88, 768.0),(100, 687.0),(102, 689.0),(136, 410.0),(190, 788.0),(44, 549.0),(206, 788.0),(220, 927.0),(171, 626.0),(228, 917.0),(110, 761.0),(230, 931.0),(71, 794.0),(83, 749.0),(168, 776.0),(138, 234.0),(174, 788.0),(75, 841.0),(96, 815.0),(95, 826.0),(129, 390.0),(123, 392.0),(63, 537.0),(77, 833.0),(87, 776.0),(91, 707.0),(42, 960.0),(69, 790.0),(120, 138.0),(130, 317.0),(140, 334.0),(108, 791.0),(165, 667.0),(187, 788.0),(199, 788.0),(175, 788.0),(167, 760.0),(201, 788.0),(208, 788.0),(203, 788.0),(197, 788.0),(196, 788.0),(251, 873.0),(229, 930.0),(191, 788.0),(35, 974.0),(227, 924.0),(233, 836.0),(98, 789.0),(97, 789.0),(238, 696.0),(243, 946.0),(244, 771.0),(111, 762.0),(239, 874.0),(56, 677.0),(247, 888.0),(134, 509.0),(252, 927.0),(176, 788.0),(253, 970.0),(222, 928.0),(99, 707.0),(173, 788.0),(53, 762.0),(246, 771.0),(248, 967.0),(249, 888.0),(161, 732.0),(51, 755.0),(84, 790.0),(40, 791.0),(54, 761.0),(163, 544.0),(118, 784.0),(178, 788.0),(41, 690.0),(224, 873.0),(103, 786.0),(45, 855.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_Demi: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 502.0,
        italic_angle: 0.0,
        bbox: (-194.0, -250.0, 1346.0, 934.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(40, 320.0),(95, 500.0),(96, 320.0),(118, 600.0),(175, 740.0),(120, 600.0),(62, 600.0),(179, 380.0),(188, 1000.0),(36, 660.0),(166, 660.0),(104, 680.0),(169, 240.0),(64, 820.0),(69, 720.0),(163, 660.0),(73, 400.0),(114, 460.0),(71, 780.0),(83, 660.0),(195, 500.0),(80, 660.0),(197, 460.0),(45, 360.0),(251, 660.0),(112, 640.0),(93, 300.0),(208, 1000.0),(98, 600.0),(90, 640.0),(89, 700.0),(241, 880.0),(106, 340.0),(250, 940.0),(162, 660.0),(234, 1220.0),(161, 360.0),(66, 720.0),(46, 340.0),(123, 320.0),(232, 640.0),(194, 400.0),(99, 580.0),(105, 360.0),(186, 540.0),(70, 680.0),(34, 420.0),(189, 1360.0),(74, 640.0),(101, 580.0),(196, 480.0),(124, 600.0),(191, 660.0),(68, 780.0),(225, 1140.0),(182, 800.0),(235, 400.0),(177, 500.0),(41, 320.0),(249, 620.0),(86, 720.0),(185, 540.0),(78, 740.0),(108, 340.0),(117, 660.0),(122, 560.0),(113, 620.0),(87, 940.0),(32, 340.0),(111, 620.0),(233, 800.0),(60, 600.0),(59, 340.0),(50, 660.0),(94, 600.0),(58, 340.0),(198, 500.0),(167, 600.0),(165, 660.0),(206, 320.0),(193, 400.0),(110, 680.0),(107, 660.0),(103, 580.0),(227, 400.0),(183, 460.0),(184, 320.0),(164, 120.0),(178, 440.0),(82, 780.0),(125, 320.0),(92, 600.0),(79, 800.0),(37, 940.0),(67, 740.0),(172, 220.0),(202, 340.0),(171, 400.0),(199, 320.0),(51, 660.0),(53, 660.0),(49, 660.0),(72, 820.0),(38, 800.0),(245, 360.0),(205, 440.0),(44, 340.0),(207, 500.0),(35, 660.0),(57, 660.0),(100, 640.0),(61, 600.0),(173, 220.0),(168, 660.0),(48, 660.0),(109, 1000.0),(174, 740.0),(187, 400.0),(248, 340.0),(121, 620.0),(88, 780.0),(75, 800.0),(203, 360.0),(39, 320.0),(33, 360.0),(55, 660.0),(43, 600.0),(115, 520.0),(102, 380.0),(97, 580.0),(56, 660.0),(84, 700.0),(77, 940.0),(116, 460.0),(180, 340.0),(81, 800.0),(200, 500.0),(63, 660.0),(65, 720.0),(85, 740.0),(42, 460.0),(47, 600.0),(76, 640.0),(119, 800.0),(52, 660.0),(91, 300.0),(126, 600.0),(54, 660.0),(170, 540.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow_Bold: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: 0.0,
        bbox: (-139.0, -228.0, 822.0, 962.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(187, 456.0),(86, 547.0),(104, 501.0),(251, 501.0),(125, 319.0),(227, 303.0),(43, 479.0),(167, 456.0),(207, 273.0),(32, 228.0),(120, 456.0),(66, 592.0),(69, 547.0),(101, 456.0),(102, 273.0),(161, 273.0),(85, 592.0),(121, 456.0),(41, 273.0),(170, 410.0),(175, 501.0),(48, 456.0),(88, 547.0),(80, 547.0),(194, 273.0),(225, 820.0),(197, 273.0),(109, 729.0),(180, 228.0),(118, 456.0),(112, 501.0),(35, 456.0),(126, 479.0),(195, 273.0),(44, 228.0),(103, 501.0),(165, 456.0),(196, 273.0),(98, 501.0),(54, 456.0),(34, 389.0),(46, 228.0),(51, 456.0),(36, 456.0),(93, 273.0),(248, 228.0),(105, 228.0),(122, 410.0),(199, 273.0),(179, 456.0),(203, 273.0),(99, 456.0),(115, 456.0),(71, 638.0),(186, 410.0),(177, 456.0),(90, 501.0),(241, 729.0),(97, 456.0),(114, 319.0),(62, 479.0),(67, 592.0),(75, 592.0),(50, 456.0),(59, 273.0),(164, 137.0),(185, 410.0),(208, 820.0),(95, 456.0),(77, 683.0),(39, 228.0),(38, 592.0),(232, 501.0),(96, 228.0),(84, 501.0),(106, 228.0),(124, 230.0),(183, 287.0),(53, 456.0),(189, 820.0),(198, 273.0),(64, 800.0),(206, 273.0),(57, 456.0),(55, 456.0),(63, 501.0),(163, 456.0),(92, 228.0),(193, 273.0),(250, 774.0),(107, 456.0),(182, 456.0),(79, 638.0),(76, 501.0),(200, 273.0),(111, 501.0),(45, 273.0),(70, 501.0),(47, 228.0),(184, 228.0),(68, 592.0),(174, 501.0),(74, 456.0),(40, 273.0),(123, 319.0),(82, 592.0),(168, 456.0),(178, 456.0),(191, 501.0),(117, 501.0),(91, 273.0),(202, 273.0),(245, 228.0),(83, 547.0),(49, 456.0),(60, 479.0),(89, 547.0),(94, 479.0),(172, 273.0),(171, 456.0),(61, 479.0),(42, 319.0),(205, 273.0),(72, 592.0),(108, 228.0),(166, 456.0),(233, 638.0),(37, 729.0),(73, 228.0),(235, 299.0),(100, 501.0),(234, 820.0),(249, 501.0),(78, 592.0),(119, 638.0),(58, 273.0),(188, 820.0),(65, 592.0),(110, 501.0),(87, 774.0),(116, 273.0),(169, 195.0),(52, 456.0),(162, 456.0),(113, 501.0),(173, 273.0),(33, 273.0),(56, 456.0),(81, 638.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_BoldItalic: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 681.0,
        x_height: 469.0,
        italic_angle: -10.0,
        bbox: (-170.0, -271.0, 1073.0, 926.0),
        flags: 64,
        font_family: "Palatino".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(101, 444.0),(100, 556.0),(200, 333.0),(86, 667.0),(105, 333.0),(116, 389.0),(79, 833.0),(53, 500.0),(38, 833.0),(58, 250.0),(161, 333.0),(67, 685.0),(164, 167.0),(83, 556.0),(203, 333.0),(32, 250.0),(166, 500.0),(172, 333.0),(76, 611.0),(110, 556.0),(123, 333.0),(82, 722.0),(234, 944.0),(61, 606.0),(196, 333.0),(202, 556.0),(171, 500.0),(35, 500.0),(126, 606.0),(62, 606.0),(57, 500.0),(227, 333.0),(50, 500.0),(51, 500.0),(180, 250.0),(97, 556.0),(241, 738.0),(42, 444.0),(115, 444.0),(235, 333.0),(175, 611.0),(186, 500.0),(96, 278.0),(107, 556.0),(183, 606.0),(39, 278.0),(102, 333.0),(114, 389.0),(162, 500.0),(205, 333.0),(48, 500.0),(74, 389.0),(178, 556.0),(118, 556.0),(113, 537.0),(117, 556.0),(63, 444.0),(248, 333.0),(45, 389.0),(191, 444.0),(225, 944.0),(122, 500.0),(98, 537.0),(194, 333.0),(250, 778.0),(108, 333.0),(182, 556.0),(90, 667.0),(184, 250.0),(68, 778.0),(55, 500.0),(34, 500.0),(47, 315.0),(80, 667.0),(89, 611.0),(43, 606.0),(84, 611.0),(72, 778.0),(120, 500.0),(169, 250.0),(66, 667.0),(60, 606.0),(119, 833.0),(124, 606.0),(163, 500.0),(78, 778.0),(173, 333.0),(174, 611.0),(179, 556.0),(188, 1000.0),(94, 606.0),(193, 333.0),(93, 333.0),(251, 556.0),(71, 778.0),(69, 611.0),(81, 833.0),(197, 333.0),(75, 722.0),(103, 500.0),(207, 333.0),(198, 333.0),(40, 333.0),(91, 333.0),(87, 1000.0),(73, 389.0),(109, 833.0),(249, 556.0),(121, 556.0),(44, 250.0),(99, 444.0),(106, 333.0),(104, 556.0),(112, 556.0),(165, 500.0),(168, 500.0),(56, 500.0),(52, 500.0),(167, 556.0),(208, 1000.0),(187, 500.0),(85, 778.0),(33, 333.0),(36, 500.0),(49, 500.0),(199, 333.0),(64, 833.0),(54, 500.0),(70, 556.0),(177, 500.0),(41, 333.0),(92, 606.0),(88, 722.0),(111, 556.0),(189, 1000.0),(232, 611.0),(77, 944.0),(245, 333.0),(185, 500.0),(195, 333.0),(65, 722.0),(233, 833.0),(59, 250.0),(206, 333.0),(170, 500.0),(37, 889.0),(95, 500.0),(125, 333.0),(46, 250.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: 0.0,
        bbox: (-166.0, -225.0, 1000.0, 931.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(99, 500.0),(58, 278.0),(45, 333.0),(164, 167.0),(47, 278.0),(54, 556.0),(89, 667.0),(161, 333.0),(124, 260.0),(40, 333.0),(92, 278.0),(69, 667.0),(105, 222.0),(205, 333.0),(249, 611.0),(53, 556.0),(232, 556.0),(104, 556.0),(52, 556.0),(51, 556.0),(63, 556.0),(167, 556.0),(165, 556.0),(169, 191.0),(173, 333.0),(189, 1000.0),(196, 333.0),(72, 722.0),(123, 334.0),(74, 500.0),(77, 833.0),(227, 370.0),(59, 278.0),(109, 833.0),(250, 944.0),(126, 584.0),(90, 611.0),(35, 556.0),(234, 1000.0),(82, 722.0),(162, 556.0),(70, 611.0),(78, 722.0),(202, 333.0),(62, 584.0),(191, 611.0),(48, 556.0),(71, 778.0),(86, 667.0),(95, 556.0),(42, 389.0),(39, 222.0),(83, 667.0),(185, 333.0),(112, 556.0),(170, 333.0),(187, 556.0),(33, 278.0),(103, 556.0),(197, 333.0),(46, 278.0),(113, 556.0),(235, 365.0),(43, 584.0),(36, 556.0),(98, 556.0),(80, 667.0),(66, 667.0),(61, 584.0),(56, 556.0),(120, 500.0),(84, 611.0),(199, 333.0),(241, 889.0),(177, 556.0),(32, 278.0),(96, 222.0),(182, 537.0),(188, 1000.0),(178, 556.0),(97, 556.0),(233, 778.0),(114, 333.0),(200, 333.0),(111, 556.0),(102, 278.0),(168, 556.0),(195, 333.0),(251, 611.0),(122, 500.0),(68, 722.0),(107, 500.0),(207, 333.0),(174, 500.0),(76, 556.0),(79, 778.0),(55, 556.0),(100, 556.0),(171, 556.0),(225, 1000.0),(87, 944.0),(67, 722.0),(125, 334.0),(64, 1015.0),(203, 333.0),(206, 333.0),(117, 556.0),(179, 556.0),(85, 722.0),(94, 469.0),(180, 278.0),(60, 584.0),(172, 333.0),(163, 556.0),(119, 722.0),(75, 667.0),(34, 355.0),(116, 278.0),(115, 500.0),(73, 278.0),(108, 222.0),(248, 222.0),(81, 778.0),(175, 500.0),(194, 333.0),(121, 500.0),(208, 1000.0),(57, 556.0),(50, 556.0),(44, 278.0),(49, 556.0),(91, 278.0),(186, 333.0),(193, 333.0),(245, 278.0),(118, 500.0),(184, 222.0),(65, 667.0),(88, 667.0),(93, 278.0),(110, 556.0),(101, 556.0),(183, 350.0),(198, 333.0),(41, 333.0),(37, 889.0),(38, 667.0),(106, 222.0),(166, 556.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_BoldItalic: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 477.0,
        italic_angle: -16.0,
        bbox: (-205.0, -250.0, 1147.0, 991.0),
        flags: 64,
        font_family: "New".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(52, 574.0),(80, 741.0),(169, 287.0),(58, 287.0),(111, 574.0),(76, 704.0),(208, 1000.0),(107, 648.0),(85, 833.0),(57, 574.0),(64, 747.0),(118, 556.0),(188, 1000.0),(33, 333.0),(191, 481.0),(227, 412.0),(177, 500.0),(63, 481.0),(98, 611.0),(37, 889.0),(62, 606.0),(95, 500.0),(232, 704.0),(248, 389.0),(61, 606.0),(112, 648.0),(68, 833.0),(166, 574.0),(113, 630.0),(92, 606.0),(43, 606.0),(47, 278.0),(96, 259.0),(187, 481.0),(78, 852.0),(83, 685.0),(46, 287.0),(233, 833.0),(162, 574.0),(184, 259.0),(249, 574.0),(123, 407.0),(99, 537.0),(97, 667.0),(100, 667.0),(114, 519.0),(106, 370.0),(203, 333.0),(125, 407.0),(105, 389.0),(198, 333.0),(235, 356.0),(172, 278.0),(185, 481.0),(193, 333.0),(199, 333.0),(93, 407.0),(195, 333.0),(183, 606.0),(91, 407.0),(173, 278.0),(71, 815.0),(55, 574.0),(164, 167.0),(79, 833.0),(167, 500.0),(44, 287.0),(60, 606.0),(86, 741.0),(171, 481.0),(59, 287.0),(45, 333.0),(54, 574.0),(117, 685.0),(121, 519.0),(165, 574.0),(94, 606.0),(178, 500.0),(180, 287.0),(179, 500.0),(194, 333.0),(168, 574.0),(42, 500.0),(225, 889.0),(81, 833.0),(108, 389.0),(206, 333.0),(49, 574.0),(186, 481.0),(109, 944.0),(250, 852.0),(120, 574.0),(41, 407.0),(110, 685.0),(207, 333.0),(70, 704.0),(119, 833.0),(36, 574.0),(122, 519.0),(102, 389.0),(67, 759.0),(88, 741.0),(39, 259.0),(75, 778.0),(124, 606.0),(174, 685.0),(72, 870.0),(196, 333.0),(69, 741.0),(34, 400.0),(126, 606.0),(189, 1167.0),(101, 519.0),(77, 944.0),(73, 444.0),(84, 722.0),(53, 574.0),(38, 889.0),(163, 574.0),(51, 574.0),(65, 741.0),(74, 667.0),(251, 574.0),(234, 963.0),(241, 815.0),(48, 574.0),(56, 574.0),(66, 759.0),(205, 333.0),(40, 407.0),(104, 685.0),(116, 407.0),(161, 333.0),(90, 704.0),(170, 481.0),(115, 481.0),(50, 574.0),(175, 685.0),(103, 611.0),(82, 796.0),(200, 333.0),(202, 333.0),(182, 650.0),(87, 944.0),(89, 704.0),(32, 287.0),(35, 574.0),(197, 333.0),(245, 389.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Symbol: FontMetrics = FontMetrics {
        ascent: 0.0,
        descent: 0.0,
        cap_height: 0.0,
        x_height: 0.0,
        italic_angle: 0.0,
        bbox: (-180.0, -293.0, 1090.0, 1010.0),
        flags: 0,
        font_family: "Symbol".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(225, 329.0),(194, 795.0),(185, 549.0),(124, 200.0),(195, 987.0),(199, 768.0),(100, 494.0),(125, 480.0),(98, 549.0),(212, 890.0),(81, 741.0),(215, 250.0),(233, 384.0),(250, 384.0),(122, 494.0),(74, 631.0),(64, 549.0),(76, 686.0),(109, 576.0),(92, 863.0),(123, 480.0),(162, 247.0),(178, 411.0),(206, 713.0),(57, 500.0),(246, 384.0),(217, 603.0),(253, 494.0),(54, 500.0),(208, 768.0),(73, 333.0),(45, 549.0),(65, 722.0),(83, 592.0),(106, 603.0),(120, 493.0),(41, 333.0),(160, 750.0),(93, 333.0),(224, 494.0),(182, 494.0),(243, 686.0),(58, 278.0),(249, 384.0),(179, 549.0),(105, 329.0),(222, 987.0),(229, 713.0),(189, 603.0),(52, 500.0),(227, 790.0),(238, 494.0),(60, 549.0),(177, 549.0),(183, 460.0),(67, 722.0),(176, 400.0),(218, 603.0),(96, 500.0),(116, 439.0),(44, 250.0),(88, 645.0),(66, 667.0),(207, 713.0),(186, 549.0),(107, 549.0),(56, 500.0),(119, 686.0),(232, 384.0),(103, 411.0),(168, 753.0),(210, 790.0),(55, 500.0),(254, 494.0),(71, 603.0),(230, 384.0),(97, 631.0),(63, 444.0),(102, 521.0),(84, 611.0),(161, 620.0),(90, 611.0),(59, 278.0),(38, 778.0),(99, 549.0),(214, 549.0),(165, 713.0),(32, 250.0),(48, 500.0),(77, 889.0),(51, 500.0),(104, 603.0),(169, 753.0),(70, 763.0),(111, 549.0),(242, 274.0),(174, 987.0),(244, 686.0),(237, 494.0),(110, 521.0),(180, 549.0),(33, 333.0),(47, 278.0),(85, 690.0),(112, 549.0),(61, 549.0),(188, 1000.0),(50, 500.0),(228, 786.0),(164, 167.0),(184, 549.0),(248, 384.0),(34, 713.0),(53, 500.0),(82, 556.0),(173, 603.0),(234, 384.0),(78, 722.0),(213, 823.0),(241, 329.0),(190, 1000.0),(202, 713.0),(72, 722.0),(80, 768.0),(191, 658.0),(245, 686.0),(219, 1042.0),(192, 823.0),(198, 823.0),(37, 833.0),(203, 713.0),(91, 333.0),(115, 603.0),(108, 549.0),(171, 1042.0),(172, 987.0),(220, 987.0),(94, 658.0),(75, 722.0),(62, 549.0),(46, 250.0),(87, 768.0),(114, 549.0),(187, 549.0),(197, 768.0),(201, 713.0),(126, 549.0),(209, 713.0),(36, 549.0),(49, 500.0),(42, 500.0),(121, 686.0),(175, 603.0),(86, 439.0),(223, 603.0),(193, 686.0),(226, 790.0),(251, 384.0),(35, 500.0),(200, 768.0),(235, 384.0),(95, 500.0),(170, 753.0),(79, 722.0),(204, 713.0),(221, 603.0),(39, 439.0),(101, 439.0),(167, 753.0),(231, 384.0),(69, 611.0),(113, 521.0),(118, 713.0),(236, 494.0),(211, 790.0),(89, 795.0),(239, 494.0),(247, 384.0),(163, 549.0),(181, 713.0),(205, 713.0),(196, 768.0),(43, 549.0),(68, 612.0),(216, 713.0),(166, 500.0),(40, 333.0),(117, 576.0),(252, 494.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_Bold: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 676.0,
        x_height: 461.0,
        italic_angle: 0.0,
        bbox: (-168.0, -218.0, 1000.0, 935.0),
        flags: 0,
        font_family: "Times".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(64, 930.0),(126, 520.0),(113, 556.0),(191, 500.0),(77, 944.0),(79, 778.0),(70, 611.0),(207, 333.0),(166, 500.0),(91, 333.0),(80, 611.0),(108, 278.0),(117, 556.0),(72, 778.0),(167, 500.0),(44, 250.0),(122, 444.0),(251, 556.0),(186, 500.0),(100, 556.0),(59, 333.0),(85, 722.0),(110, 556.0),(121, 500.0),(87, 1000.0),(83, 556.0),(89, 722.0),(57, 500.0),(109, 833.0),(123, 394.0),(34, 555.0),(36, 500.0),(81, 778.0),(58, 333.0),(60, 570.0),(189, 1000.0),(188, 1000.0),(235, 330.0),(95, 500.0),(38, 833.0),(112, 556.0),(180, 250.0),(76, 667.0),(249, 500.0),(163, 500.0),(177, 500.0),(47, 278.0),(68, 722.0),(225, 1000.0),(106, 333.0),(162, 500.0),(32, 250.0),(35, 500.0),(42, 500.0),(198, 333.0),(203, 333.0),(40, 333.0),(39, 333.0),(102, 333.0),(43, 570.0),(178, 500.0),(54, 500.0),(67, 722.0),(161, 333.0),(104, 556.0),(107, 556.0),(193, 333.0),(171, 500.0),(49, 500.0),(48, 500.0),(169, 278.0),(183, 350.0),(197, 333.0),(84, 667.0),(45, 333.0),(111, 500.0),(69, 667.0),(62, 570.0),(74, 500.0),(199, 333.0),(234, 1000.0),(195, 333.0),(82, 722.0),(93, 333.0),(232, 667.0),(92, 278.0),(119, 722.0),(99, 444.0),(175, 556.0),(53, 500.0),(41, 333.0),(124, 220.0),(168, 500.0),(115, 389.0),(248, 278.0),(61, 570.0),(97, 500.0),(165, 500.0),(200, 333.0),(71, 778.0),(227, 300.0),(78, 722.0),(65, 722.0),(202, 333.0),(88, 722.0),(55, 500.0),(73, 389.0),(185, 500.0),(184, 333.0),(96, 333.0),(116, 333.0),(164, 167.0),(103, 500.0),(98, 556.0),(114, 444.0),(86, 722.0),(125, 394.0),(170, 500.0),(172, 333.0),(245, 278.0),(194, 333.0),(205, 333.0),(63, 500.0),(50, 500.0),(241, 722.0),(75, 778.0),(174, 556.0),(51, 500.0),(94, 581.0),(33, 333.0),(105, 278.0),(90, 667.0),(173, 333.0),(179, 500.0),(56, 500.0),(233, 778.0),(52, 500.0),(37, 1000.0),(46, 250.0),(208, 1000.0),(182, 540.0),(66, 667.0),(101, 444.0),(118, 500.0),(206, 333.0),(196, 333.0),(250, 722.0),(120, 500.0),(187, 500.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Oblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: -12.0,
        bbox: (-170.0, -225.0, 1116.0, 931.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(87, 944.0),(250, 944.0),(37, 889.0),(116, 278.0),(79, 778.0),(168, 556.0),(38, 667.0),(100, 556.0),(107, 500.0),(172, 333.0),(235, 365.0),(32, 278.0),(77, 833.0),(55, 556.0),(119, 722.0),(57, 556.0),(70, 611.0),(76, 556.0),(84, 611.0),(117, 556.0),(126, 584.0),(171, 556.0),(89, 667.0),(186, 333.0),(56, 556.0),(91, 278.0),(104, 556.0),(49, 556.0),(166, 556.0),(97, 556.0),(58, 278.0),(179, 556.0),(108, 222.0),(123, 334.0),(60, 584.0),(48, 556.0),(109, 833.0),(191, 611.0),(44, 278.0),(42, 389.0),(98, 556.0),(196, 333.0),(64, 1015.0),(189, 1000.0),(199, 333.0),(184, 222.0),(233, 778.0),(81, 778.0),(53, 556.0),(47, 278.0),(197, 333.0),(164, 167.0),(111, 556.0),(63, 556.0),(86, 667.0),(241, 889.0),(225, 1000.0),(33, 278.0),(82, 722.0),(41, 333.0),(232, 556.0),(51, 556.0),(174, 500.0),(101, 556.0),(169, 191.0),(200, 333.0),(72, 722.0),(251, 611.0),(118, 500.0),(167, 556.0),(170, 333.0),(122, 500.0),(195, 333.0),(105, 222.0),(36, 556.0),(115, 500.0),(187, 556.0),(208, 1000.0),(90, 611.0),(175, 500.0),(34, 355.0),(69, 667.0),(249, 611.0),(85, 722.0),(182, 537.0),(113, 556.0),(62, 584.0),(121, 500.0),(124, 260.0),(54, 556.0),(67, 722.0),(112, 556.0),(194, 333.0),(193, 333.0),(227, 370.0),(162, 556.0),(163, 556.0),(66, 667.0),(205, 333.0),(65, 667.0),(88, 667.0),(188, 1000.0),(106, 222.0),(120, 500.0),(35, 556.0),(52, 556.0),(59, 278.0),(73, 278.0),(180, 278.0),(198, 333.0),(74, 500.0),(245, 278.0),(93, 278.0),(61, 584.0),(39, 222.0),(234, 1000.0),(114, 333.0),(173, 333.0),(202, 333.0),(95, 556.0),(78, 722.0),(103, 556.0),(206, 333.0),(183, 350.0),(75, 667.0),(125, 334.0),(68, 722.0),(110, 556.0),(71, 778.0),(45, 333.0),(177, 556.0),(46, 278.0),(40, 333.0),(165, 556.0),(50, 556.0),(94, 469.0),(248, 222.0),(102, 278.0),(96, 222.0),(83, 667.0),(161, 333.0),(92, 278.0),(80, 667.0),(99, 500.0),(43, 584.0),(178, 556.0),(185, 333.0),(203, 333.0),(207, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_BoldOblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: -12.0,
        bbox: (-174.0, -228.0, 1114.0, 962.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(126, 584.0),(62, 584.0),(122, 500.0),(175, 611.0),(161, 333.0),(171, 556.0),(194, 333.0),(100, 611.0),(37, 889.0),(186, 500.0),(167, 556.0),(51, 556.0),(39, 278.0),(67, 722.0),(42, 389.0),(101, 556.0),(58, 333.0),(68, 722.0),(125, 389.0),(234, 1000.0),(46, 278.0),(166, 556.0),(203, 333.0),(188, 1000.0),(107, 556.0),(33, 333.0),(169, 238.0),(205, 333.0),(116, 333.0),(182, 556.0),(35, 556.0),(114, 389.0),(124, 280.0),(72, 722.0),(82, 722.0),(83, 667.0),(87, 944.0),(185, 500.0),(106, 278.0),(196, 333.0),(191, 611.0),(121, 556.0),(206, 333.0),(75, 722.0),(96, 278.0),(79, 778.0),(164, 167.0),(88, 667.0),(178, 556.0),(104, 611.0),(117, 611.0),(85, 722.0),(120, 556.0),(123, 389.0),(180, 278.0),(112, 611.0),(183, 350.0),(195, 333.0),(198, 333.0),(98, 611.0),(73, 278.0),(111, 611.0),(99, 556.0),(113, 611.0),(65, 722.0),(86, 667.0),(168, 556.0),(66, 722.0),(251, 611.0),(109, 889.0),(174, 611.0),(48, 556.0),(78, 722.0),(93, 333.0),(103, 611.0),(189, 1000.0),(91, 333.0),(105, 278.0),(179, 556.0),(241, 889.0),(193, 333.0),(44, 278.0),(249, 611.0),(43, 584.0),(63, 611.0),(165, 556.0),(61, 584.0),(199, 333.0),(47, 278.0),(41, 333.0),(90, 611.0),(245, 278.0),(74, 556.0),(187, 556.0),(102, 333.0),(110, 611.0),(92, 278.0),(208, 1000.0),(81, 778.0),(207, 333.0),(52, 556.0),(80, 667.0),(70, 611.0),(173, 333.0),(95, 556.0),(119, 778.0),(233, 778.0),(59, 333.0),(115, 556.0),(55, 556.0),(184, 278.0),(248, 278.0),(97, 556.0),(34, 474.0),(40, 333.0),(71, 778.0),(32, 278.0),(94, 584.0),(162, 556.0),(235, 365.0),(56, 556.0),(177, 556.0),(60, 584.0),(84, 611.0),(57, 556.0),(45, 333.0),(69, 667.0),(202, 333.0),(225, 1000.0),(89, 667.0),(53, 556.0),(232, 611.0),(170, 500.0),(64, 975.0),(76, 611.0),(36, 556.0),(49, 556.0),(54, 556.0),(38, 722.0),(108, 278.0),(200, 333.0),(250, 944.0),(50, 556.0),(118, 556.0),(163, 556.0),(77, 833.0),(172, 333.0),(197, 333.0),(227, 370.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier_Bold: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 439.0,
        italic_angle: 0.0,
        bbox: (-113.0, -250.0, 749.0, 801.0),
        flags: 1,
        font_family: "Courier".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(250, 600.0),(234, 600.0),(98, 600.0),(78, 600.0),(167, 600.0),(52, 600.0),(86, 600.0),(200, 600.0),(194, 600.0),(101, 600.0),(170, 600.0),(70, 600.0),(58, 600.0),(189, 600.0),(165, 600.0),(53, 600.0),(90, 600.0),(233, 600.0),(33, 600.0),(208, 600.0),(109, 600.0),(172, 600.0),(199, 600.0),(94, 600.0),(54, 600.0),(179, 600.0),(57, 600.0),(124, 600.0),(106, 600.0),(168, 600.0),(183, 600.0),(115, 600.0),(175, 600.0),(113, 600.0),(173, 600.0),(32, 600.0),(47, 600.0),(81, 600.0),(51, 600.0),(107, 600.0),(186, 600.0),(117, 600.0),(102, 600.0),(61, 600.0),(166, 600.0),(188, 600.0),(56, 600.0),(65, 600.0),(184, 600.0),(87, 600.0),(191, 600.0),(197, 600.0),(80, 600.0),(203, 600.0),(89, 600.0),(104, 600.0),(55, 600.0),(72, 600.0),(77, 600.0),(126, 600.0),(185, 600.0),(235, 600.0),(119, 600.0),(171, 600.0),(76, 600.0),(187, 600.0),(164, 600.0),(50, 600.0),(84, 600.0),(96, 600.0),(43, 600.0),(195, 600.0),(116, 600.0),(182, 600.0),(111, 600.0),(63, 600.0),(64, 600.0),(73, 600.0),(48, 600.0),(163, 600.0),(59, 600.0),(162, 600.0),(193, 600.0),(207, 600.0),(66, 600.0),(68, 600.0),(37, 600.0),(198, 600.0),(95, 600.0),(69, 600.0),(83, 600.0),(85, 600.0),(92, 600.0),(40, 600.0),(88, 600.0),(103, 600.0),(118, 600.0),(120, 600.0),(125, 600.0),(196, 600.0),(174, 600.0),(45, 600.0),(114, 600.0),(245, 600.0),(248, 600.0),(36, 600.0),(49, 600.0),(41, 600.0),(251, 600.0),(91, 600.0),(169, 600.0),(38, 600.0),(62, 600.0),(74, 600.0),(110, 600.0),(93, 600.0),(205, 600.0),(34, 600.0),(241, 600.0),(249, 600.0),(122, 600.0),(79, 600.0),(161, 600.0),(75, 600.0),(180, 600.0),(67, 600.0),(123, 600.0),(100, 600.0),(121, 600.0),(42, 600.0),(60, 600.0),(82, 600.0),(71, 600.0),(39, 600.0),(97, 600.0),(99, 600.0),(46, 600.0),(105, 600.0),(35, 600.0),(112, 600.0),(178, 600.0),(177, 600.0),(108, 600.0),(202, 600.0),(225, 600.0),(227, 600.0),(44, 600.0),(232, 600.0),(206, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_Roman: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 662.0,
        x_height: 450.0,
        italic_angle: 0.0,
        bbox: (-168.0, -218.0, 1000.0, 898.0),
        flags: 0,
        font_family: "Times".to_string(),
        font_weight: "Roman".to_string(),
        glyph_widths: vec![
(103, 500.0),(126, 541.0),(168, 500.0),(86, 722.0),(121, 500.0),(208, 1000.0),(232, 611.0),(199, 333.0),(50, 500.0),(51, 500.0),(88, 722.0),(90, 611.0),(195, 333.0),(94, 469.0),(227, 276.0),(79, 722.0),(182, 453.0),(107, 500.0),(112, 500.0),(234, 889.0),(72, 722.0),(109, 778.0),(57, 500.0),(49, 500.0),(37, 833.0),(55, 500.0),(166, 500.0),(68, 722.0),(82, 667.0),(110, 500.0),(99, 444.0),(105, 278.0),(203, 333.0),(123, 480.0),(100, 500.0),(179, 500.0),(38, 778.0),(81, 722.0),(63, 444.0),(165, 500.0),(93, 333.0),(106, 278.0),(177, 500.0),(170, 444.0),(56, 500.0),(98, 500.0),(124, 200.0),(58, 278.0),(101, 444.0),(104, 500.0),(108, 278.0),(249, 500.0),(48, 500.0),(185, 444.0),(174, 556.0),(92, 278.0),(69, 611.0),(36, 500.0),(59, 278.0),(32, 250.0),(91, 333.0),(171, 500.0),(67, 667.0),(169, 180.0),(113, 500.0),(34, 408.0),(65, 722.0),(39, 333.0),(74, 389.0),(115, 389.0),(53, 500.0),(125, 480.0),(161, 333.0),(71, 722.0),(167, 500.0),(40, 333.0),(33, 333.0),(122, 444.0),(66, 667.0),(183, 350.0),(95, 500.0),(193, 333.0),(62, 564.0),(164, 167.0),(85, 722.0),(75, 722.0),(84, 611.0),(189, 1000.0),(206, 333.0),(191, 444.0),(225, 889.0),(198, 333.0),(178, 500.0),(207, 333.0),(60, 564.0),(180, 250.0),(78, 722.0),(251, 500.0),(162, 500.0),(233, 722.0),(116, 278.0),(205, 333.0),(44, 250.0),(248, 278.0),(119, 722.0),(73, 333.0),(35, 500.0),(118, 500.0),(173, 333.0),(97, 444.0),(250, 722.0),(235, 310.0),(163, 500.0),(188, 1000.0),(186, 444.0),(202, 333.0),(47, 278.0),(52, 500.0),(111, 500.0),(46, 250.0),(45, 333.0),(77, 889.0),(96, 333.0),(42, 500.0),(187, 500.0),(114, 333.0),(194, 333.0),(80, 556.0),(184, 333.0),(245, 278.0),(241, 667.0),(172, 333.0),(70, 556.0),(41, 333.0),(175, 556.0),(43, 564.0),(83, 556.0),(117, 500.0),(89, 722.0),(87, 944.0),(196, 333.0),(102, 333.0),(61, 564.0),(64, 921.0),(76, 611.0),(54, 500.0),(197, 333.0),(120, 500.0),(200, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed_BoldOblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "BoldOblique".to_string(),
        glyph_widths: vec![
(90, 560.4),(91, 353.2),(117, 550.3),(94, 647.7),(52, 537.8),(95, 386.3),(104, 550.3),(71, 634.2),(43, 647.7),(54, 537.8),(125, 550.3),(93, 353.2),(107, 513.8),(69, 528.1),(51, 537.8),(53, 537.8),(78, 646.8),(72, 646.8),(38, 674.1),(111, 531.0),(105, 264.7),(65, 598.2),(76, 492.4),(103, 553.3),(108, 264.7),(56, 537.8),(70, 528.1),(59, 309.1),(68, 641.8),(33, 352.3),(110, 550.3),(101, 524.3),(40, 353.2),(113, 553.3),(116, 369.5),(35, 537.8),(47, 282.3),(86, 598.2),(89, 559.6),(120, 498.3),(121, 503.8),(50, 537.8),(123, 550.3),(124, 282.3),(87, 852.8),(36, 537.8),(48, 537.8),(66, 588.9),(41, 353.2),(42, 403.9),(81, 656.9),(57, 537.8),(39, 236.6),(60, 647.7),(88, 596.1),(67, 567.1),(37, 774.3),(74, 287.3),(44, 293.6),(126, 647.7),(45, 320.9),(64, 773.1),(32, 268.9),(118, 503.8),(85, 627.5),(80, 566.3),(73, 287.3),(109, 805.4),(92, 282.3),(58, 309.1),(99, 458.1),(100, 553.3),(96, 386.3),(79, 656.9),(115, 460.2),(97, 521.4),(119, 713.9),(98, 553.3),(114, 381.3),(102, 336.0),(106, 264.7),(55, 537.8),(75, 599.0),(62, 647.7),(61, 647.7),(77, 769.3),(112, 553.3),(82, 595.2),(34, 402.7),(84, 527.3),(46, 293.6),(49, 537.8),(63, 448.4),(122, 449.7),(83, 556.6),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuMathTeXGyre: FontMetrics = FontMetrics {
        ascent: 792.0,
        descent: -208.0,
        cap_height: 792.0,
        x_height: 396.0,
        italic_angle: 0.0,
        bbox: (0.0, -208.0, 1000.0, 792.0),
        flags: 0,
        font_family: "DejaVuMathTeXGyre".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(125, 418.0),(123, 418.0),(52, 636.0),(35, 837.0),(62, 795.0),(92, 452.0),(100, 640.0),(112, 640.0),(114, 478.0),(41, 424.0),(70, 693.0),(115, 513.0),(53, 636.0),(106, 310.0),(37, 950.0),(69, 729.0),(36, 636.0),(59, 336.0),(64, 1000.0),(32, 317.0),(102, 370.0),(47, 452.0),(73, 395.0),(38, 890.0),(60, 795.0),(104, 644.0),(81, 819.0),(82, 752.0),(88, 711.0),(107, 605.0),(120, 563.0),(95, 500.0),(61, 788.0),(75, 747.0),(89, 660.0),(91, 419.0),(96, 500.0),(105, 319.0),(43, 788.0),(87, 1027.0),(86, 722.0),(97, 596.0),(84, 666.0),(71, 798.0),(116, 401.0),(33, 401.0),(66, 734.0),(56, 636.0),(68, 801.0),(72, 872.0),(74, 400.0),(50, 636.0),(79, 819.0),(93, 419.0),(65, 722.0),(42, 500.0),(55, 636.0),(80, 672.0),(99, 560.0),(113, 640.0),(122, 526.0),(39, 274.0),(90, 694.0),(94, 837.0),(111, 602.0),(101, 591.0),(44, 317.0),(67, 765.0),(83, 685.0),(51, 636.0),(110, 644.0),(126, 837.0),(124, 224.0),(46, 317.0),(48, 636.0),(40, 424.0),(49, 636.0),(108, 319.0),(76, 664.0),(45, 337.0),(34, 459.0),(54, 636.0),(98, 640.0),(103, 640.0),(117, 644.0),(77, 1023.0),(57, 636.0),(58, 336.0),(78, 875.0),(85, 842.0),(118, 564.0),(63, 536.0),(109, 948.0),(119, 855.0),(121, 564.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(81, 608.2),(42, 386.3),(91, 301.6),(101, 475.7),(34, 355.3),(33, 309.6),(41, 301.6),(61, 647.7),(39, 212.2),(62, 647.7),(48, 491.6),(124, 260.5),(59, 260.5),(52, 491.6),(64, 773.1),(86, 528.5),(100, 490.8),(56, 491.6),(73, 227.8),(66, 530.2),(82, 536.9),(94, 647.7),(99, 424.9),(72, 581.4),(108, 214.8),(117, 489.9),(126, 647.7),(69, 488.3),(83, 490.8),(65, 528.5),(92, 260.5),(122, 405.6),(98, 490.8),(47, 260.5),(107, 447.6),(111, 472.7),(80, 466.0),(121, 457.2),(53, 491.6),(88, 529.4),(85, 565.9),(49, 491.6),(36, 491.6),(97, 473.6),(35, 647.7),(40, 301.6),(118, 457.2),(93, 301.6),(123, 491.6),(50, 491.6),(71, 599.0),(70, 444.6),(105, 214.8),(104, 489.9),(125, 491.6),(46, 245.4),(68, 595.2),(84, 471.9),(60, 647.7),(45, 278.9),(76, 430.4),(120, 457.2),(58, 260.5),(110, 489.9),(116, 302.9),(119, 632.1),(113, 490.8),(79, 608.2),(38, 602.8),(37, 734.5),(114, 317.5),(74, 227.8),(109, 752.9),(78, 578.0),(106, 214.8),(32, 245.4),(57, 491.6),(67, 539.8),(55, 491.6),(112, 490.8),(90, 529.4),(96, 386.3),(43, 647.7),(63, 410.2),(95, 386.3),(103, 490.8),(87, 764.3),(77, 666.9),(102, 271.8),(115, 402.7),(75, 506.7),(44, 245.4),(89, 471.9),(51, 491.6),(54, 491.6),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed_Bold: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(33, 352.3),(59, 309.1),(74, 287.3),(89, 559.6),(108, 264.7),(118, 503.8),(82, 595.2),(51, 537.8),(78, 646.8),(87, 852.8),(100, 553.3),(62, 647.7),(72, 646.8),(117, 550.3),(41, 353.2),(42, 403.9),(112, 553.3),(55, 537.8),(35, 647.7),(61, 647.7),(44, 293.6),(65, 598.2),(58, 309.1),(32, 268.9),(34, 402.7),(97, 521.4),(104, 550.3),(102, 336.0),(114, 381.3),(45, 320.9),(70, 528.1),(125, 550.3),(124, 282.3),(93, 353.2),(113, 553.3),(60, 647.7),(86, 598.2),(71, 634.2),(57, 537.8),(64, 773.1),(75, 599.0),(56, 537.8),(119, 713.9),(121, 503.8),(126, 647.7),(123, 550.3),(52, 537.8),(83, 556.6),(110, 550.3),(67, 567.1),(111, 531.0),(109, 805.4),(79, 656.9),(43, 647.7),(77, 769.3),(76, 492.4),(85, 627.5),(98, 553.3),(107, 513.8),(50, 537.8),(53, 537.8),(88, 596.1),(47, 282.3),(94, 647.7),(80, 566.3),(122, 449.7),(95, 386.3),(39, 236.6),(54, 537.8),(38, 674.1),(101, 524.3),(46, 293.6),(81, 656.9),(115, 460.2),(120, 498.3),(84, 527.3),(99, 458.1),(68, 641.8),(105, 264.7),(69, 528.1),(37, 774.3),(90, 560.4),(106, 264.7),(66, 588.9),(40, 353.2),(73, 287.3),(116, 369.5),(63, 448.4),(103, 553.3),(91, 353.2),(92, 282.3),(48, 537.8),(36, 537.8),(49, 537.8),(96, 386.3),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed_Bold: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(99, 466.3),(85, 667.9),(111, 510.8),(67, 609.7),(51, 532.8),(95, 382.8),(115, 431.0),(70, 543.6),(94, 641.7),(96, 382.8),(37, 727.8),(44, 266.4),(80, 576.1),(82, 636.3),(114, 403.6),(86, 594.3),(88, 594.3),(121, 445.1),(91, 362.4),(126, 641.7),(60, 641.7),(58, 282.6),(73, 358.3),(104, 556.9),(36, 532.8),(42, 400.2),(65, 594.3),(77, 847.9),(122, 434.7),(106, 276.8),(54, 532.8),(89, 546.6),(59, 282.6),(87, 860.3),(46, 266.4),(41, 362.4),(92, 279.7),(117, 556.9),(97, 496.3),(49, 532.8),(107, 530.8),(113, 535.3),(39, 234.4),(78, 699.9),(72, 723.6),(50, 532.8),(57, 532.8),(52, 532.8),(100, 535.3),(43, 641.7),(103, 535.3),(55, 532.8),(109, 810.5),(108, 290.9),(76, 538.7),(93, 362.4),(53, 532.8),(68, 664.2),(45, 318.0),(74, 362.4),(102, 329.2),(116, 353.7),(84, 569.8),(33, 336.2),(48, 532.8),(79, 667.1),(105, 290.9),(112, 535.3),(120, 456.4),(34, 399.0),(35, 641.7),(61, 641.7),(101, 487.1),(98, 535.3),(125, 492.5),(64, 766.0),(32, 266.4),(118, 445.1),(119, 659.2),(62, 641.7),(63, 448.9),(71, 654.2),(123, 492.5),(75, 665.8),(40, 362.4),(90, 559.0),(66, 647.1),(38, 691.6),(124, 278.5),(83, 553.2),(47, 279.7),(110, 556.9),(69, 583.5),(81, 667.1),(56, 532.8),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif_BoldItalic: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "BoldItalic".to_string(),
        glyph_widths: vec![
(121, 494.6),(56, 592.3),(115, 479.2),(90, 621.4),(110, 618.9),(42, 445.1),(71, 726.9),(46, 296.3),(37, 808.8),(47, 310.9),(70, 604.3),(82, 707.4),(85, 742.3),(107, 589.8),(109, 900.7),(65, 660.4),(50, 592.3),(106, 308.0),(119, 732.8),(105, 323.4),(112, 595.2),(55, 592.3),(77, 942.2),(96, 425.6),(101, 541.6),(64, 851.2),(40, 402.7),(63, 498.8),(89, 607.6),(117, 618.9),(114, 448.5),(44, 296.3),(122, 483.4),(126, 713.2),(38, 768.5),(32, 296.3),(78, 778.1),(61, 713.2),(51, 592.3),(62, 713.2),(103, 595.2),(45, 353.3),(67, 677.5),(57, 592.3),(102, 366.2),(72, 804.2),(79, 741.5),(113, 595.2),(54, 592.3),(33, 373.6),(93, 402.7),(104, 618.9),(116, 393.2),(66, 719.5),(73, 398.2),(108, 323.4),(41, 402.7),(69, 648.8),(48, 592.3),(91, 402.7),(59, 314.2),(118, 494.6),(120, 507.5),(36, 592.3),(52, 592.3),(87, 955.9),(88, 660.4),(94, 713.2),(124, 309.6),(125, 547.4),(53, 592.3),(80, 640.1),(34, 443.5),(39, 260.6),(58, 314.2),(68, 738.2),(60, 713.2),(83, 614.7),(84, 633.4),(74, 402.7),(86, 660.4),(49, 592.3),(95, 425.6),(35, 713.2),(92, 310.9),(97, 551.5),(98, 595.2),(99, 518.3),(81, 741.5),(111, 567.7),(123, 547.4),(76, 598.5),(75, 739.8),(43, 713.2),(100, 595.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed_BoldItalic: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "BoldItalic".to_string(),
        glyph_widths: vec![
(107, 530.8),(110, 556.9),(91, 362.4),(43, 641.7),(125, 492.5),(36, 532.8),(47, 279.7),(65, 594.3),(48, 532.8),(82, 636.3),(104, 556.9),(114, 403.6),(99, 466.3),(126, 641.7),(51, 532.8),(35, 641.7),(63, 448.9),(97, 496.3),(98, 535.3),(122, 434.7),(119, 659.2),(113, 535.3),(60, 641.7),(123, 492.5),(37, 727.8),(55, 532.8),(71, 654.2),(95, 382.8),(103, 535.3),(41, 362.4),(38, 691.6),(120, 456.4),(88, 594.3),(39, 234.4),(50, 532.8),(64, 766.0),(61, 641.7),(66, 647.1),(86, 594.3),(102, 329.2),(85, 667.9),(42, 400.2),(93, 362.4),(116, 353.7),(78, 699.9),(87, 860.3),(79, 667.1),(77, 847.9),(80, 576.1),(34, 399.0),(62, 641.7),(75, 665.8),(32, 266.4),(81, 667.1),(83, 553.2),(67, 609.7),(58, 282.6),(105, 290.9),(115, 431.0),(117, 556.9),(72, 723.6),(54, 532.8),(74, 362.4),(111, 510.8),(92, 279.7),(46, 266.4),(89, 546.6),(69, 583.5),(33, 336.2),(84, 569.8),(106, 276.8),(121, 445.1),(44, 266.4),(45, 318.0),(109, 810.5),(108, 290.9),(112, 535.3),(57, 532.8),(70, 543.6),(68, 664.2),(73, 358.3),(124, 278.5),(52, 532.8),(90, 559.0),(118, 445.1),(53, 532.8),(40, 362.4),(49, 532.8),(94, 641.7),(100, 535.3),(96, 382.8),(56, 532.8),(76, 538.7),(59, 282.6),(101, 487.1),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_BoldOblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "BoldOblique".to_string(),
        glyph_widths: vec![
(44, 326.3),(59, 343.5),(103, 614.9),(72, 719.0),(37, 860.7),(46, 326.3),(56, 597.7),(68, 713.1),(77, 854.9),(108, 294.5),(114, 423.7),(120, 554.1),(53, 597.7),(86, 664.8),(115, 511.3),(62, 719.8),(75, 665.7),(91, 392.6),(95, 429.5),(102, 373.7),(104, 611.6),(39, 263.0),(70, 586.8),(79, 730.3),(105, 294.5),(65, 664.8),(69, 586.8),(85, 697.6),(45, 356.5),(106, 294.5),(43, 719.8),(112, 614.9),(36, 597.7),(124, 313.8),(81, 730.3),(96, 429.5),(110, 611.6),(119, 793.6),(126, 719.8),(99, 509.2),(51, 597.7),(118, 560.0),(71, 705.1),(94, 719.8),(63, 498.3),(83, 618.7),(34, 447.6),(61, 719.8),(97, 579.7),(54, 597.7),(66, 654.8),(117, 611.6),(47, 313.8),(52, 597.7),(50, 597.7),(87, 947.6),(89, 622.1),(125, 611.6),(38, 749.2),(55, 597.7),(80, 629.6),(58, 343.5),(113, 614.9),(82, 661.5),(60, 719.8),(93, 392.6),(101, 582.6),(84, 586.0),(74, 319.6),(107, 571.3),(35, 597.7),(41, 392.6),(88, 662.3),(49, 597.7),(64, 859.1),(100, 614.9),(109, 895.1),(76, 547.4),(111, 590.2),(40, 392.6),(57, 597.7),(122, 500.0),(32, 299.1),(33, 391.8),(42, 449.2),(78, 719.0),(98, 614.9),(48, 597.7),(73, 319.6),(123, 611.6),(121, 560.0),(116, 410.7),(67, 630.5),(90, 622.9),(92, 313.8),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(43, 719.8),(64, 859.1),(82, 596.9),(61, 719.8),(75, 563.3),(96, 429.5),(76, 478.6),(112, 545.3),(79, 676.2),(101, 528.5),(85, 628.8),(108, 238.7),(60, 719.8),(68, 661.5),(49, 546.6),(69, 542.8),(77, 741.2),(62, 719.8),(72, 646.0),(50, 546.6),(121, 508.4),(35, 719.8),(87, 849.4),(110, 544.5),(89, 524.7),(117, 544.5),(36, 546.6),(86, 587.7),(126, 719.8),(120, 508.4),(103, 545.3),(44, 273.1),(52, 546.6),(54, 546.6),(78, 642.6),(38, 669.9),(63, 456.0),(97, 526.4),(51, 546.6),(114, 353.2),(123, 546.6),(46, 273.1),(111, 525.6),(90, 588.5),(113, 545.3),(81, 676.2),(116, 336.8),(33, 344.4),(125, 546.6),(57, 546.6),(122, 450.9),(40, 335.2),(70, 494.1),(93, 335.2),(102, 302.4),(100, 545.3),(59, 289.4),(66, 589.3),(84, 524.7),(88, 588.5),(118, 508.4),(92, 289.4),(48, 546.6),(65, 587.7),(32, 273.1),(47, 289.4),(99, 472.3),(67, 599.8),(45, 310.0),(34, 395.1),(55, 546.6),(42, 429.5),(105, 238.7),(58, 289.4),(104, 544.5),(41, 335.2),(71, 665.7),(91, 335.2),(74, 253.4),(109, 836.8),(115, 447.6),(124, 289.4),(94, 719.8),(106, 238.7),(95, 429.5),(107, 497.5),(37, 816.3),(73, 253.4),(53, 546.6),(98, 545.3),(39, 236.2),(83, 545.3),(56, 546.6),(80, 518.0),(119, 702.6),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed_Oblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "Oblique".to_string(),
        glyph_widths: vec![
(54, 491.6),(125, 491.6),(63, 410.2),(96, 386.3),(121, 457.2),(57, 491.6),(49, 491.6),(101, 475.7),(60, 647.7),(122, 405.6),(37, 734.5),(55, 491.6),(69, 488.3),(43, 647.7),(86, 528.5),(67, 539.8),(117, 489.9),(78, 578.0),(114, 317.5),(50, 491.6),(66, 530.2),(90, 529.4),(119, 632.1),(41, 301.6),(104, 489.9),(71, 599.0),(126, 647.7),(120, 457.2),(83, 490.8),(88, 529.4),(98, 490.8),(82, 536.9),(32, 245.4),(64, 773.1),(80, 466.0),(72, 581.4),(58, 260.5),(107, 447.6),(123, 491.6),(95, 386.3),(108, 214.8),(70, 444.6),(33, 309.6),(81, 608.2),(39, 212.2),(91, 301.6),(36, 491.6),(47, 260.5),(89, 471.9),(112, 490.8),(45, 278.9),(118, 457.2),(99, 424.9),(59, 260.5),(38, 602.8),(51, 491.6),(74, 227.8),(61, 647.7),(42, 386.3),(87, 764.3),(102, 271.8),(110, 489.9),(115, 402.7),(124, 260.5),(52, 491.6),(53, 491.6),(56, 491.6),(68, 595.2),(77, 666.9),(84, 471.9),(94, 647.7),(113, 490.8),(97, 473.6),(79, 608.2),(100, 490.8),(35, 647.7),(40, 301.6),(92, 260.5),(48, 491.6),(34, 355.3),(76, 430.4),(105, 214.8),(106, 214.8),(111, 472.7),(44, 245.4),(73, 227.8),(116, 302.9),(85, 565.9),(65, 528.5),(93, 301.6),(109, 752.9),(62, 647.7),(75, 506.7),(103, 490.8),(46, 245.4),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed_Italic: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "Italic".to_string(),
        glyph_widths: vec![
(60, 647.7),(57, 491.6),(85, 651.4),(53, 491.6),(92, 260.5),(99, 432.9),(102, 286.1),(32, 245.4),(69, 564.2),(59, 260.5),(88, 550.3),(97, 460.6),(120, 435.8),(121, 436.7),(66, 568.0),(123, 491.6),(125, 491.6),(44, 245.4),(81, 633.8),(126, 647.7),(80, 520.1),(56, 491.6),(98, 494.5),(75, 577.6),(106, 239.5),(124, 260.5),(104, 497.9),(83, 529.4),(100, 494.5),(34, 355.3),(35, 647.7),(36, 491.6),(58, 260.5),(46, 245.4),(70, 536.1),(82, 581.8),(48, 491.6),(89, 510.1),(90, 536.9),(111, 465.2),(62, 647.7),(63, 414.4),(94, 647.7),(118, 436.7),(71, 617.4),(103, 494.5),(114, 369.5),(91, 301.6),(77, 791.5),(96, 386.3),(39, 212.2),(79, 633.8),(107, 468.1),(50, 491.6),(78, 676.2),(52, 491.6),(86, 558.3),(68, 619.5),(87, 794.5),(109, 732.8),(37, 734.5),(117, 497.9),(55, 491.6),(38, 687.9),(43, 647.7),(93, 301.6),(115, 396.4),(73, 305.4),(47, 260.5),(65, 558.3),(119, 661.5),(74, 309.6),(122, 407.3),(116, 310.4),(61, 647.7),(49, 491.6),(95, 386.3),(101, 457.2),(67, 591.4),(54, 491.6),(110, 497.9),(105, 247.1),(113, 494.5),(40, 301.6),(51, 491.6),(72, 674.1),(76, 513.4),(33, 310.4),(41, 301.6),(42, 386.3),(108, 247.1),(112, 494.5),(64, 773.1),(84, 515.5),(45, 260.9),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono_BoldOblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "BoldOblique".to_string(),
        glyph_widths: vec![
(49, 517.2),(81, 517.2),(65, 517.2),(42, 517.2),(72, 517.2),(44, 517.2),(93, 517.2),(77, 517.2),(53, 517.2),(103, 517.2),(102, 517.2),(37, 517.2),(76, 517.2),(78, 517.2),(110, 517.2),(120, 517.2),(122, 517.2),(70, 517.2),(33, 517.2),(114, 517.2),(62, 517.2),(91, 517.2),(104, 517.2),(73, 517.2),(113, 517.2),(115, 517.2),(124, 517.2),(60, 517.2),(35, 517.2),(92, 517.2),(94, 517.2),(97, 517.2),(86, 517.2),(36, 517.2),(109, 517.2),(51, 517.2),(121, 517.2),(43, 517.2),(61, 517.2),(63, 517.2),(74, 517.2),(56, 517.2),(79, 517.2),(117, 517.2),(66, 517.2),(125, 517.2),(32, 517.2),(67, 517.2),(59, 517.2),(75, 517.2),(123, 517.2),(105, 517.2),(89, 517.2),(47, 517.2),(90, 517.2),(95, 517.2),(64, 517.2),(85, 517.2),(41, 517.2),(68, 517.2),(99, 517.2),(111, 517.2),(116, 517.2),(119, 517.2),(126, 517.2),(46, 517.2),(87, 517.2),(101, 517.2),(45, 517.2),(83, 517.2),(108, 517.2),(55, 517.2),(84, 517.2),(69, 517.2),(71, 517.2),(80, 517.2),(96, 517.2),(118, 517.2),(82, 517.2),(50, 517.2),(106, 517.2),(100, 517.2),(112, 517.2),(39, 517.2),(48, 517.2),(52, 517.2),(57, 517.2),(107, 517.2),(54, 517.2),(34, 517.2),(40, 517.2),(88, 517.2),(98, 517.2),(58, 517.2),(38, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(123, 546.6),(105, 274.7),(107, 520.6),(85, 724.0),(39, 236.2),(108, 274.7),(34, 395.1),(72, 749.2),(97, 512.2),(101, 508.4),(117, 553.3),(122, 452.6),(42, 429.5),(54, 546.6),(32, 273.1),(67, 657.3),(95, 429.5),(124, 289.4),(102, 318.0),(113, 549.9),(43, 719.8),(44, 273.1),(37, 816.3),(38, 764.7),(70, 596.1),(88, 611.6),(110, 553.3),(65, 620.4),(41, 335.2),(115, 440.9),(63, 460.6),(45, 290.3),(36, 546.6),(75, 641.8),(96, 429.5),(57, 546.6),(49, 546.6),(60, 719.8),(94, 719.8),(100, 549.9),(83, 588.5),(66, 631.3),(59, 289.4),(92, 289.4),(64, 859.1),(51, 546.6),(58, 289.4),(106, 266.4),(50, 546.6),(84, 573.0),(114, 410.7),(116, 345.2),(80, 578.0),(74, 344.4),(103, 549.9),(82, 646.8),(33, 345.2),(48, 546.6),(118, 485.3),(79, 704.3),(40, 335.2),(104, 553.3),(68, 688.8),(99, 481.1),(47, 289.4),(98, 549.9),(86, 620.4),(119, 735.3),(55, 546.6),(69, 627.1),(76, 570.5),(78, 751.7),(35, 719.8),(81, 704.3),(111, 517.2),(109, 814.6),(121, 485.3),(89, 567.1),(61, 719.8),(125, 546.6),(126, 719.8),(71, 686.2),(52, 546.6),(56, 546.6),(120, 484.5),(87, 883.0),(62, 719.8),(53, 546.6),(77, 879.6),(93, 335.2),(46, 273.1),(73, 339.3),(112, 549.9),(90, 596.9),(91, 335.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(123, 491.6),(106, 239.5),(68, 619.5),(32, 245.4),(70, 536.1),(97, 460.6),(87, 794.5),(34, 355.3),(63, 414.4),(72, 674.1),(54, 491.6),(80, 520.1),(47, 260.5),(43, 647.7),(111, 465.2),(41, 301.6),(37, 734.5),(83, 529.4),(55, 491.6),(115, 396.4),(93, 301.6),(100, 494.5),(39, 212.2),(99, 432.9),(109, 732.8),(53, 491.6),(94, 647.7),(51, 491.6),(65, 558.3),(73, 305.4),(60, 647.7),(77, 791.5),(42, 386.3),(118, 436.7),(74, 309.6),(119, 661.5),(33, 310.4),(95, 386.3),(124, 260.5),(56, 491.6),(85, 651.4),(79, 633.8),(117, 497.9),(86, 558.3),(75, 577.6),(89, 510.1),(91, 301.6),(122, 407.3),(44, 245.4),(62, 647.7),(113, 494.5),(108, 247.1),(50, 491.6),(57, 491.6),(59, 260.5),(49, 491.6),(64, 773.1),(67, 591.4),(71, 617.4),(58, 260.5),(78, 676.2),(81, 633.8),(66, 568.0),(45, 260.9),(38, 687.9),(84, 515.5),(96, 386.3),(52, 491.6),(105, 247.1),(114, 369.5),(104, 497.9),(92, 260.5),(69, 564.2),(98, 494.5),(116, 310.4),(35, 647.7),(88, 550.3),(112, 494.5),(120, 435.8),(110, 497.9),(61, 647.7),(121, 436.7),(126, 647.7),(36, 491.6),(46, 245.4),(48, 491.6),(40, 301.6),(90, 536.9),(102, 286.1),(76, 513.4),(82, 581.8),(103, 494.5),(107, 468.1),(125, 491.6),(101, 457.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(117, 517.2),(100, 517.2),(110, 517.2),(40, 517.2),(44, 517.2),(109, 517.2),(79, 517.2),(108, 517.2),(47, 517.2),(126, 517.2),(66, 517.2),(72, 517.2),(46, 517.2),(69, 517.2),(32, 517.2),(51, 517.2),(58, 517.2),(81, 517.2),(36, 517.2),(111, 517.2),(83, 517.2),(45, 517.2),(92, 517.2),(113, 517.2),(61, 517.2),(59, 517.2),(37, 517.2),(52, 517.2),(55, 517.2),(73, 517.2),(67, 517.2),(115, 517.2),(116, 517.2),(93, 517.2),(39, 517.2),(122, 517.2),(82, 517.2),(125, 517.2),(88, 517.2),(54, 517.2),(70, 517.2),(90, 517.2),(118, 517.2),(56, 517.2),(60, 517.2),(68, 517.2),(48, 517.2),(80, 517.2),(106, 517.2),(76, 517.2),(65, 517.2),(86, 517.2),(114, 517.2),(120, 517.2),(121, 517.2),(123, 517.2),(124, 517.2),(85, 517.2),(89, 517.2),(103, 517.2),(104, 517.2),(99, 517.2),(98, 517.2),(34, 517.2),(112, 517.2),(87, 517.2),(63, 517.2),(41, 517.2),(77, 517.2),(84, 517.2),(78, 517.2),(97, 517.2),(64, 517.2),(102, 517.2),(49, 517.2),(42, 517.2),(75, 517.2),(94, 517.2),(62, 517.2),(119, 517.2),(43, 517.2),(50, 517.2),(57, 517.2),(71, 517.2),(38, 517.2),(101, 517.2),(107, 517.2),(91, 517.2),(35, 517.2),(74, 517.2),(95, 517.2),(96, 517.2),(33, 517.2),(53, 517.2),(105, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_Bold: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(121, 560.0),(53, 597.7),(77, 854.9),(92, 313.8),(72, 719.0),(90, 622.9),(94, 719.8),(64, 859.1),(34, 447.6),(45, 356.5),(103, 614.9),(108, 294.5),(114, 423.7),(119, 793.6),(37, 860.7),(112, 614.9),(126, 719.8),(56, 597.7),(74, 319.6),(40, 392.6),(42, 449.2),(46, 326.3),(69, 586.8),(99, 509.2),(125, 611.6),(68, 713.1),(82, 661.5),(73, 319.6),(36, 597.7),(60, 719.8),(59, 343.5),(96, 429.5),(79, 730.3),(104, 611.6),(58, 343.5),(51, 597.7),(70, 586.8),(106, 294.5),(115, 511.3),(120, 554.1),(67, 630.5),(101, 582.6),(105, 294.5),(107, 571.3),(44, 326.3),(123, 611.6),(49, 597.7),(65, 664.8),(113, 614.9),(83, 618.7),(85, 697.6),(41, 392.6),(39, 263.0),(86, 664.8),(76, 547.4),(66, 654.8),(48, 597.7),(33, 391.8),(47, 313.8),(71, 705.1),(93, 392.6),(117, 611.6),(80, 629.6),(84, 586.0),(55, 597.7),(89, 622.1),(43, 719.8),(110, 611.6),(111, 590.2),(116, 410.7),(118, 560.0),(38, 749.2),(54, 597.7),(57, 597.7),(102, 373.7),(88, 662.3),(98, 614.9),(35, 719.8),(78, 719.0),(32, 299.1),(50, 597.7),(91, 392.6),(62, 719.8),(97, 579.7),(81, 730.3),(87, 947.6),(100, 614.9),(122, 500.0),(63, 498.3),(75, 665.7),(124, 313.8),(95, 429.5),(52, 597.7),(61, 719.8),(109, 895.1),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono_Bold: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(34, 517.2),(55, 517.2),(89, 517.2),(63, 517.2),(45, 517.2),(32, 517.2),(37, 517.2),(50, 517.2),(52, 517.2),(57, 517.2),(66, 517.2),(113, 517.2),(75, 517.2),(51, 517.2),(77, 517.2),(47, 517.2),(101, 517.2),(117, 517.2),(33, 517.2),(44, 517.2),(86, 517.2),(78, 517.2),(62, 517.2),(94, 517.2),(95, 517.2),(79, 517.2),(106, 517.2),(114, 517.2),(115, 517.2),(123, 517.2),(56, 517.2),(102, 517.2),(61, 517.2),(74, 517.2),(58, 517.2),(90, 517.2),(96, 517.2),(72, 517.2),(124, 517.2),(82, 517.2),(48, 517.2),(54, 517.2),(84, 517.2),(67, 517.2),(91, 517.2),(112, 517.2),(35, 517.2),(43, 517.2),(99, 517.2),(122, 517.2),(118, 517.2),(38, 517.2),(65, 517.2),(49, 517.2),(60, 517.2),(39, 517.2),(46, 517.2),(41, 517.2),(53, 517.2),(69, 517.2),(88, 517.2),(93, 517.2),(97, 517.2),(100, 517.2),(103, 517.2),(104, 517.2),(108, 517.2),(73, 517.2),(92, 517.2),(36, 517.2),(83, 517.2),(76, 517.2),(109, 517.2),(125, 517.2),(120, 517.2),(40, 517.2),(42, 517.2),(98, 517.2),(105, 517.2),(107, 517.2),(81, 517.2),(121, 517.2),(85, 517.2),(64, 517.2),(111, 517.2),(87, 517.2),(70, 517.2),(59, 517.2),(71, 517.2),(110, 517.2),(80, 517.2),(126, 517.2),(116, 517.2),(68, 517.2),(119, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono_Oblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "Oblique".to_string(),
        glyph_widths: vec![
(49, 517.2),(100, 517.2),(110, 517.2),(63, 517.2),(119, 517.2),(126, 517.2),(40, 517.2),(66, 517.2),(45, 517.2),(46, 517.2),(57, 517.2),(72, 517.2),(77, 517.2),(87, 517.2),(94, 517.2),(107, 517.2),(35, 517.2),(50, 517.2),(97, 517.2),(108, 517.2),(99, 517.2),(65, 517.2),(112, 517.2),(39, 517.2),(113, 517.2),(109, 517.2),(44, 517.2),(106, 517.2),(120, 517.2),(75, 517.2),(71, 517.2),(81, 517.2),(103, 517.2),(47, 517.2),(43, 517.2),(55, 517.2),(68, 517.2),(37, 517.2),(51, 517.2),(59, 517.2),(80, 517.2),(91, 517.2),(116, 517.2),(117, 517.2),(124, 517.2),(69, 517.2),(85, 517.2),(95, 517.2),(111, 517.2),(58, 517.2),(62, 517.2),(122, 517.2),(88, 517.2),(104, 517.2),(70, 517.2),(53, 517.2),(86, 517.2),(96, 517.2),(92, 517.2),(33, 517.2),(56, 517.2),(36, 517.2),(76, 517.2),(105, 517.2),(114, 517.2),(121, 517.2),(125, 517.2),(52, 517.2),(48, 517.2),(64, 517.2),(118, 517.2),(34, 517.2),(89, 517.2),(101, 517.2),(73, 517.2),(74, 517.2),(79, 517.2),(93, 517.2),(78, 517.2),(115, 517.2),(98, 517.2),(38, 517.2),(54, 517.2),(90, 517.2),(61, 517.2),(67, 517.2),(60, 517.2),(102, 517.2),(123, 517.2),(82, 517.2),(84, 517.2),(32, 517.2),(41, 517.2),(42, 517.2),(83, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_ExtraLight: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "ExtraLight".to_string(),
        glyph_widths: vec![
(53, 546.6),(98, 545.3),(122, 450.9),(44, 273.1),(47, 289.4),(48, 546.6),(70, 494.1),(52, 546.6),(123, 546.6),(97, 526.4),(64, 859.1),(91, 335.2),(83, 545.3),(87, 849.4),(121, 508.4),(69, 542.8),(108, 238.7),(106, 238.7),(51, 546.6),(55, 546.6),(35, 719.8),(33, 344.4),(58, 289.4),(40, 335.2),(73, 253.4),(77, 741.2),(80, 518.0),(95, 429.5),(60, 719.8),(93, 335.2),(94, 719.8),(101, 528.5),(50, 546.6),(68, 661.5),(88, 588.5),(39, 236.2),(71, 665.7),(37, 816.3),(43, 719.8),(46, 273.1),(96, 429.5),(99, 472.3),(111, 525.6),(112, 545.3),(119, 702.6),(118, 508.4),(126, 719.8),(45, 310.0),(100, 545.3),(56, 546.6),(115, 447.6),(110, 544.5),(32, 273.1),(82, 596.9),(114, 353.2),(117, 544.5),(63, 456.0),(66, 562.5),(79, 676.2),(120, 508.4),(90, 588.5),(109, 836.8),(92, 289.4),(59, 289.4),(62, 719.8),(72, 646.0),(78, 642.6),(105, 238.7),(85, 628.8),(49, 546.6),(54, 546.6),(42, 429.5),(81, 676.2),(125, 546.6),(74, 253.4),(84, 524.7),(89, 524.7),(86, 587.7),(107, 497.5),(116, 336.8),(124, 289.4),(104, 544.5),(38, 669.9),(75, 563.3),(65, 587.7),(36, 546.6),(102, 302.4),(103, 515.5),(76, 478.6),(113, 545.3),(41, 335.2),(61, 719.8),(57, 546.6),(67, 599.8),(34, 395.1),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif_Bold: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(121, 494.6),(98, 595.2),(67, 677.5),(113, 595.2),(43, 713.2),(53, 592.3),(72, 804.2),(106, 308.0),(110, 618.9),(68, 738.2),(109, 900.7),(36, 592.3),(50, 592.3),(54, 592.3),(112, 595.2),(41, 402.7),(95, 425.6),(40, 402.7),(90, 621.4),(45, 353.3),(104, 618.9),(33, 373.6),(60, 713.2),(55, 592.3),(62, 713.2),(38, 768.5),(73, 398.2),(81, 741.5),(85, 742.3),(108, 323.4),(92, 310.9),(120, 507.5),(124, 309.6),(88, 660.4),(122, 483.4),(65, 660.4),(37, 808.8),(42, 445.1),(58, 314.2),(87, 955.9),(57, 592.3),(64, 851.2),(80, 640.1),(59, 314.2),(97, 551.5),(56, 592.3),(63, 498.8),(74, 402.7),(35, 713.2),(78, 778.1),(77, 942.2),(86, 660.4),(82, 707.4),(46, 296.3),(119, 732.8),(76, 598.5),(32, 296.3),(39, 260.6),(116, 393.2),(47, 310.9),(71, 726.9),(93, 402.7),(107, 589.8),(70, 604.3),(117, 618.9),(48, 592.3),(105, 323.4),(89, 607.6),(94, 713.2),(44, 296.3),(123, 547.4),(79, 741.5),(126, 713.2),(34, 443.5),(111, 567.7),(115, 479.2),(118, 494.6),(75, 739.8),(66, 719.5),(84, 633.4),(52, 592.3),(100, 595.2),(101, 541.6),(69, 648.8),(103, 595.2),(49, 592.3),(96, 425.6),(102, 366.2),(51, 592.3),(114, 448.5),(61, 713.2),(125, 547.4),(83, 614.7),(99, 518.3),(91, 402.7),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif_Italic: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "Italic".to_string(),
        glyph_widths: vec![
(104, 553.3),(50, 546.6),(99, 481.1),(121, 485.3),(108, 274.7),(35, 719.8),(76, 570.5),(75, 641.8),(94, 719.8),(113, 549.9),(45, 290.3),(105, 274.7),(77, 879.6),(48, 546.6),(53, 546.6),(109, 814.6),(41, 335.2),(52, 546.6),(79, 704.3),(119, 735.3),(85, 724.0),(47, 289.4),(101, 508.4),(120, 484.5),(61, 719.8),(90, 596.9),(107, 520.6),(103, 549.9),(59, 289.4),(81, 704.3),(117, 553.3),(54, 546.6),(38, 764.7),(83, 588.5),(42, 429.5),(51, 546.6),(39, 236.2),(62, 719.8),(74, 344.4),(73, 339.3),(44, 273.1),(95, 429.5),(111, 517.2),(66, 631.3),(122, 452.6),(100, 549.9),(33, 345.2),(67, 657.3),(72, 749.2),(89, 567.1),(118, 485.3),(116, 345.2),(43, 719.8),(57, 546.6),(32, 273.1),(56, 546.6),(87, 883.0),(88, 611.6),(102, 318.0),(114, 410.7),(124, 289.4),(96, 429.5),(125, 546.6),(112, 549.9),(126, 719.8),(98, 549.9),(78, 751.7),(97, 512.2),(82, 646.8),(91, 335.2),(110, 553.3),(115, 440.9),(123, 546.6),(46, 273.1),(70, 596.1),(34, 395.1),(71, 686.2),(92, 289.4),(93, 335.2),(106, 266.4),(65, 620.4),(84, 573.0),(40, 335.2),(49, 546.6),(63, 460.6),(68, 688.8),(64, 859.1),(58, 289.4),(37, 816.3),(80, 578.0),(60, 719.8),(69, 627.1),(86, 620.4),(36, 546.6),(55, 546.6),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_Oblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "Oblique".to_string(),
        glyph_widths: vec![
(44, 273.1),(34, 395.1),(55, 546.6),(83, 545.3),(42, 429.5),(98, 545.3),(37, 816.3),(103, 545.3),(106, 238.7),(56, 546.6),(94, 719.8),(108, 238.7),(33, 344.4),(70, 494.1),(111, 525.6),(32, 273.1),(81, 676.2),(104, 544.5),(57, 546.6),(75, 563.3),(118, 508.4),(120, 508.4),(90, 588.5),(91, 335.2),(45, 310.0),(64, 859.1),(86, 587.7),(102, 302.4),(48, 546.6),(51, 546.6),(52, 546.6),(54, 546.6),(36, 546.6),(61, 719.8),(71, 665.7),(89, 524.7),(113, 545.3),(125, 546.6),(99, 472.3),(39, 236.2),(63, 456.0),(84, 524.7),(43, 719.8),(85, 628.8),(53, 546.6),(67, 599.8),(69, 542.8),(80, 518.0),(97, 526.4),(116, 336.8),(65, 587.7),(123, 546.6),(110, 544.5),(126, 719.8),(119, 702.6),(96, 429.5),(122, 450.9),(100, 545.3),(40, 335.2),(66, 589.3),(124, 289.4),(74, 253.4),(82, 596.9),(101, 528.5),(88, 588.5),(62, 719.8),(93, 335.2),(121, 508.4),(47, 289.4),(60, 719.8),(77, 741.2),(109, 836.8),(46, 273.1),(115, 447.6),(58, 289.4),(72, 646.0),(38, 669.9),(68, 661.5),(35, 719.8),(59, 289.4),(78, 642.6),(50, 546.6),(73, 253.4),(114, 353.2),(49, 546.6),(105, 238.7),(107, 497.5),(95, 429.5),(79, 676.2),(112, 545.3),(117, 544.5),(87, 849.4),(41, 335.2),(76, 478.6),(92, 289.4),].into_iter().collect(),
    };
}


lazy_static! {
    pub static ref FONT_METRICS: std::collections::HashMap<&'static str, &'static FontMetrics> = {
        let mut m = std::collections::HashMap::new();
        m.insert("AvantGarde-BookOblique", &*AvantGarde_BookOblique as &'static FontMetrics);
        m.insert("Bookman-Light", &*Bookman_Light as &'static FontMetrics);
        m.insert("Courier", &*Courier as &'static FontMetrics);
        m.insert("Times-BoldItalic", &*Times_BoldItalic as &'static FontMetrics);
        m.insert("AvantGarde-DemiOblique", &*AvantGarde_DemiOblique as &'static FontMetrics);
        m.insert("Palatino-Roman", &*Palatino_Roman as &'static FontMetrics);
        m.insert("ZapfChancery-MediumItalic", &*ZapfChancery_MediumItalic as &'static FontMetrics);
        m.insert("Helvetica-Narrow", &*Helvetica_Narrow as &'static FontMetrics);
        m.insert("AvantGarde-Book", &*AvantGarde_Book as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Bold", &*NewCenturySchlbk_Bold as &'static FontMetrics);
        m.insert("Helvetica-Bold", &*Helvetica_Bold as &'static FontMetrics);
        m.insert("Courier-BoldOblique", &*Courier_BoldOblique as &'static FontMetrics);
        m.insert("Palatino-Italic", &*Palatino_Italic as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Roman", &*NewCenturySchlbk_Roman as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Italic", &*NewCenturySchlbk_Italic as &'static FontMetrics);
        m.insert("Courier-Oblique", &*Courier_Oblique as &'static FontMetrics);
        m.insert("Bookman-LightItalic", &*Bookman_LightItalic as &'static FontMetrics);
        m.insert("Times-Italic", &*Times_Italic as &'static FontMetrics);
        m.insert("AvantGarde-Demi", &*AvantGarde_Demi as &'static FontMetrics);
        m.insert("Helvetica-Narrow-Oblique", &*Helvetica_Narrow_Oblique as &'static FontMetrics);
        m.insert("Helvetica-Narrow-BoldOblique", &*Helvetica_Narrow_BoldOblique as &'static FontMetrics);
        m.insert("Bookman-DemiItalic", &*Bookman_DemiItalic as &'static FontMetrics);
        m.insert("Palatino-Bold", &*Palatino_Bold as &'static FontMetrics);
        m.insert("ZapfDingbats", &*ZapfDingbats as &'static FontMetrics);
        m.insert("Bookman-Demi", &*Bookman_Demi as &'static FontMetrics);
        m.insert("Helvetica-Narrow-Bold", &*Helvetica_Narrow_Bold as &'static FontMetrics);
        m.insert("Palatino-BoldItalic", &*Palatino_BoldItalic as &'static FontMetrics);
        m.insert("Helvetica", &*Helvetica as &'static FontMetrics);
        m.insert("NewCenturySchlbk-BoldItalic", &*NewCenturySchlbk_BoldItalic as &'static FontMetrics);
        m.insert("Symbol", &*Symbol as &'static FontMetrics);
        m.insert("Times-Bold", &*Times_Bold as &'static FontMetrics);
        m.insert("Helvetica-Oblique", &*Helvetica_Oblique as &'static FontMetrics);
        m.insert("Helvetica-BoldOblique", &*Helvetica_BoldOblique as &'static FontMetrics);
        m.insert("Courier-Bold", &*Courier_Bold as &'static FontMetrics);
        m.insert("Times-Roman", &*Times_Roman as &'static FontMetrics);
        m.insert("DejaVuSansCondensed-BoldOblique", &*DejaVuSansCondensed_BoldOblique as &'static FontMetrics);
        m.insert("DejaVuMathTeXGyre", &*DejaVuMathTeXGyre as &'static FontMetrics);
        m.insert("DejaVuSansCondensed", &*DejaVuSansCondensed as &'static FontMetrics);
        m.insert("DejaVuSansCondensed-Bold", &*DejaVuSansCondensed_Bold as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed-Bold", &*DejaVuSerifCondensed_Bold as &'static FontMetrics);
        m.insert("DejaVuSerif-BoldItalic", &*DejaVuSerif_BoldItalic as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed-BoldItalic", &*DejaVuSerifCondensed_BoldItalic as &'static FontMetrics);
        m.insert("DejaVuSans-BoldOblique", &*DejaVuSans_BoldOblique as &'static FontMetrics);
        m.insert("DejaVuSans", &*DejaVuSans as &'static FontMetrics);
        m.insert("DejaVuSansCondensed-Oblique", &*DejaVuSansCondensed_Oblique as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed-Italic", &*DejaVuSerifCondensed_Italic as &'static FontMetrics);
        m.insert("DejaVuSansMono-BoldOblique", &*DejaVuSansMono_BoldOblique as &'static FontMetrics);
        m.insert("DejaVuSerif", &*DejaVuSerif as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed", &*DejaVuSerifCondensed as &'static FontMetrics);
        m.insert("DejaVuSansMono", &*DejaVuSansMono as &'static FontMetrics);
        m.insert("DejaVuSans-Bold", &*DejaVuSans_Bold as &'static FontMetrics);
        m.insert("DejaVuSansMono-Bold", &*DejaVuSansMono_Bold as &'static FontMetrics);
        m.insert("DejaVuSansMono-Oblique", &*DejaVuSansMono_Oblique as &'static FontMetrics);
        m.insert("DejaVuSans-ExtraLight", &*DejaVuSans_ExtraLight as &'static FontMetrics);
        m.insert("DejaVuSerif-Bold", &*DejaVuSerif_Bold as &'static FontMetrics);
        m.insert("DejaVuSerif-Italic", &*DejaVuSerif_Italic as &'static FontMetrics);
        m.insert("DejaVuSans-Oblique", &*DejaVuSans_Oblique as &'static FontMetrics);
        m
    };
}
