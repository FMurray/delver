// AUTO-GENERATED FILE - DO NOT EDIT
use super::FontMetrics;
use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
pub static ref AvantGarde_BookOblique: FontMetrics = FontMetrics {
ascent: 740.0,
descent: -192.0,
cap_height: 740.0,
x_height: 547.0,
italic_angle: -10.5,
bbox: (-113.0, -222.0, 1279.0, 955.0),
flags: 64,
font_family: "ITC".to_string(),
font_weight: "Book".to_string(),
glyph_widths: vec![
(51, 554.0),(75, 591.0),(48, 554.0),(55, 554.0),(54, 554.0),(116, 339.0),(119, 831.0),(199, 222.0),(166, 554.0),(39, 351.0),(186, 484.0),(61, 606.0),(41, 369.0),(107, 502.0),(173, 251.0),(200, 369.0),(120, 480.0),(49, 554.0),(56, 554.0),(93, 351.0),(125, 351.0),(184, 354.0),(97, 683.0),(50, 554.0),(81, 871.0),(168, 554.0),(177, 500.0),(124, 672.0),(92, 605.0),(188, 1000.0),(167, 615.0),(195, 502.0),(103, 673.0),(126, 606.0),(45, 332.0),(67, 813.0),(89, 592.0),(169, 198.0),(233, 868.0),(111, 655.0),(63, 591.0),(65, 740.0),(85, 655.0),(171, 425.0),(206, 302.0),(52, 554.0),(245, 200.0),(109, 938.0),(46, 277.0),(248, 300.0),(170, 502.0),(174, 487.0),(235, 369.0),(193, 378.0),(69, 536.0),(122, 425.0),(102, 314.0),(163, 554.0),(172, 251.0),(232, 517.0),(225, 992.0),(40, 369.0),(185, 502.0),(36, 554.0),(83, 498.0),(104, 610.0),(187, 425.0),(191, 591.0),(227, 369.0),(180, 277.0),(208, 1000.0),(198, 453.0),(34, 309.0),(234, 1194.0),(91, 351.0),(77, 919.0),(100, 685.0),(114, 301.0),(35, 554.0),(74, 482.0),(202, 332.0),(62, 606.0),(42, 425.0),(87, 960.0),(99, 647.0),(108, 200.0),(68, 744.0),(110, 610.0),(121, 536.0),(161, 295.0),(164, 166.0),(38, 757.0),(183, 606.0),(53, 554.0),(73, 226.0),(94, 606.0),(106, 203.0),(196, 439.0),(33, 295.0),(82, 607.0),(88, 609.0),(105, 200.0),(72, 683.0),(179, 553.0),(189, 1174.0),(32, 277.0),(241, 1157.0),(86, 702.0),(175, 485.0),(249, 653.0),(182, 564.0),(71, 872.0),(37, 775.0),(78, 740.0),(47, 437.0),(95, 500.0),(203, 324.0),(251, 554.0),(123, 351.0),(115, 388.0),(205, 552.0),(162, 554.0),(178, 553.0),(64, 867.0),(66, 574.0),(113, 682.0),(112, 682.0),(117, 608.0),(76, 462.0),(250, 1137.0),(57, 554.0),(207, 502.0),(96, 351.0),(165, 554.0),(80, 592.0),(70, 485.0),(43, 606.0),(79, 869.0),(90, 480.0),(60, 606.0),(84, 426.0),(197, 485.0),(44, 277.0),(194, 375.0),(59, 277.0),(58, 277.0),(98, 682.0),(101, 650.0),(118, 554.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Bookman_Light: FontMetrics = FontMetrics {
ascent: 717.0,
descent: -228.0,
cap_height: 681.0,
x_height: 484.0,
italic_angle: 0.0,
bbox: (-188.0, -251.0, 1266.0, 908.0),
flags: 0,
font_family: "ITC".to_string(),
font_weight: "Light".to_string(),
glyph_widths: vec![
(39, 220.0),(95, 500.0),(82, 720.0),(208, 1000.0),(92, 600.0),(103, 540.0),(74, 600.0),(57, 620.0),(119, 780.0),(186, 400.0),(114, 440.0),(69, 720.0),(86, 700.0),(97, 580.0),(67, 740.0),(245, 300.0),(61, 600.0),(235, 420.0),(46, 320.0),(121, 540.0),(241, 860.0),(200, 420.0),(78, 740.0),(35, 620.0),(198, 460.0),(51, 620.0),(93, 300.0),(191, 540.0),(234, 1240.0),(62, 600.0),(65, 680.0),(84, 620.0),(166, 620.0),(64, 820.0),(171, 360.0),(96, 220.0),(40, 300.0),(172, 240.0),(188, 1000.0),(52, 620.0),(165, 620.0),(179, 540.0),(249, 560.0),(123, 280.0),(101, 520.0),(174, 620.0),(45, 400.0),(32, 320.0),(37, 900.0),(202, 320.0),(94, 600.0),(250, 900.0),(199, 260.0),(194, 340.0),(170, 400.0),(87, 960.0),(124, 600.0),(185, 400.0),(104, 660.0),(197, 440.0),(53, 620.0),(232, 600.0),(70, 640.0),(173, 240.0),(54, 620.0),(187, 360.0),(42, 440.0),(105, 300.0),(227, 420.0),(164, 140.0),(50, 620.0),(91, 300.0),(122, 480.0),(80, 620.0),(75, 720.0),(60, 600.0),(56, 620.0),(102, 320.0),(98, 620.0),(47, 600.0),(175, 620.0),(233, 800.0),(72, 800.0),(89, 640.0),(110, 660.0),(33, 300.0),(49, 620.0),(168, 620.0),(68, 800.0),(120, 560.0),(183, 460.0),(248, 320.0),(196, 440.0),(58, 320.0),(41, 300.0),(167, 520.0),(109, 940.0),(36, 620.0),(55, 620.0),(111, 560.0),(71, 800.0),(118, 520.0),(177, 500.0),(180, 320.0),(189, 1280.0),(205, 380.0),(206, 320.0),(113, 580.0),(83, 660.0),(116, 380.0),(63, 540.0),(115, 520.0),(161, 300.0),(193, 340.0),(77, 920.0),(38, 800.0),(117, 680.0),(44, 320.0),(195, 420.0),(225, 1260.0),(34, 380.0),(81, 820.0),(76, 600.0),(126, 600.0),(207, 420.0),(169, 220.0),(106, 300.0),(251, 660.0),(99, 520.0),(108, 300.0),(162, 620.0),(73, 340.0),(90, 640.0),(100, 620.0),(85, 780.0),(59, 320.0),(48, 620.0),(88, 720.0),(182, 600.0),(66, 740.0),(184, 220.0),(125, 280.0),(79, 800.0),(112, 620.0),(178, 540.0),(203, 320.0),(163, 620.0),(107, 620.0),(43, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Courier: FontMetrics = FontMetrics {
ascent: 629.0,
descent: -157.0,
cap_height: 562.0,
x_height: 426.0,
italic_angle: 0.0,
bbox: (-23.0, -250.0, 715.0, 805.0),
flags: 1,
font_family: "Courier".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(235, 600.0),(65, 600.0),(170, 600.0),(95, 600.0),(161, 600.0),(35, 600.0),(52, 600.0),(121, 600.0),(163, 600.0),(42, 600.0),(118, 600.0),(48, 600.0),(75, 600.0),(194, 600.0),(90, 600.0),(55, 600.0),(80, 600.0),(96, 600.0),(110, 600.0),(175, 600.0),(234, 600.0),(104, 600.0),(70, 600.0),(87, 600.0),(38, 600.0),(94, 600.0),(191, 600.0),(171, 600.0),(40, 600.0),(177, 600.0),(66, 600.0),(53, 600.0),(92, 600.0),(200, 600.0),(33, 600.0),(202, 600.0),(64, 600.0),(68, 600.0),(172, 600.0),(114, 600.0),(107, 600.0),(45, 600.0),(86, 600.0),(108, 600.0),(57, 600.0),(69, 600.0),(63, 600.0),(162, 600.0),(250, 600.0),(84, 600.0),(109, 600.0),(46, 600.0),(47, 600.0),(103, 600.0),(43, 600.0),(249, 600.0),(198, 600.0),(183, 600.0),(85, 600.0),(50, 600.0),(106, 600.0),(123, 600.0),(124, 600.0),(167, 600.0),(245, 600.0),(208, 600.0),(58, 600.0),(71, 600.0),(205, 600.0),(36, 600.0),(178, 600.0),(44, 600.0),(72, 600.0),(119, 600.0),(196, 600.0),(166, 600.0),(251, 600.0),(189, 600.0),(180, 600.0),(89, 600.0),(113, 600.0),(56, 600.0),(248, 600.0),(115, 600.0),(54, 600.0),(98, 600.0),(37, 600.0),(100, 600.0),(169, 600.0),(187, 600.0),(117, 600.0),(233, 600.0),(93, 600.0),(111, 600.0),(91, 600.0),(116, 600.0),(186, 600.0),(61, 600.0),(207, 600.0),(185, 600.0),(77, 600.0),(97, 600.0),(165, 600.0),(102, 600.0),(112, 600.0),(34, 600.0),(174, 600.0),(60, 600.0),(126, 600.0),(184, 600.0),(164, 600.0),(82, 600.0),(79, 600.0),(188, 600.0),(73, 600.0),(193, 600.0),(120, 600.0),(101, 600.0),(41, 600.0),(199, 600.0),(241, 600.0),(197, 600.0),(203, 600.0),(105, 600.0),(32, 600.0),(173, 600.0),(76, 600.0),(225, 600.0),(232, 600.0),(182, 600.0),(122, 600.0),(83, 600.0),(62, 600.0),(78, 600.0),(179, 600.0),(88, 600.0),(74, 600.0),(125, 600.0),(51, 600.0),(99, 600.0),(168, 600.0),(206, 600.0),(39, 600.0),(67, 600.0),(227, 600.0),(81, 600.0),(59, 600.0),(195, 600.0),(49, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Times_BoldItalic: FontMetrics = FontMetrics {
ascent: 683.0,
descent: -217.0,
cap_height: 669.0,
x_height: 462.0,
italic_angle: -15.0,
bbox: (-200.0, -218.0, 996.0, 921.0),
flags: 64,
font_family: "Times".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(74, 500.0),(174, 556.0),(175, 556.0),(185, 500.0),(227, 266.0),(122, 389.0),(235, 300.0),(43, 570.0),(36, 500.0),(81, 722.0),(93, 333.0),(40, 333.0),(97, 500.0),(166, 500.0),(75, 667.0),(191, 500.0),(241, 722.0),(116, 278.0),(57, 500.0),(48, 500.0),(194, 333.0),(64, 832.0),(161, 389.0),(89, 611.0),(248, 278.0),(83, 556.0),(233, 722.0),(72, 778.0),(76, 611.0),(104, 556.0),(193, 333.0),(105, 278.0),(103, 500.0),(187, 500.0),(39, 333.0),(53, 500.0),(208, 1000.0),(171, 500.0),(34, 555.0),(51, 500.0),(44, 250.0),(47, 278.0),(120, 500.0),(177, 500.0),(54, 500.0),(250, 722.0),(251, 500.0),(124, 220.0),(184, 333.0),(77, 889.0),(94, 570.0),(249, 500.0),(71, 722.0),(100, 500.0),(173, 333.0),(178, 500.0),(189, 1000.0),(73, 389.0),(46, 250.0),(49, 500.0),(79, 722.0),(32, 250.0),(82, 667.0),(55, 500.0),(92, 278.0),(245, 278.0),(183, 350.0),(56, 500.0),(52, 500.0),(197, 333.0),(67, 667.0),(172, 333.0),(198, 333.0),(80, 611.0),(62, 570.0),(107, 500.0),(115, 389.0),(196, 333.0),(63, 500.0),(112, 500.0),(225, 944.0),(114, 389.0),(165, 500.0),(84, 611.0),(163, 500.0),(59, 333.0),(111, 500.0),(117, 556.0),(66, 667.0),(70, 667.0),(86, 667.0),(106, 278.0),(200, 333.0),(99, 444.0),(109, 778.0),(42, 500.0),(119, 667.0),(203, 333.0),(41, 333.0),(50, 500.0),(169, 278.0),(88, 667.0),(168, 500.0),(60, 570.0),(162, 500.0),(78, 722.0),(170, 500.0),(164, 167.0),(188, 1000.0),(234, 944.0),(90, 611.0),(232, 611.0),(179, 500.0),(87, 889.0),(207, 333.0),(38, 778.0),(65, 667.0),(68, 722.0),(113, 500.0),(121, 444.0),(33, 389.0),(123, 348.0),(167, 500.0),(180, 250.0),(186, 500.0),(101, 444.0),(108, 278.0),(195, 333.0),(96, 333.0),(58, 333.0),(205, 333.0),(206, 333.0),(91, 333.0),(118, 444.0),(61, 570.0),(37, 833.0),(126, 570.0),(85, 722.0),(199, 333.0),(202, 333.0),(35, 500.0),(98, 500.0),(95, 500.0),(102, 333.0),(182, 500.0),(45, 333.0),(110, 556.0),(125, 348.0),(69, 667.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref AvantGarde_DemiOblique: FontMetrics = FontMetrics {
ascent: 740.0,
descent: -192.0,
cap_height: 740.0,
x_height: 555.0,
italic_angle: -10.5,
bbox: (-123.0, -251.0, 1256.0, 1021.0),
flags: 64,
font_family: "ITC".to_string(),
font_weight: "Demi".to_string(),
glyph_widths: vec![
(112, 660.0),(233, 840.0),(36, 560.0),(80, 560.0),(81, 840.0),(73, 280.0),(109, 940.0),(76, 440.0),(38, 680.0),(161, 280.0),(227, 360.0),(34, 360.0),(184, 280.0),(116, 300.0),(83, 520.0),(185, 480.0),(225, 900.0),(180, 280.0),(174, 520.0),(82, 580.0),(64, 740.0),(103, 660.0),(66, 580.0),(57, 560.0),(193, 420.0),(41, 380.0),(54, 560.0),(46, 280.0),(120, 560.0),(125, 340.0),(95, 500.0),(178, 560.0),(92, 640.0),(245, 240.0),(49, 560.0),(105, 240.0),(119, 800.0),(203, 340.0),(74, 480.0),(93, 320.0),(90, 500.0),(55, 560.0),(32, 280.0),(98, 660.0),(114, 320.0),(107, 580.0),(186, 480.0),(187, 460.0),(79, 840.0),(205, 700.0),(241, 1080.0),(70, 480.0),(68, 700.0),(78, 740.0),(84, 420.0),(110, 600.0),(189, 1280.0),(117, 600.0),(206, 340.0),(250, 1080.0),(162, 560.0),(50, 560.0),(165, 560.0),(63, 560.0),(200, 500.0),(71, 840.0),(45, 420.0),(202, 360.0),(249, 660.0),(167, 560.0),(42, 440.0),(96, 280.0),(163, 560.0),(60, 600.0),(172, 240.0),(87, 900.0),(196, 480.0),(251, 600.0),(168, 560.0),(65, 740.0),(43, 600.0),(91, 320.0),(100, 660.0),(48, 560.0),(52, 560.0),(101, 640.0),(33, 280.0),(58, 280.0),(188, 1000.0),(62, 600.0),(44, 280.0),(88, 680.0),(169, 220.0),(86, 700.0),(194, 420.0),(207, 540.0),(183, 600.0),(248, 320.0),(85, 640.0),(182, 600.0),(177, 500.0),(67, 780.0),(89, 620.0),(106, 260.0),(118, 560.0),(108, 240.0),(124, 600.0),(123, 340.0),(104, 600.0),(179, 560.0),(232, 480.0),(53, 560.0),(197, 420.0),(47, 460.0),(72, 680.0),(170, 480.0),(195, 540.0),(122, 460.0),(175, 520.0),(59, 280.0),(94, 600.0),(198, 480.0),(113, 660.0),(61, 600.0),(208, 1000.0),(111, 640.0),(35, 560.0),(126, 600.0),(199, 280.0),(37, 860.0),(51, 560.0),(99, 640.0),(56, 560.0),(115, 440.0),(173, 240.0),(121, 580.0),(75, 620.0),(40, 380.0),(102, 280.0),(69, 520.0),(191, 560.0),(171, 460.0),(39, 280.0),(77, 900.0),(234, 1060.0),(235, 360.0),(166, 560.0),(97, 660.0),(164, 160.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Palatino_Roman: FontMetrics = FontMetrics {
ascent: 726.0,
descent: -281.0,
cap_height: 692.0,
x_height: 469.0,
italic_angle: 0.0,
bbox: (-166.0, -283.0, 1021.0, 927.0),
flags: 0,
font_family: "Palatino".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(245, 287.0),(165, 500.0),(174, 605.0),(48, 500.0),(92, 606.0),(95, 500.0),(162, 500.0),(99, 444.0),(72, 832.0),(61, 606.0),(45, 333.0),(47, 606.0),(101, 479.0),(197, 333.0),(97, 500.0),(108, 291.0),(194, 333.0),(193, 333.0),(234, 998.0),(70, 556.0),(182, 628.0),(60, 606.0),(249, 556.0),(250, 827.0),(67, 709.0),(64, 747.0),(55, 500.0),(100, 611.0),(98, 553.0),(251, 556.0),(32, 250.0),(51, 500.0),(84, 613.0),(122, 500.0),(164, 167.0),(111, 546.0),(167, 500.0),(227, 333.0),(203, 333.0),(44, 250.0),(189, 1144.0),(195, 333.0),(186, 500.0),(86, 722.0),(107, 556.0),(178, 500.0),(34, 371.0),(179, 500.0),(40, 333.0),(103, 556.0),(185, 500.0),(54, 500.0),(208, 1000.0),(205, 380.0),(241, 758.0),(109, 883.0),(169, 208.0),(113, 560.0),(115, 424.0),(232, 611.0),(117, 603.0),(58, 250.0),(172, 331.0),(59, 250.0),(49, 500.0),(123, 333.0),(68, 774.0),(74, 333.0),(41, 333.0),(202, 333.0),(77, 946.0),(166, 500.0),(96, 278.0),(126, 606.0),(56, 500.0),(125, 333.0),(171, 500.0),(199, 250.0),(79, 786.0),(207, 333.0),(188, 1000.0),(88, 667.0),(87, 1000.0),(124, 606.0),(225, 944.0),(43, 606.0),(76, 611.0),(121, 556.0),(161, 278.0),(177, 500.0),(75, 726.0),(119, 834.0),(196, 333.0),(90, 667.0),(248, 291.0),(81, 786.0),(57, 500.0),(106, 234.0),(183, 606.0),(73, 337.0),(191, 444.0),(69, 611.0),(168, 500.0),(36, 500.0),(187, 500.0),(89, 667.0),(63, 444.0),(114, 395.0),(180, 250.0),(38, 778.0),(175, 608.0),(82, 668.0),(118, 565.0),(42, 389.0),(200, 333.0),(105, 291.0),(52, 500.0),(66, 611.0),(83, 525.0),(78, 831.0),(50, 500.0),(94, 606.0),(235, 333.0),(37, 840.0),(46, 250.0),(102, 333.0),(112, 601.0),(33, 278.0),(62, 606.0),(163, 500.0),(198, 333.0),(116, 326.0),(85, 778.0),(120, 516.0),(110, 582.0),(206, 313.0),(184, 278.0),(104, 582.0),(173, 331.0),(39, 278.0),(233, 833.0),(170, 500.0),(93, 333.0),(35, 500.0),(80, 604.0),(91, 333.0),(71, 763.0),(65, 778.0),(53, 500.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref ZapfChancery_MediumItalic: FontMetrics = FontMetrics {
ascent: 714.0,
descent: -314.0,
cap_height: 708.0,
x_height: 438.0,
italic_angle: -14.0,
bbox: (-181.0, -314.0, 1065.0, 831.0),
flags: 64,
font_family: "ITC".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(72, 680.0),(179, 480.0),(50, 440.0),(199, 220.0),(97, 420.0),(34, 220.0),(91, 240.0),(46, 220.0),(58, 260.0),(251, 420.0),(86, 640.0),(52, 440.0),(193, 220.0),(234, 820.0),(43, 520.0),(167, 420.0),(108, 240.0),(65, 620.0),(114, 300.0),(105, 240.0),(85, 740.0),(115, 320.0),(33, 280.0),(121, 400.0),(161, 280.0),(225, 740.0),(245, 240.0),(120, 420.0),(77, 840.0),(100, 440.0),(92, 480.0),(107, 440.0),(74, 400.0),(73, 380.0),(61, 520.0),(189, 960.0),(42, 420.0),(35, 440.0),(44, 220.0),(59, 240.0),(206, 280.0),(51, 440.0),(64, 700.0),(39, 240.0),(84, 500.0),(123, 240.0),(166, 440.0),(194, 300.0),(78, 700.0),(79, 600.0),(48, 440.0),(62, 520.0),(96, 240.0),(165, 440.0),(180, 220.0),(175, 520.0),(184, 180.0),(76, 580.0),(177, 500.0),(196, 440.0),(68, 700.0),(172, 240.0),(60, 520.0),(235, 260.0),(163, 440.0),(250, 560.0),(45, 280.0),(174, 520.0),(191, 400.0),(241, 540.0),(227, 260.0),(40, 260.0),(41, 220.0),(233, 660.0),(110, 460.0),(109, 620.0),(70, 580.0),(87, 880.0),(102, 320.0),(119, 680.0),(169, 160.0),(182, 500.0),(117, 460.0),(57, 440.0),(113, 400.0),(202, 300.0),(183, 600.0),(164, 60.0),(249, 440.0),(69, 620.0),(66, 600.0),(124, 520.0),(103, 400.0),(55, 440.0),(195, 340.0),(98, 420.0),(93, 320.0),(200, 360.0),(89, 560.0),(168, 440.0),(122, 440.0),(83, 460.0),(116, 320.0),(118, 440.0),(49, 440.0),(170, 340.0),(88, 560.0),(197, 440.0),(112, 440.0),(104, 440.0),(248, 300.0),(205, 400.0),(63, 380.0),(95, 500.0),(90, 620.0),(75, 660.0),(47, 340.0),(81, 600.0),(171, 340.0),(203, 300.0),(32, 220.0),(185, 280.0),(207, 340.0),(82, 600.0),(162, 440.0),(71, 620.0),(188, 1000.0),(232, 580.0),(37, 680.0),(54, 440.0),(111, 400.0),(186, 360.0),(198, 440.0),(56, 440.0),(80, 540.0),(106, 220.0),(53, 440.0),(36, 440.0),(99, 340.0),(125, 240.0),(178, 460.0),(67, 520.0),(187, 380.0),(173, 260.0),(38, 780.0),(126, 520.0),(208, 1000.0),(101, 340.0),(94, 520.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_Narrow: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 523.0,
italic_angle: 0.0,
bbox: (-136.0, -225.0, 820.0, 931.0),
flags: 0,
font_family: "Helvetica".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(180, 228.0),(185, 273.0),(32, 228.0),(41, 273.0),(98, 456.0),(168, 456.0),(100, 456.0),(173, 273.0),(42, 319.0),(113, 456.0),(51, 456.0),(183, 287.0),(177, 456.0),(78, 592.0),(48, 456.0),(85, 592.0),(102, 228.0),(53, 456.0),(107, 410.0),(111, 456.0),(114, 273.0),(84, 501.0),(118, 410.0),(76, 456.0),(191, 501.0),(77, 683.0),(178, 456.0),(47, 228.0),(197, 273.0),(125, 274.0),(54, 456.0),(103, 456.0),(105, 182.0),(116, 228.0),(206, 273.0),(233, 638.0),(64, 832.0),(207, 273.0),(241, 729.0),(82, 592.0),(186, 273.0),(94, 385.0),(203, 273.0),(58, 228.0),(182, 440.0),(166, 456.0),(80, 547.0),(88, 547.0),(79, 638.0),(92, 228.0),(56, 456.0),(87, 774.0),(195, 273.0),(59, 228.0),(62, 479.0),(199, 273.0),(99, 410.0),(108, 182.0),(174, 410.0),(119, 592.0),(196, 273.0),(44, 228.0),(57, 456.0),(71, 638.0),(38, 547.0),(89, 547.0),(93, 228.0),(90, 501.0),(110, 456.0),(169, 157.0),(55, 456.0),(198, 273.0),(122, 410.0),(165, 456.0),(189, 820.0),(245, 228.0),(164, 137.0),(86, 547.0),(106, 182.0),(171, 456.0),(96, 182.0),(235, 299.0),(95, 456.0),(126, 479.0),(175, 410.0),(69, 547.0),(68, 592.0),(66, 547.0),(91, 228.0),(170, 273.0),(202, 273.0),(249, 501.0),(70, 501.0),(52, 456.0),(121, 410.0),(172, 273.0),(120, 410.0),(36, 456.0),(225, 820.0),(65, 547.0),(112, 456.0),(43, 479.0),(179, 456.0),(35, 456.0),(124, 213.0),(45, 273.0),(37, 729.0),(60, 479.0),(163, 456.0),(251, 501.0),(33, 228.0),(72, 592.0),(75, 547.0),(194, 273.0),(83, 547.0),(117, 456.0),(188, 820.0),(162, 456.0),(193, 273.0),(109, 683.0),(39, 182.0),(205, 273.0),(250, 774.0),(97, 456.0),(184, 182.0),(232, 456.0),(200, 273.0),(234, 820.0),(46, 228.0),(104, 456.0),(115, 410.0),(227, 303.0),(248, 182.0),(161, 273.0),(34, 291.0),(167, 456.0),(81, 638.0),(74, 410.0),(61, 479.0),(123, 274.0),(73, 228.0),(101, 456.0),(67, 592.0),(50, 456.0),(187, 456.0),(40, 273.0),(49, 456.0),(208, 820.0),(63, 456.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref AvantGarde_Book: FontMetrics = FontMetrics {
ascent: 740.0,
descent: -192.0,
cap_height: 740.0,
x_height: 547.0,
italic_angle: 0.0,
bbox: (-113.0, -222.0, 1148.0, 955.0),
flags: 0,
font_family: "ITC".to_string(),
font_weight: "Book".to_string(),
glyph_widths: vec![
(90, 480.0),(45, 332.0),(80, 592.0),(121, 536.0),(178, 553.0),(103, 673.0),(185, 502.0),(199, 222.0),(198, 453.0),(241, 1157.0),(37, 775.0),(33, 295.0),(164, 166.0),(66, 574.0),(46, 277.0),(41, 369.0),(108, 200.0),(34, 309.0),(65, 740.0),(193, 378.0),(251, 554.0),(70, 485.0),(114, 301.0),(117, 608.0),(54, 554.0),(124, 672.0),(191, 591.0),(68, 744.0),(171, 425.0),(96, 351.0),(166, 554.0),(234, 1194.0),(233, 868.0),(225, 992.0),(116, 339.0),(194, 375.0),(85, 655.0),(172, 251.0),(203, 324.0),(35, 554.0),(93, 351.0),(75, 591.0),(187, 425.0),(205, 552.0),(249, 653.0),(94, 606.0),(183, 606.0),(87, 960.0),(67, 813.0),(174, 487.0),(120, 480.0),(77, 919.0),(165, 554.0),(197, 485.0),(177, 500.0),(208, 1000.0),(115, 388.0),(74, 482.0),(59, 277.0),(47, 437.0),(73, 226.0),(48, 554.0),(71, 872.0),(63, 591.0),(110, 610.0),(170, 502.0),(97, 683.0),(60, 606.0),(53, 554.0),(88, 609.0),(109, 938.0),(38, 757.0),(44, 277.0),(86, 702.0),(122, 425.0),(36, 554.0),(42, 425.0),(57, 554.0),(125, 351.0),(111, 655.0),(52, 554.0),(168, 554.0),(186, 484.0),(50, 554.0),(51, 554.0),(105, 200.0),(189, 1174.0),(250, 1137.0),(235, 369.0),(182, 564.0),(98, 682.0),(81, 871.0),(248, 300.0),(84, 426.0),(82, 607.0),(106, 203.0),(207, 502.0),(56, 554.0),(58, 277.0),(112, 682.0),(161, 295.0),(163, 554.0),(107, 502.0),(175, 485.0),(195, 502.0),(188, 1000.0),(180, 277.0),(196, 439.0),(40, 369.0),(91, 351.0),(119, 831.0),(126, 606.0),(69, 536.0),(100, 685.0),(123, 351.0),(101, 650.0),(78, 740.0),(179, 553.0),(206, 302.0),(162, 554.0),(64, 867.0),(92, 605.0),(200, 369.0),(113, 682.0),(62, 606.0),(118, 554.0),(169, 198.0),(173, 251.0),(76, 462.0),(245, 200.0),(99, 647.0),(89, 592.0),(102, 314.0),(95, 500.0),(227, 369.0),(79, 869.0),(39, 351.0),(104, 610.0),(202, 332.0),(55, 554.0),(72, 683.0),(49, 554.0),(167, 615.0),(32, 277.0),(83, 498.0),(61, 606.0),(232, 517.0),(43, 606.0),(184, 354.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref NewCenturySchlbk_Bold: FontMetrics = FontMetrics {
ascent: 737.0,
descent: -205.0,
cap_height: 722.0,
x_height: 475.0,
italic_angle: 0.0,
bbox: (-165.0, -250.0, 1000.0, 988.0),
flags: 0,
font_family: "New".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(90, 667.0),(234, 1000.0),(169, 241.0),(171, 500.0),(66, 778.0),(39, 241.0),(99, 556.0),(186, 481.0),(81, 833.0),(167, 500.0),(168, 574.0),(198, 333.0),(165, 574.0),(107, 667.0),(233, 833.0),(73, 444.0),(76, 722.0),(206, 333.0),(245, 370.0),(55, 574.0),(60, 606.0),(194, 333.0),(32, 287.0),(98, 648.0),(85, 833.0),(70, 722.0),(109, 963.0),(119, 889.0),(199, 333.0),(93, 389.0),(67, 778.0),(53, 574.0),(71, 833.0),(183, 606.0),(248, 352.0),(101, 574.0),(51, 574.0),(227, 367.0),(54, 574.0),(91, 389.0),(92, 606.0),(193, 333.0),(79, 833.0),(75, 815.0),(59, 278.0),(49, 574.0),(56, 574.0),(62, 606.0),(100, 667.0),(106, 352.0),(108, 352.0),(110, 685.0),(112, 667.0),(162, 574.0),(251, 611.0),(170, 481.0),(188, 1000.0),(63, 500.0),(69, 759.0),(121, 611.0),(113, 648.0),(118, 611.0),(52, 574.0),(182, 747.0),(166, 574.0),(126, 606.0),(120, 611.0),(197, 333.0),(173, 333.0),(249, 611.0),(200, 333.0),(123, 389.0),(177, 500.0),(84, 722.0),(184, 241.0),(89, 722.0),(68, 833.0),(163, 574.0),(103, 611.0),(175, 685.0),(172, 333.0),(46, 278.0),(208, 1000.0),(250, 907.0),(65, 759.0),(36, 574.0),(202, 333.0),(45, 333.0),(180, 278.0),(64, 747.0),(57, 574.0),(191, 500.0),(42, 500.0),(97, 611.0),(225, 981.0),(111, 611.0),(195, 333.0),(235, 367.0),(77, 981.0),(88, 722.0),(205, 333.0),(207, 333.0),(50, 574.0),(104, 685.0),(124, 606.0),(122, 537.0),(80, 759.0),(187, 500.0),(83, 667.0),(78, 833.0),(86, 759.0),(38, 852.0),(72, 870.0),(95, 500.0),(34, 333.0),(116, 426.0),(174, 685.0),(41, 389.0),(114, 519.0),(232, 722.0),(82, 815.0),(102, 389.0),(161, 296.0),(96, 241.0),(203, 333.0),(105, 370.0),(40, 389.0),(94, 606.0),(115, 500.0),(164, 167.0),(33, 296.0),(125, 389.0),(35, 574.0),(61, 606.0),(185, 481.0),(178, 500.0),(196, 333.0),(48, 574.0),(58, 278.0),(179, 500.0),(44, 278.0),(87, 981.0),(37, 833.0),(189, 1000.0),(74, 648.0),(43, 606.0),(241, 870.0),(47, 278.0),(117, 685.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_Bold: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 532.0,
italic_angle: 0.0,
bbox: (-170.0, -228.0, 1003.0, 962.0),
flags: 0,
font_family: "Helvetica".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(67, 722.0),(125, 389.0),(206, 333.0),(52, 556.0),(114, 389.0),(163, 556.0),(42, 389.0),(91, 333.0),(187, 556.0),(105, 278.0),(102, 333.0),(106, 278.0),(76, 611.0),(193, 333.0),(208, 1000.0),(104, 611.0),(122, 500.0),(47, 278.0),(199, 333.0),(94, 584.0),(111, 611.0),(205, 333.0),(200, 333.0),(170, 500.0),(172, 333.0),(64, 975.0),(179, 556.0),(97, 556.0),(171, 556.0),(82, 722.0),(184, 278.0),(83, 667.0),(182, 556.0),(61, 584.0),(60, 584.0),(77, 833.0),(99, 556.0),(118, 556.0),(72, 722.0),(86, 667.0),(198, 333.0),(232, 611.0),(112, 611.0),(245, 278.0),(177, 556.0),(180, 278.0),(68, 722.0),(51, 556.0),(59, 333.0),(73, 278.0),(35, 556.0),(75, 722.0),(203, 333.0),(80, 667.0),(167, 556.0),(34, 474.0),(96, 278.0),(57, 556.0),(62, 584.0),(124, 280.0),(37, 889.0),(202, 333.0),(227, 370.0),(191, 611.0),(63, 611.0),(48, 556.0),(88, 667.0),(44, 278.0),(174, 611.0),(123, 389.0),(115, 556.0),(110, 611.0),(101, 556.0),(98, 611.0),(175, 611.0),(121, 556.0),(168, 556.0),(45, 333.0),(49, 556.0),(103, 611.0),(113, 611.0),(41, 333.0),(120, 556.0),(95, 556.0),(109, 889.0),(185, 500.0),(249, 611.0),(164, 167.0),(33, 333.0),(70, 611.0),(53, 556.0),(78, 722.0),(166, 556.0),(250, 944.0),(38, 722.0),(66, 722.0),(100, 611.0),(117, 611.0),(93, 333.0),(50, 556.0),(46, 278.0),(65, 722.0),(90, 611.0),(162, 556.0),(189, 1000.0),(235, 365.0),(69, 667.0),(92, 278.0),(43, 584.0),(40, 333.0),(248, 278.0),(108, 278.0),(251, 611.0),(188, 1000.0),(119, 778.0),(56, 556.0),(71, 778.0),(169, 238.0),(178, 556.0),(196, 333.0),(126, 584.0),(107, 556.0),(54, 556.0),(58, 333.0),(79, 778.0),(194, 333.0),(74, 556.0),(87, 944.0),(55, 556.0),(36, 556.0),(161, 333.0),(197, 333.0),(233, 778.0),(116, 333.0),(39, 278.0),(89, 667.0),(207, 333.0),(84, 611.0),(32, 278.0),(81, 778.0),(173, 333.0),(195, 333.0),(165, 556.0),(225, 1000.0),(241, 889.0),(234, 1000.0),(183, 350.0),(85, 722.0),(186, 500.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Courier_BoldOblique: FontMetrics = FontMetrics {
ascent: 629.0,
descent: -157.0,
cap_height: 562.0,
x_height: 439.0,
italic_angle: -12.0,
bbox: (-57.0, -250.0, 869.0, 801.0),
flags: 65,
font_family: "Courier".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(104, 600.0),(193, 600.0),(100, 600.0),(207, 600.0),(42, 600.0),(70, 600.0),(163, 600.0),(115, 600.0),(36, 600.0),(85, 600.0),(105, 600.0),(92, 600.0),(161, 600.0),(35, 600.0),(71, 600.0),(187, 600.0),(191, 600.0),(101, 600.0),(47, 600.0),(124, 600.0),(198, 600.0),(162, 600.0),(90, 600.0),(81, 600.0),(53, 600.0),(89, 600.0),(59, 600.0),(55, 600.0),(87, 600.0),(113, 600.0),(119, 600.0),(164, 600.0),(73, 600.0),(118, 600.0),(69, 600.0),(174, 600.0),(60, 600.0),(114, 600.0),(189, 600.0),(94, 600.0),(61, 600.0),(99, 600.0),(116, 600.0),(123, 600.0),(84, 600.0),(38, 600.0),(168, 600.0),(206, 600.0),(248, 600.0),(33, 600.0),(194, 600.0),(77, 600.0),(51, 600.0),(110, 600.0),(54, 600.0),(171, 600.0),(179, 600.0),(183, 600.0),(97, 600.0),(67, 600.0),(125, 600.0),(78, 600.0),(96, 600.0),(180, 600.0),(93, 600.0),(170, 600.0),(196, 600.0),(79, 600.0),(200, 600.0),(249, 600.0),(88, 600.0),(233, 600.0),(109, 600.0),(227, 600.0),(108, 600.0),(232, 600.0),(250, 600.0),(66, 600.0),(68, 600.0),(107, 600.0),(40, 600.0),(205, 600.0),(86, 600.0),(117, 600.0),(121, 600.0),(120, 600.0),(46, 600.0),(91, 600.0),(165, 600.0),(167, 600.0),(177, 600.0),(72, 600.0),(197, 600.0),(74, 600.0),(62, 600.0),(56, 600.0),(75, 600.0),(251, 600.0),(199, 600.0),(102, 600.0),(45, 600.0),(76, 600.0),(126, 600.0),(195, 600.0),(39, 600.0),(82, 600.0),(43, 600.0),(80, 600.0),(65, 600.0),(49, 600.0),(41, 600.0),(63, 600.0),(37, 600.0),(44, 600.0),(184, 600.0),(185, 600.0),(95, 600.0),(166, 600.0),(182, 600.0),(172, 600.0),(225, 600.0),(32, 600.0),(52, 600.0),(50, 600.0),(178, 600.0),(203, 600.0),(234, 600.0),(83, 600.0),(245, 600.0),(64, 600.0),(48, 600.0),(58, 600.0),(186, 600.0),(241, 600.0),(98, 600.0),(103, 600.0),(208, 600.0),(173, 600.0),(122, 600.0),(169, 600.0),(34, 600.0),(175, 600.0),(202, 600.0),(57, 600.0),(106, 600.0),(112, 600.0),(235, 600.0),(111, 600.0),(188, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Palatino_Italic: FontMetrics = FontMetrics {
ascent: 726.0,
descent: -281.0,
cap_height: 692.0,
x_height: 482.0,
italic_angle: -10.0,
bbox: (-170.0, -276.0, 1010.0, 918.0),
flags: 64,
font_family: "Palatino".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(168, 500.0),(182, 500.0),(83, 556.0),(114, 389.0),(97, 444.0),(118, 500.0),(61, 606.0),(194, 333.0),(92, 606.0),(80, 611.0),(203, 333.0),(88, 722.0),(74, 333.0),(73, 333.0),(100, 500.0),(90, 667.0),(101, 389.0),(205, 333.0),(86, 722.0),(68, 778.0),(196, 333.0),(225, 941.0),(175, 545.0),(112, 500.0),(122, 444.0),(178, 500.0),(227, 333.0),(185, 500.0),(191, 500.0),(207, 333.0),(103, 500.0),(206, 333.0),(166, 500.0),(65, 722.0),(41, 333.0),(56, 500.0),(98, 463.0),(69, 611.0),(108, 278.0),(116, 333.0),(197, 333.0),(113, 463.0),(70, 556.0),(234, 1028.0),(245, 278.0),(200, 333.0),(85, 778.0),(94, 606.0),(124, 606.0),(43, 606.0),(187, 500.0),(121, 500.0),(62, 606.0),(186, 500.0),(249, 444.0),(60, 606.0),(119, 722.0),(170, 500.0),(59, 250.0),(165, 500.0),(167, 500.0),(72, 778.0),(77, 944.0),(89, 667.0),(96, 278.0),(40, 333.0),(110, 556.0),(93, 333.0),(169, 333.0),(174, 528.0),(42, 389.0),(38, 778.0),(115, 389.0),(48, 500.0),(164, 167.0),(250, 669.0),(107, 444.0),(183, 500.0),(161, 333.0),(51, 500.0),(46, 250.0),(58, 250.0),(193, 333.0),(84, 611.0),(64, 747.0),(76, 556.0),(32, 250.0),(87, 944.0),(123, 333.0),(34, 500.0),(33, 333.0),(36, 500.0),(117, 556.0),(199, 333.0),(202, 333.0),(232, 556.0),(189, 1000.0),(111, 444.0),(99, 407.0),(79, 778.0),(163, 500.0),(208, 1000.0),(162, 500.0),(95, 500.0),(104, 500.0),(67, 667.0),(66, 611.0),(248, 278.0),(251, 500.0),(184, 278.0),(188, 1000.0),(44, 250.0),(78, 778.0),(81, 778.0),(235, 333.0),(54, 500.0),(105, 278.0),(171, 500.0),(233, 778.0),(172, 333.0),(120, 500.0),(102, 278.0),(126, 606.0),(195, 333.0),(125, 333.0),(35, 500.0),(173, 333.0),(63, 500.0),(52, 500.0),(53, 500.0),(57, 500.0),(71, 722.0),(50, 500.0),(177, 500.0),(179, 500.0),(180, 250.0),(106, 278.0),(109, 778.0),(47, 296.0),(82, 667.0),(241, 638.0),(198, 333.0),(91, 333.0),(75, 667.0),(55, 500.0),(37, 889.0),(39, 278.0),(45, 333.0),(49, 500.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref NewCenturySchlbk_Roman: FontMetrics = FontMetrics {
ascent: 737.0,
descent: -205.0,
cap_height: 722.0,
x_height: 464.0,
italic_angle: 0.0,
bbox: (-195.0, -250.0, 1000.0, 965.0),
flags: 0,
font_family: "New".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(98, 556.0),(36, 556.0),(94, 606.0),(106, 296.0),(107, 593.0),(248, 315.0),(161, 296.0),(71, 778.0),(121, 537.0),(172, 259.0),(196, 333.0),(42, 500.0),(76, 667.0),(33, 296.0),(162, 556.0),(108, 315.0),(85, 815.0),(68, 778.0),(111, 500.0),(110, 611.0),(173, 259.0),(225, 1000.0),(182, 606.0),(70, 667.0),(115, 463.0),(39, 204.0),(65, 722.0),(241, 796.0),(60, 606.0),(175, 611.0),(174, 611.0),(183, 606.0),(88, 704.0),(40, 333.0),(126, 606.0),(202, 333.0),(75, 778.0),(66, 722.0),(102, 333.0),(166, 556.0),(34, 389.0),(91, 333.0),(119, 778.0),(184, 204.0),(198, 333.0),(93, 333.0),(232, 667.0),(84, 667.0),(45, 333.0),(199, 333.0),(97, 556.0),(109, 889.0),(105, 315.0),(178, 500.0),(205, 333.0),(251, 574.0),(123, 333.0),(73, 407.0),(177, 556.0),(62, 606.0),(200, 333.0),(52, 556.0),(89, 704.0),(74, 556.0),(189, 1000.0),(249, 500.0),(58, 278.0),(72, 833.0),(180, 278.0),(86, 722.0),(43, 606.0),(185, 389.0),(82, 722.0),(124, 606.0),(67, 722.0),(51, 556.0),(63, 444.0),(56, 556.0),(80, 667.0),(92, 606.0),(99, 444.0),(32, 278.0),(57, 556.0),(50, 556.0),(54, 556.0),(114, 444.0),(101, 500.0),(164, 167.0),(169, 204.0),(168, 556.0),(195, 333.0),(53, 556.0),(233, 778.0),(112, 574.0),(87, 981.0),(227, 334.0),(55, 556.0),(245, 315.0),(64, 737.0),(61, 606.0),(194, 333.0),(77, 944.0),(100, 574.0),(46, 278.0),(193, 333.0),(79, 778.0),(117, 611.0),(234, 1000.0),(206, 333.0),(78, 815.0),(125, 333.0),(48, 556.0),(83, 630.0),(163, 556.0),(170, 389.0),(96, 204.0),(44, 278.0),(35, 556.0),(116, 389.0),(69, 722.0),(37, 833.0),(187, 426.0),(59, 278.0),(41, 333.0),(47, 278.0),(188, 1000.0),(207, 333.0),(250, 833.0),(235, 300.0),(118, 537.0),(104, 611.0),(197, 333.0),(208, 1000.0),(122, 481.0),(95, 500.0),(113, 556.0),(203, 333.0),(90, 611.0),(81, 778.0),(167, 500.0),(186, 389.0),(49, 556.0),(165, 556.0),(191, 444.0),(103, 537.0),(120, 537.0),(179, 500.0),(171, 426.0),(38, 815.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref NewCenturySchlbk_Italic: FontMetrics = FontMetrics {
ascent: 737.0,
descent: -205.0,
cap_height: 722.0,
x_height: 466.0,
italic_angle: -16.0,
bbox: (-166.0, -250.0, 994.0, 958.0),
flags: 64,
font_family: "New".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(38, 852.0),(245, 333.0),(191, 444.0),(102, 333.0),(172, 333.0),(249, 500.0),(115, 444.0),(46, 278.0),(104, 611.0),(193, 333.0),(33, 333.0),(97, 574.0),(183, 606.0),(84, 685.0),(198, 333.0),(174, 611.0),(64, 747.0),(88, 704.0),(48, 556.0),(78, 815.0),(116, 352.0),(164, 167.0),(122, 463.0),(106, 315.0),(203, 333.0),(39, 204.0),(83, 667.0),(71, 778.0),(98, 556.0),(177, 500.0),(73, 407.0),(200, 333.0),(248, 333.0),(234, 981.0),(111, 500.0),(49, 556.0),(95, 500.0),(109, 889.0),(161, 333.0),(205, 333.0),(65, 704.0),(34, 400.0),(67, 722.0),(126, 606.0),(58, 278.0),(56, 556.0),(61, 606.0),(92, 606.0),(77, 944.0),(113, 556.0),(89, 685.0),(189, 1000.0),(171, 426.0),(233, 778.0),(208, 1000.0),(87, 926.0),(120, 500.0),(207, 333.0),(195, 333.0),(101, 444.0),(63, 444.0),(173, 333.0),(178, 500.0),(165, 556.0),(44, 278.0),(45, 333.0),(81, 778.0),(110, 611.0),(93, 333.0),(225, 870.0),(72, 833.0),(251, 556.0),(103, 537.0),(60, 606.0),(124, 606.0),(68, 778.0),(59, 278.0),(184, 204.0),(62, 606.0),(86, 704.0),(175, 611.0),(163, 556.0),(79, 778.0),(100, 611.0),(108, 333.0),(35, 556.0),(90, 667.0),(118, 519.0),(241, 722.0),(185, 389.0),(51, 556.0),(180, 278.0),(197, 333.0),(186, 389.0),(169, 278.0),(50, 556.0),(42, 500.0),(54, 556.0),(232, 667.0),(170, 389.0),(85, 815.0),(117, 611.0),(55, 556.0),(75, 741.0),(99, 444.0),(167, 500.0),(76, 667.0),(202, 333.0),(227, 422.0),(40, 333.0),(235, 372.0),(250, 778.0),(69, 722.0),(168, 556.0),(52, 556.0),(105, 333.0),(112, 574.0),(47, 606.0),(206, 333.0),(37, 833.0),(53, 556.0),(187, 426.0),(32, 278.0),(121, 500.0),(43, 606.0),(66, 722.0),(166, 556.0),(80, 667.0),(199, 333.0),(107, 556.0),(36, 556.0),(41, 333.0),(123, 333.0),(70, 667.0),(74, 611.0),(162, 556.0),(94, 606.0),(196, 333.0),(119, 778.0),(91, 333.0),(182, 650.0),(125, 333.0),(57, 556.0),(96, 204.0),(82, 741.0),(179, 500.0),(114, 444.0),(188, 1000.0),(194, 333.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Courier_Oblique: FontMetrics = FontMetrics {
ascent: 629.0,
descent: -157.0,
cap_height: 562.0,
x_height: 426.0,
italic_angle: -12.0,
bbox: (-27.0, -250.0, 849.0, 805.0),
flags: 65,
font_family: "Courier".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(182, 600.0),(35, 600.0),(250, 600.0),(119, 600.0),(50, 600.0),(125, 600.0),(65, 600.0),(90, 600.0),(179, 600.0),(68, 600.0),(32, 600.0),(48, 600.0),(43, 600.0),(186, 600.0),(202, 600.0),(126, 600.0),(173, 600.0),(49, 600.0),(200, 600.0),(67, 600.0),(96, 600.0),(241, 600.0),(80, 600.0),(183, 600.0),(234, 600.0),(87, 600.0),(69, 600.0),(165, 600.0),(59, 600.0),(171, 600.0),(72, 600.0),(84, 600.0),(116, 600.0),(161, 600.0),(205, 600.0),(105, 600.0),(91, 600.0),(184, 600.0),(251, 600.0),(110, 600.0),(104, 600.0),(113, 600.0),(62, 600.0),(55, 600.0),(189, 600.0),(118, 600.0),(98, 600.0),(58, 600.0),(79, 600.0),(180, 600.0),(60, 600.0),(63, 600.0),(33, 600.0),(168, 600.0),(120, 600.0),(188, 600.0),(191, 600.0),(53, 600.0),(64, 600.0),(108, 600.0),(61, 600.0),(122, 600.0),(196, 600.0),(100, 600.0),(124, 600.0),(40, 600.0),(107, 600.0),(41, 600.0),(44, 600.0),(187, 600.0),(172, 600.0),(71, 600.0),(167, 600.0),(207, 600.0),(106, 600.0),(197, 600.0),(81, 600.0),(45, 600.0),(123, 600.0),(38, 600.0),(51, 600.0),(52, 600.0),(97, 600.0),(163, 600.0),(169, 600.0),(95, 600.0),(77, 600.0),(102, 600.0),(175, 600.0),(206, 600.0),(245, 600.0),(57, 600.0),(42, 600.0),(70, 600.0),(76, 600.0),(112, 600.0),(194, 600.0),(92, 600.0),(185, 600.0),(101, 600.0),(115, 600.0),(85, 600.0),(121, 600.0),(75, 600.0),(195, 600.0),(66, 600.0),(89, 600.0),(162, 600.0),(74, 600.0),(170, 600.0),(111, 600.0),(78, 600.0),(82, 600.0),(235, 600.0),(248, 600.0),(56, 600.0),(73, 600.0),(177, 600.0),(203, 600.0),(174, 600.0),(37, 600.0),(83, 600.0),(88, 600.0),(114, 600.0),(99, 600.0),(36, 600.0),(94, 600.0),(166, 600.0),(198, 600.0),(34, 600.0),(225, 600.0),(46, 600.0),(227, 600.0),(164, 600.0),(103, 600.0),(199, 600.0),(232, 600.0),(117, 600.0),(208, 600.0),(47, 600.0),(249, 600.0),(93, 600.0),(109, 600.0),(178, 600.0),(233, 600.0),(39, 600.0),(193, 600.0),(54, 600.0),(86, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Bookman_LightItalic: FontMetrics = FontMetrics {
ascent: 717.0,
descent: -228.0,
cap_height: 681.0,
x_height: 494.0,
italic_angle: -10.0,
bbox: (-228.0, -250.0, 1269.0, 883.0),
flags: 64,
font_family: "ITC".to_string(),
font_weight: "Light".to_string(),
glyph_widths: vec![
(48, 620.0),(182, 620.0),(206, 260.0),(33, 320.0),(195, 440.0),(101, 540.0),(124, 600.0),(112, 600.0),(79, 760.0),(100, 640.0),(49, 620.0),(200, 420.0),(93, 260.0),(114, 400.0),(123, 360.0),(76, 580.0),(188, 1000.0),(173, 180.0),(53, 620.0),(39, 280.0),(35, 620.0),(183, 460.0),(68, 740.0),(241, 880.0),(86, 680.0),(78, 720.0),(233, 760.0),(248, 340.0),(47, 600.0),(43, 600.0),(74, 560.0),(207, 440.0),(84, 600.0),(66, 720.0),(73, 320.0),(180, 300.0),(87, 960.0),(118, 540.0),(55, 620.0),(40, 280.0),(54, 620.0),(94, 600.0),(96, 280.0),(191, 540.0),(232, 580.0),(77, 860.0),(51, 620.0),(85, 720.0),(251, 620.0),(50, 620.0),(164, 20.0),(121, 600.0),(64, 780.0),(83, 640.0),(108, 280.0),(184, 320.0),(177, 500.0),(197, 440.0),(122, 520.0),(70, 620.0),(168, 620.0),(227, 440.0),(234, 1180.0),(186, 440.0),(82, 700.0),(97, 620.0),(72, 800.0),(196, 440.0),(202, 300.0),(105, 280.0),(88, 700.0),(161, 320.0),(71, 760.0),(163, 620.0),(58, 300.0),(198, 440.0),(171, 300.0),(167, 620.0),(203, 320.0),(169, 200.0),(52, 620.0),(162, 620.0),(109, 880.0),(113, 560.0),(125, 380.0),(90, 580.0),(189, 1180.0),(194, 320.0),(205, 340.0),(65, 700.0),(111, 540.0),(104, 620.0),(44, 300.0),(36, 620.0),(179, 620.0),(99, 480.0),(199, 260.0),(174, 640.0),(249, 540.0),(225, 1220.0),(250, 900.0),(103, 560.0),(59, 300.0),(116, 340.0),(42, 440.0),(185, 480.0),(80, 600.0),(98, 600.0),(46, 300.0),(62, 600.0),(41, 280.0),(81, 780.0),(106, 280.0),(60, 600.0),(126, 600.0),(178, 620.0),(208, 1000.0),(166, 620.0),(45, 320.0),(91, 260.0),(37, 800.0),(187, 300.0),(56, 620.0),(57, 620.0),(235, 400.0),(170, 440.0),(102, 340.0),(67, 720.0),(172, 180.0),(175, 660.0),(117, 620.0),(110, 620.0),(245, 280.0),(69, 680.0),(119, 880.0),(63, 540.0),(120, 540.0),(193, 340.0),(34, 360.0),(75, 720.0),(89, 660.0),(95, 500.0),(32, 300.0),(107, 600.0),(165, 620.0),(61, 600.0),(38, 820.0),(115, 540.0),(92, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Times_Italic: FontMetrics = FontMetrics {
ascent: 683.0,
descent: -217.0,
cap_height: 653.0,
x_height: 441.0,
italic_angle: -15.5,
bbox: (-169.0, -217.0, 1010.0, 883.0),
flags: 64,
font_family: "Times".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(113, 500.0),(205, 333.0),(249, 500.0),(62, 675.0),(167, 500.0),(122, 389.0),(227, 276.0),(36, 500.0),(44, 250.0),(241, 667.0),(189, 1000.0),(96, 333.0),(41, 333.0),(188, 889.0),(103, 500.0),(166, 500.0),(197, 333.0),(245, 278.0),(45, 333.0),(206, 333.0),(38, 778.0),(65, 611.0),(68, 722.0),(115, 389.0),(90, 556.0),(125, 400.0),(173, 333.0),(98, 500.0),(72, 722.0),(163, 500.0),(126, 541.0),(203, 333.0),(40, 333.0),(101, 444.0),(164, 167.0),(60, 675.0),(50, 500.0),(37, 833.0),(198, 333.0),(95, 500.0),(208, 889.0),(48, 500.0),(53, 500.0),(61, 675.0),(82, 611.0),(161, 389.0),(43, 675.0),(64, 920.0),(91, 389.0),(172, 333.0),(182, 523.0),(35, 500.0),(202, 333.0),(54, 500.0),(81, 722.0),(225, 889.0),(86, 611.0),(168, 500.0),(99, 444.0),(58, 333.0),(109, 722.0),(195, 333.0),(248, 278.0),(108, 278.0),(66, 611.0),(110, 500.0),(84, 556.0),(200, 333.0),(49, 500.0),(80, 611.0),(52, 500.0),(120, 444.0),(175, 500.0),(63, 500.0),(179, 500.0),(250, 667.0),(94, 422.0),(165, 500.0),(100, 500.0),(193, 333.0),(235, 310.0),(171, 500.0),(33, 333.0),(78, 667.0),(186, 556.0),(73, 333.0),(187, 500.0),(32, 250.0),(70, 611.0),(191, 500.0),(88, 611.0),(232, 556.0),(184, 333.0),(123, 400.0),(56, 500.0),(46, 250.0),(105, 278.0),(89, 556.0),(55, 500.0),(97, 500.0),(107, 444.0),(180, 250.0),(47, 278.0),(87, 833.0),(74, 444.0),(111, 500.0),(121, 444.0),(185, 556.0),(106, 278.0),(67, 667.0),(119, 667.0),(77, 833.0),(177, 500.0),(104, 500.0),(178, 500.0),(114, 389.0),(79, 722.0),(196, 333.0),(39, 333.0),(162, 500.0),(75, 667.0),(199, 333.0),(51, 500.0),(174, 500.0),(83, 500.0),(85, 722.0),(170, 556.0),(57, 500.0),(233, 722.0),(92, 278.0),(251, 500.0),(42, 500.0),(71, 722.0),(93, 389.0),(116, 278.0),(102, 278.0),(117, 500.0),(169, 214.0),(183, 350.0),(118, 444.0),(194, 333.0),(207, 333.0),(234, 944.0),(34, 420.0),(76, 556.0),(124, 275.0),(112, 500.0),(59, 333.0),(69, 611.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref AvantGarde_Demi: FontMetrics = FontMetrics {
ascent: 740.0,
descent: -192.0,
cap_height: 740.0,
x_height: 555.0,
italic_angle: 0.0,
bbox: (-123.0, -251.0, 1222.0, 1021.0),
flags: 0,
font_family: "ITC".to_string(),
font_weight: "Demi".to_string(),
glyph_widths: vec![
(47, 460.0),(71, 840.0),(100, 660.0),(66, 580.0),(91, 320.0),(187, 460.0),(112, 660.0),(48, 560.0),(202, 360.0),(64, 740.0),(99, 640.0),(97, 660.0),(57, 560.0),(249, 660.0),(113, 660.0),(79, 840.0),(173, 240.0),(205, 700.0),(63, 560.0),(180, 280.0),(101, 640.0),(193, 420.0),(40, 380.0),(80, 560.0),(106, 260.0),(227, 360.0),(85, 640.0),(89, 620.0),(115, 440.0),(88, 680.0),(50, 560.0),(77, 900.0),(103, 660.0),(36, 560.0),(107, 580.0),(163, 560.0),(186, 480.0),(188, 1000.0),(102, 280.0),(41, 380.0),(184, 280.0),(53, 560.0),(104, 600.0),(125, 340.0),(108, 240.0),(34, 360.0),(235, 360.0),(170, 480.0),(185, 480.0),(199, 280.0),(114, 320.0),(58, 280.0),(45, 420.0),(94, 600.0),(60, 600.0),(39, 280.0),(73, 280.0),(75, 620.0),(98, 660.0),(189, 1280.0),(182, 600.0),(70, 480.0),(78, 740.0),(38, 680.0),(52, 560.0),(124, 600.0),(161, 280.0),(234, 1060.0),(245, 240.0),(76, 440.0),(43, 600.0),(96, 280.0),(56, 560.0),(191, 560.0),(200, 500.0),(90, 500.0),(44, 280.0),(174, 520.0),(118, 560.0),(166, 560.0),(198, 480.0),(117, 600.0),(169, 220.0),(197, 420.0),(74, 480.0),(51, 560.0),(65, 740.0),(81, 840.0),(116, 300.0),(126, 600.0),(208, 1000.0),(55, 560.0),(33, 280.0),(196, 480.0),(177, 500.0),(119, 800.0),(93, 320.0),(164, 160.0),(111, 640.0),(203, 340.0),(86, 700.0),(165, 560.0),(172, 240.0),(84, 420.0),(195, 540.0),(123, 340.0),(207, 540.0),(62, 600.0),(35, 560.0),(68, 700.0),(92, 640.0),(109, 940.0),(122, 460.0),(183, 600.0),(32, 280.0),(46, 280.0),(105, 240.0),(121, 580.0),(67, 780.0),(168, 560.0),(225, 900.0),(251, 600.0),(54, 560.0),(241, 1080.0),(171, 460.0),(179, 560.0),(69, 520.0),(83, 520.0),(87, 900.0),(206, 340.0),(232, 480.0),(248, 320.0),(178, 560.0),(250, 1080.0),(61, 600.0),(233, 840.0),(194, 420.0),(167, 560.0),(59, 280.0),(37, 860.0),(162, 560.0),(110, 600.0),(49, 560.0),(42, 440.0),(175, 520.0),(82, 580.0),(95, 500.0),(120, 560.0),(72, 680.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_Narrow_Oblique: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 523.0,
italic_angle: -12.0,
bbox: (-139.0, -225.0, 915.0, 931.0),
flags: 64,
font_family: "Helvetica".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(227, 303.0),(183, 287.0),(73, 228.0),(92, 228.0),(58, 228.0),(122, 410.0),(199, 273.0),(202, 273.0),(38, 547.0),(34, 291.0),(207, 273.0),(168, 456.0),(40, 273.0),(178, 456.0),(44, 228.0),(77, 683.0),(185, 273.0),(233, 638.0),(234, 820.0),(78, 592.0),(179, 456.0),(68, 592.0),(41, 273.0),(206, 273.0),(116, 228.0),(98, 456.0),(205, 273.0),(172, 273.0),(113, 456.0),(45, 273.0),(120, 410.0),(169, 157.0),(46, 228.0),(55, 456.0),(99, 410.0),(111, 456.0),(103, 456.0),(104, 456.0),(61, 479.0),(90, 501.0),(180, 228.0),(187, 456.0),(241, 729.0),(245, 228.0),(200, 273.0),(37, 729.0),(67, 592.0),(174, 410.0),(33, 228.0),(88, 547.0),(126, 479.0),(208, 820.0),(121, 410.0),(117, 456.0),(112, 456.0),(105, 182.0),(163, 456.0),(107, 410.0),(53, 456.0),(91, 228.0),(164, 137.0),(175, 410.0),(71, 638.0),(62, 479.0),(66, 547.0),(186, 273.0),(166, 456.0),(36, 456.0),(84, 501.0),(251, 501.0),(115, 410.0),(232, 456.0),(162, 456.0),(39, 182.0),(76, 456.0),(47, 228.0),(52, 456.0),(60, 479.0),(124, 213.0),(195, 273.0),(203, 273.0),(64, 832.0),(248, 182.0),(79, 638.0),(114, 273.0),(97, 456.0),(188, 820.0),(72, 592.0),(54, 456.0),(182, 440.0),(225, 820.0),(123, 274.0),(48, 456.0),(173, 273.0),(235, 299.0),(85, 592.0),(75, 547.0),(96, 182.0),(110, 456.0),(167, 456.0),(109, 683.0),(56, 456.0),(35, 456.0),(193, 273.0),(165, 456.0),(191, 501.0),(32, 228.0),(69, 547.0),(250, 774.0),(57, 456.0),(65, 547.0),(89, 547.0),(101, 456.0),(86, 547.0),(194, 273.0),(119, 592.0),(82, 592.0),(80, 547.0),(83, 547.0),(42, 319.0),(197, 273.0),(108, 182.0),(94, 385.0),(106, 182.0),(95, 456.0),(177, 456.0),(49, 456.0),(51, 456.0),(125, 274.0),(74, 410.0),(198, 273.0),(100, 456.0),(170, 273.0),(189, 820.0),(59, 228.0),(118, 410.0),(50, 456.0),(93, 228.0),(161, 273.0),(171, 456.0),(43, 479.0),(196, 273.0),(249, 501.0),(102, 228.0),(87, 774.0),(184, 182.0),(63, 456.0),(81, 638.0),(70, 501.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_Narrow_BoldOblique: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 532.0,
italic_angle: -12.0,
bbox: (-143.0, -228.0, 913.0, 962.0),
flags: 64,
font_family: "Helvetica".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(70, 501.0),(38, 592.0),(75, 592.0),(42, 319.0),(166, 456.0),(193, 273.0),(33, 273.0),(169, 195.0),(61, 479.0),(198, 273.0),(165, 456.0),(177, 456.0),(197, 273.0),(245, 228.0),(53, 456.0),(168, 456.0),(232, 501.0),(94, 479.0),(64, 800.0),(80, 547.0),(77, 683.0),(82, 592.0),(49, 456.0),(87, 774.0),(188, 820.0),(207, 273.0),(50, 456.0),(72, 592.0),(89, 547.0),(36, 456.0),(109, 729.0),(124, 230.0),(37, 729.0),(73, 228.0),(67, 592.0),(45, 273.0),(57, 456.0),(104, 501.0),(162, 456.0),(112, 501.0),(233, 638.0),(182, 456.0),(194, 273.0),(90, 501.0),(98, 501.0),(99, 456.0),(113, 501.0),(173, 273.0),(195, 273.0),(251, 501.0),(86, 547.0),(164, 137.0),(101, 456.0),(171, 456.0),(43, 479.0),(65, 592.0),(79, 638.0),(111, 501.0),(205, 273.0),(248, 228.0),(66, 592.0),(41, 273.0),(44, 228.0),(96, 228.0),(51, 456.0),(250, 774.0),(40, 273.0),(125, 319.0),(185, 410.0),(175, 501.0),(69, 547.0),(68, 592.0),(235, 299.0),(206, 273.0),(203, 273.0),(183, 287.0),(106, 228.0),(249, 501.0),(54, 456.0),(88, 547.0),(63, 501.0),(100, 501.0),(115, 456.0),(196, 273.0),(48, 456.0),(76, 501.0),(93, 273.0),(170, 410.0),(225, 820.0),(83, 547.0),(114, 319.0),(62, 479.0),(107, 456.0),(123, 319.0),(84, 501.0),(119, 638.0),(120, 456.0),(191, 501.0),(163, 456.0),(47, 228.0),(55, 456.0),(105, 228.0),(178, 456.0),(234, 820.0),(81, 638.0),(187, 456.0),(34, 389.0),(91, 273.0),(108, 228.0),(118, 456.0),(122, 410.0),(46, 228.0),(167, 456.0),(52, 456.0),(95, 456.0),(172, 273.0),(180, 228.0),(110, 501.0),(117, 501.0),(126, 479.0),(35, 456.0),(39, 228.0),(102, 273.0),(58, 273.0),(60, 479.0),(59, 273.0),(71, 638.0),(92, 228.0),(97, 456.0),(121, 456.0),(179, 456.0),(202, 273.0),(161, 273.0),(116, 273.0),(241, 729.0),(186, 410.0),(174, 501.0),(184, 228.0),(32, 228.0),(56, 456.0),(199, 273.0),(208, 820.0),(74, 456.0),(200, 273.0),(227, 303.0),(85, 592.0),(78, 592.0),(103, 501.0),(189, 820.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Bookman_DemiItalic: FontMetrics = FontMetrics {
ascent: 717.0,
descent: -228.0,
cap_height: 681.0,
x_height: 515.0,
italic_angle: -10.0,
bbox: (-231.0, -250.0, 1333.0, 941.0),
flags: 64,
font_family: "ITC".to_string(),
font_weight: "Demi".to_string(),
glyph_widths: vec![
(116, 440.0),(50, 680.0),(163, 680.0),(49, 680.0),(40, 260.0),(170, 520.0),(100, 680.0),(175, 820.0),(90, 680.0),(62, 620.0),(184, 300.0),(120, 620.0),(46, 340.0),(56, 680.0),(65, 720.0),(32, 340.0),(97, 680.0),(69, 720.0),(205, 560.0),(88, 740.0),(38, 980.0),(112, 660.0),(167, 620.0),(171, 380.0),(67, 700.0),(245, 380.0),(104, 700.0),(66, 720.0),(103, 620.0),(92, 580.0),(195, 480.0),(83, 700.0),(110, 680.0),(51, 680.0),(59, 340.0),(52, 680.0),(79, 760.0),(111, 600.0),(168, 680.0),(80, 640.0),(71, 760.0),(174, 820.0),(208, 1000.0),(250, 920.0),(96, 320.0),(124, 620.0),(166, 680.0),(235, 440.0),(249, 600.0),(36, 680.0),(54, 680.0),(162, 680.0),(165, 680.0),(109, 960.0),(64, 780.0),(122, 560.0),(98, 600.0),(186, 520.0),(196, 480.0),(207, 480.0),(93, 260.0),(248, 380.0),(68, 760.0),(172, 220.0),(78, 740.0),(81, 760.0),(191, 620.0),(193, 380.0),(203, 360.0),(102, 420.0),(37, 880.0),(45, 280.0),(180, 340.0),(47, 360.0),(194, 340.0),(197, 480.0),(57, 680.0),(73, 380.0),(87, 1000.0),(76, 640.0),(118, 540.0),(225, 1140.0),(84, 700.0),(70, 660.0),(101, 560.0),(121, 600.0),(58, 340.0),(42, 460.0),(105, 380.0),(60, 620.0),(169, 180.0),(185, 520.0),(227, 440.0),(178, 420.0),(99, 560.0),(53, 680.0),(41, 260.0),(199, 380.0),(115, 540.0),(187, 380.0),(43, 600.0),(189, 1360.0),(75, 780.0),(173, 220.0),(123, 300.0),(117, 680.0),(114, 500.0),(39, 320.0),(72, 800.0),(86, 660.0),(85, 740.0),(55, 680.0),(95, 500.0),(126, 620.0),(188, 1000.0),(89, 660.0),(91, 260.0),(202, 360.0),(82, 740.0),(33, 320.0),(44, 340.0),(161, 320.0),(206, 320.0),(119, 860.0),(106, 320.0),(164, 120.0),(77, 860.0),(233, 760.0),(113, 620.0),(34, 380.0),(200, 520.0),(74, 620.0),(241, 880.0),(94, 620.0),(48, 680.0),(183, 360.0),(198, 460.0),(35, 680.0),(107, 700.0),(125, 300.0),(177, 500.0),(182, 680.0),(234, 1180.0),(108, 380.0),(232, 640.0),(63, 620.0),(251, 660.0),(179, 420.0),(61, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Palatino_Bold: FontMetrics = FontMetrics {
ascent: 726.0,
descent: -281.0,
cap_height: 681.0,
x_height: 471.0,
italic_angle: 0.0,
bbox: (-152.0, -266.0, 1000.0, 924.0),
flags: 0,
font_family: "Palatino".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(169, 227.0),(125, 310.0),(50, 500.0),(171, 500.0),(251, 611.0),(115, 444.0),(245, 333.0),(101, 500.0),(72, 833.0),(42, 444.0),(97, 500.0),(109, 889.0),(178, 500.0),(100, 611.0),(32, 250.0),(57, 500.0),(96, 278.0),(60, 606.0),(85, 778.0),(48, 500.0),(182, 641.0),(58, 250.0),(185, 500.0),(55, 500.0),(173, 389.0),(187, 500.0),(35, 500.0),(66, 667.0),(116, 333.0),(199, 333.0),(92, 606.0),(76, 611.0),(93, 333.0),(98, 611.0),(167, 500.0),(162, 500.0),(189, 1000.0),(172, 389.0),(49, 500.0),(83, 611.0),(91, 333.0),(80, 611.0),(225, 1000.0),(87, 1000.0),(165, 500.0),(233, 833.0),(121, 556.0),(82, 722.0),(188, 1000.0),(208, 1000.0),(126, 606.0),(202, 333.0),(47, 296.0),(84, 667.0),(232, 611.0),(43, 606.0),(89, 667.0),(102, 389.0),(90, 667.0),(36, 500.0),(124, 606.0),(34, 402.0),(235, 488.0),(205, 333.0),(191, 444.0),(65, 778.0),(41, 333.0),(38, 833.0),(46, 250.0),(56, 500.0),(163, 500.0),(194, 333.0),(63, 444.0),(74, 389.0),(122, 500.0),(77, 1000.0),(75, 778.0),(234, 1000.0),(174, 611.0),(250, 833.0),(40, 333.0),(61, 606.0),(78, 833.0),(249, 556.0),(103, 556.0),(180, 250.0),(186, 500.0),(62, 606.0),(51, 500.0),(70, 556.0),(117, 611.0),(203, 333.0),(207, 333.0),(99, 444.0),(68, 833.0),(111, 556.0),(69, 611.0),(54, 500.0),(81, 833.0),(179, 500.0),(112, 611.0),(39, 278.0),(106, 333.0),(79, 833.0),(94, 606.0),(33, 278.0),(104, 611.0),(161, 278.0),(44, 250.0),(107, 611.0),(108, 333.0),(105, 333.0),(168, 500.0),(110, 611.0),(59, 250.0),(113, 611.0),(118, 556.0),(206, 333.0),(64, 747.0),(193, 333.0),(227, 438.0),(184, 333.0),(241, 778.0),(67, 722.0),(86, 778.0),(123, 310.0),(175, 611.0),(177, 500.0),(71, 833.0),(52, 500.0),(114, 389.0),(119, 833.0),(166, 500.0),(53, 500.0),(196, 333.0),(37, 889.0),(198, 333.0),(170, 500.0),(73, 389.0),(248, 333.0),(120, 500.0),(164, 167.0),(88, 667.0),(45, 333.0),(95, 500.0),(183, 606.0),(197, 333.0),(200, 333.0),(195, 333.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref ZapfDingbats: FontMetrics = FontMetrics {
ascent: 0.0,
descent: 0.0,
cap_height: 0.0,
x_height: 0.0,
italic_angle: 0.0,
bbox: (-1.0, -143.0, 981.0, 820.0),
flags: 0,
font_family: "ITC".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(230, 931.0),(95, 826.0),(163, 544.0),(45, 855.0),(253, 970.0),(210, 788.0),(218, 748.0),(133, 276.0),(141, 334.0),(77, 833.0),(234, 836.0),(105, 713.0),(120, 138.0),(221, 928.0),(171, 626.0),(243, 946.0),(85, 792.0),(54, 761.0),(162, 544.0),(88, 768.0),(231, 463.0),(91, 707.0),(33, 974.0),(181, 788.0),(86, 695.0),(137, 410.0),(196, 788.0),(215, 458.0),(139, 234.0),(191, 788.0),(36, 980.0),(207, 788.0),(224, 873.0),(43, 939.0),(112, 762.0),(238, 696.0),(245, 865.0),(116, 892.0),(205, 788.0),(37, 719.0),(87, 776.0),(69, 790.0),(60, 754.0),(223, 834.0),(97, 789.0),(226, 924.0),(49, 945.0),(212, 894.0),(200, 788.0),(213, 838.0),(82, 723.0),(76, 823.0),(222, 928.0),(232, 883.0),(135, 509.0),(41, 690.0),(128, 390.0),(186, 788.0),(113, 759.0),(55, 571.0),(103, 786.0),(81, 744.0),(170, 694.0),(184, 788.0),(185, 788.0),(62, 552.0),(233, 836.0),(248, 967.0),(122, 415.0),(39, 790.0),(67, 788.0),(214, 1016.0),(94, 701.0),(93, 682.0),(244, 771.0),(131, 317.0),(72, 816.0),(74, 789.0),(46, 911.0),(252, 927.0),(208, 788.0),(204, 788.0),(216, 748.0),(125, 668.0),(61, 494.0),(126, 668.0),(35, 974.0),(98, 789.0),(164, 910.0),(68, 788.0),(182, 788.0),(92, 708.0),(83, 749.0),(109, 873.0),(179, 788.0),(220, 927.0),(63, 537.0),(51, 755.0),(235, 867.0),(169, 595.0),(106, 791.0),(239, 874.0),(140, 334.0),(99, 707.0),(56, 677.0),(50, 974.0),(138, 234.0),(136, 410.0),(241, 874.0),(48, 911.0),(89, 792.0),(247, 888.0),(57, 763.0),(121, 277.0),(40, 791.0),(65, 692.0),(118, 784.0),(168, 776.0),(110, 761.0),(193, 788.0),(71, 794.0),(123, 392.0),(194, 788.0),(53, 762.0),(70, 793.0),(119, 438.0),(166, 760.0),(199, 788.0),(250, 831.0),(251, 873.0),(237, 696.0),(107, 785.0),(38, 789.0),(47, 933.0),(130, 317.0),(44, 549.0),(84, 790.0),(75, 841.0),(124, 392.0),(111, 762.0),(161, 732.0),(175, 788.0),(177, 788.0),(178, 788.0),(73, 823.0),(104, 787.0),(173, 788.0),(195, 788.0),(58, 760.0),(78, 816.0),(115, 892.0),(132, 276.0),(197, 788.0),(108, 791.0),(203, 788.0),(206, 788.0),(176, 788.0),(211, 788.0),(217, 924.0),(201, 788.0),(172, 788.0),(242, 760.0),(42, 960.0),(202, 788.0),(229, 930.0),(134, 509.0),(34, 961.0),(180, 788.0),(79, 831.0),(80, 923.0),(192, 788.0),(52, 846.0),(174, 788.0),(32, 278.0),(198, 788.0),(209, 788.0),(227, 924.0),(219, 918.0),(165, 667.0),(117, 788.0),(228, 917.0),(100, 687.0),(167, 760.0),(129, 390.0),(190, 788.0),(90, 759.0),(187, 788.0),(236, 867.0),(114, 759.0),(183, 788.0),(254, 918.0),(66, 786.0),(225, 828.0),(59, 759.0),(188, 788.0),(64, 577.0),(102, 689.0),(246, 771.0),(96, 815.0),(249, 888.0),(101, 696.0),(189, 788.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Bookman_Demi: FontMetrics = FontMetrics {
ascent: 717.0,
descent: -228.0,
cap_height: 681.0,
x_height: 502.0,
italic_angle: 0.0,
bbox: (-194.0, -250.0, 1346.0, 934.0),
flags: 0,
font_family: "ITC".to_string(),
font_weight: "Demi".to_string(),
glyph_widths: vec![
(164, 120.0),(180, 340.0),(82, 780.0),(194, 400.0),(72, 820.0),(183, 460.0),(58, 340.0),(95, 500.0),(167, 600.0),(197, 460.0),(208, 1000.0),(100, 640.0),(191, 660.0),(168, 660.0),(43, 600.0),(45, 360.0),(166, 660.0),(115, 520.0),(34, 420.0),(85, 740.0),(74, 640.0),(112, 640.0),(83, 660.0),(120, 600.0),(177, 500.0),(185, 540.0),(161, 360.0),(186, 540.0),(234, 1220.0),(241, 880.0),(121, 620.0),(104, 680.0),(108, 340.0),(173, 220.0),(184, 320.0),(70, 680.0),(193, 400.0),(88, 780.0),(32, 340.0),(97, 580.0),(206, 320.0),(114, 460.0),(65, 720.0),(51, 660.0),(178, 440.0),(64, 820.0),(235, 400.0),(60, 600.0),(188, 1000.0),(250, 940.0),(33, 360.0),(52, 660.0),(162, 660.0),(169, 240.0),(62, 600.0),(73, 400.0),(179, 380.0),(42, 460.0),(61, 600.0),(175, 740.0),(48, 660.0),(171, 400.0),(37, 940.0),(63, 660.0),(119, 800.0),(101, 580.0),(55, 660.0),(117, 660.0),(165, 660.0),(81, 800.0),(174, 740.0),(77, 940.0),(124, 600.0),(76, 640.0),(36, 660.0),(123, 320.0),(199, 320.0),(207, 500.0),(126, 600.0),(40, 320.0),(172, 220.0),(225, 1140.0),(46, 340.0),(94, 600.0),(110, 680.0),(170, 540.0),(227, 400.0),(122, 560.0),(69, 720.0),(87, 940.0),(106, 340.0),(198, 500.0),(187, 400.0),(56, 660.0),(189, 1360.0),(196, 480.0),(50, 660.0),(79, 800.0),(251, 660.0),(103, 580.0),(57, 660.0),(49, 660.0),(68, 780.0),(71, 780.0),(203, 360.0),(54, 660.0),(96, 320.0),(163, 660.0),(125, 320.0),(39, 320.0),(84, 700.0),(35, 660.0),(195, 500.0),(38, 800.0),(200, 500.0),(90, 640.0),(99, 580.0),(205, 440.0),(109, 1000.0),(233, 800.0),(80, 660.0),(248, 340.0),(245, 360.0),(53, 660.0),(111, 620.0),(41, 320.0),(67, 740.0),(249, 620.0),(47, 600.0),(78, 740.0),(182, 800.0),(113, 620.0),(66, 720.0),(59, 340.0),(91, 300.0),(202, 340.0),(232, 640.0),(75, 800.0),(92, 600.0),(118, 600.0),(98, 600.0),(105, 360.0),(116, 460.0),(44, 340.0),(107, 660.0),(102, 380.0),(89, 700.0),(86, 720.0),(93, 300.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_Narrow_Bold: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 532.0,
italic_angle: 0.0,
bbox: (-139.0, -228.0, 822.0, 962.0),
flags: 0,
font_family: "Helvetica".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(109, 729.0),(250, 774.0),(95, 456.0),(97, 456.0),(227, 303.0),(182, 456.0),(72, 592.0),(115, 456.0),(54, 456.0),(90, 501.0),(84, 501.0),(187, 456.0),(87, 774.0),(188, 820.0),(249, 501.0),(52, 456.0),(169, 195.0),(175, 501.0),(110, 501.0),(38, 592.0),(178, 456.0),(161, 273.0),(203, 273.0),(63, 501.0),(42, 319.0),(82, 592.0),(91, 273.0),(65, 592.0),(76, 501.0),(116, 273.0),(119, 638.0),(32, 228.0),(120, 456.0),(46, 228.0),(177, 456.0),(123, 319.0),(170, 410.0),(88, 547.0),(202, 273.0),(206, 273.0),(62, 479.0),(126, 479.0),(125, 319.0),(183, 287.0),(207, 273.0),(235, 299.0),(113, 501.0),(49, 456.0),(35, 456.0),(68, 592.0),(85, 592.0),(66, 592.0),(186, 410.0),(47, 228.0),(78, 592.0),(173, 273.0),(196, 273.0),(81, 638.0),(233, 638.0),(39, 228.0),(232, 501.0),(94, 479.0),(234, 820.0),(56, 456.0),(108, 228.0),(185, 410.0),(86, 547.0),(165, 456.0),(41, 273.0),(77, 683.0),(208, 820.0),(194, 273.0),(64, 800.0),(73, 228.0),(121, 456.0),(122, 410.0),(180, 228.0),(162, 456.0),(225, 820.0),(103, 501.0),(100, 501.0),(197, 273.0),(92, 228.0),(98, 501.0),(89, 547.0),(55, 456.0),(104, 501.0),(248, 228.0),(51, 456.0),(69, 547.0),(189, 820.0),(70, 501.0),(58, 273.0),(60, 479.0),(198, 273.0),(105, 228.0),(59, 273.0),(112, 501.0),(43, 479.0),(67, 592.0),(74, 456.0),(93, 273.0),(71, 638.0),(37, 729.0),(111, 501.0),(80, 547.0),(96, 228.0),(124, 230.0),(50, 456.0),(168, 456.0),(164, 137.0),(245, 228.0),(193, 273.0),(200, 273.0),(179, 456.0),(34, 389.0),(174, 501.0),(83, 547.0),(107, 456.0),(117, 501.0),(114, 319.0),(118, 456.0),(36, 456.0),(195, 273.0),(33, 273.0),(44, 228.0),(79, 638.0),(57, 456.0),(40, 273.0),(163, 456.0),(171, 456.0),(191, 501.0),(106, 228.0),(172, 273.0),(199, 273.0),(167, 456.0),(184, 228.0),(101, 456.0),(61, 479.0),(102, 273.0),(75, 592.0),(251, 501.0),(48, 456.0),(99, 456.0),(205, 273.0),(166, 456.0),(241, 729.0),(53, 456.0),(45, 273.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Palatino_BoldItalic: FontMetrics = FontMetrics {
ascent: 726.0,
descent: -281.0,
cap_height: 681.0,
x_height: 469.0,
italic_angle: -10.0,
bbox: (-170.0, -271.0, 1073.0, 926.0),
flags: 64,
font_family: "Palatino".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(49, 500.0),(203, 333.0),(121, 556.0),(52, 500.0),(41, 333.0),(43, 606.0),(94, 606.0),(199, 333.0),(188, 1000.0),(99, 444.0),(83, 556.0),(250, 778.0),(115, 444.0),(101, 444.0),(105, 333.0),(77, 944.0),(85, 778.0),(114, 389.0),(51, 500.0),(59, 250.0),(48, 500.0),(232, 611.0),(32, 250.0),(33, 333.0),(113, 537.0),(86, 667.0),(107, 556.0),(124, 606.0),(171, 500.0),(183, 606.0),(191, 444.0),(54, 500.0),(126, 606.0),(195, 333.0),(90, 667.0),(119, 833.0),(63, 444.0),(187, 500.0),(71, 778.0),(74, 389.0),(46, 250.0),(106, 333.0),(118, 556.0),(66, 667.0),(69, 611.0),(241, 738.0),(168, 500.0),(182, 556.0),(109, 833.0),(112, 556.0),(251, 556.0),(35, 500.0),(248, 333.0),(110, 556.0),(36, 500.0),(164, 167.0),(80, 667.0),(173, 333.0),(88, 722.0),(169, 250.0),(125, 333.0),(65, 722.0),(73, 389.0),(75, 722.0),(166, 500.0),(179, 556.0),(234, 944.0),(208, 1000.0),(111, 556.0),(197, 333.0),(116, 389.0),(193, 333.0),(45, 389.0),(189, 1000.0),(103, 500.0),(245, 333.0),(76, 611.0),(180, 250.0),(174, 611.0),(78, 778.0),(68, 778.0),(95, 500.0),(81, 833.0),(178, 556.0),(70, 556.0),(206, 333.0),(91, 333.0),(227, 333.0),(72, 778.0),(84, 611.0),(39, 278.0),(162, 500.0),(167, 556.0),(194, 333.0),(97, 556.0),(249, 556.0),(108, 333.0),(50, 500.0),(55, 500.0),(67, 685.0),(185, 500.0),(62, 606.0),(57, 500.0),(44, 250.0),(165, 500.0),(120, 500.0),(53, 500.0),(58, 250.0),(37, 889.0),(40, 333.0),(117, 556.0),(198, 333.0),(172, 333.0),(163, 500.0),(89, 611.0),(104, 556.0),(98, 537.0),(47, 315.0),(96, 278.0),(61, 606.0),(123, 333.0),(196, 333.0),(225, 944.0),(82, 722.0),(186, 500.0),(79, 833.0),(93, 333.0),(184, 250.0),(170, 500.0),(202, 556.0),(205, 333.0),(102, 333.0),(122, 500.0),(175, 611.0),(38, 833.0),(161, 333.0),(42, 444.0),(233, 833.0),(177, 500.0),(87, 1000.0),(64, 833.0),(92, 606.0),(235, 333.0),(60, 606.0),(200, 333.0),(100, 556.0),(34, 500.0),(56, 500.0),(207, 333.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 523.0,
italic_angle: 0.0,
bbox: (-166.0, -225.0, 1000.0, 931.0),
flags: 0,
font_family: "Helvetica".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(112, 556.0),(105, 222.0),(163, 556.0),(49, 556.0),(187, 556.0),(56, 556.0),(85, 722.0),(174, 500.0),(68, 722.0),(166, 556.0),(170, 333.0),(98, 556.0),(70, 611.0),(125, 334.0),(123, 334.0),(97, 556.0),(48, 556.0),(168, 556.0),(109, 833.0),(35, 556.0),(178, 556.0),(120, 500.0),(169, 191.0),(84, 611.0),(180, 278.0),(200, 333.0),(206, 333.0),(185, 333.0),(88, 667.0),(32, 278.0),(173, 333.0),(33, 278.0),(34, 355.0),(90, 611.0),(104, 556.0),(45, 333.0),(75, 667.0),(67, 722.0),(179, 556.0),(189, 1000.0),(124, 260.0),(126, 584.0),(66, 667.0),(60, 584.0),(78, 722.0),(63, 556.0),(82, 722.0),(91, 278.0),(50, 556.0),(43, 584.0),(92, 278.0),(188, 1000.0),(199, 333.0),(102, 278.0),(77, 833.0),(171, 556.0),(162, 556.0),(64, 1015.0),(235, 365.0),(76, 556.0),(81, 778.0),(52, 556.0),(193, 333.0),(100, 556.0),(87, 944.0),(115, 500.0),(122, 500.0),(53, 556.0),(191, 611.0),(107, 500.0),(241, 889.0),(195, 333.0),(233, 778.0),(186, 333.0),(89, 667.0),(164, 167.0),(175, 500.0),(248, 222.0),(74, 500.0),(99, 500.0),(117, 556.0),(207, 333.0),(165, 556.0),(196, 333.0),(232, 556.0),(251, 611.0),(79, 778.0),(65, 667.0),(119, 722.0),(167, 556.0),(184, 222.0),(42, 389.0),(40, 333.0),(62, 584.0),(72, 722.0),(93, 278.0),(51, 556.0),(111, 556.0),(41, 333.0),(172, 333.0),(61, 584.0),(58, 278.0),(54, 556.0),(73, 278.0),(69, 667.0),(37, 889.0),(47, 278.0),(96, 222.0),(182, 537.0),(198, 333.0),(59, 278.0),(71, 778.0),(234, 1000.0),(55, 556.0),(38, 667.0),(39, 222.0),(106, 222.0),(197, 333.0),(101, 556.0),(205, 333.0),(208, 1000.0),(249, 611.0),(94, 469.0),(108, 222.0),(250, 944.0),(36, 556.0),(116, 278.0),(57, 556.0),(86, 667.0),(245, 278.0),(121, 500.0),(46, 278.0),(194, 333.0),(203, 333.0),(118, 500.0),(103, 556.0),(44, 278.0),(161, 333.0),(177, 556.0),(80, 667.0),(202, 333.0),(183, 350.0),(95, 556.0),(113, 556.0),(225, 1000.0),(83, 667.0),(114, 333.0),(227, 370.0),(110, 556.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref NewCenturySchlbk_BoldItalic: FontMetrics = FontMetrics {
ascent: 737.0,
descent: -205.0,
cap_height: 722.0,
x_height: 477.0,
italic_angle: -16.0,
bbox: (-205.0, -250.0, 1147.0, 991.0),
flags: 64,
font_family: "New".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(169, 287.0),(241, 815.0),(101, 519.0),(36, 574.0),(103, 611.0),(122, 519.0),(180, 287.0),(165, 574.0),(245, 389.0),(54, 574.0),(67, 759.0),(126, 606.0),(105, 389.0),(124, 606.0),(235, 356.0),(111, 574.0),(70, 704.0),(84, 722.0),(49, 574.0),(55, 574.0),(56, 574.0),(95, 500.0),(125, 407.0),(65, 741.0),(163, 574.0),(178, 500.0),(177, 500.0),(207, 333.0),(44, 287.0),(47, 278.0),(61, 606.0),(195, 333.0),(35, 574.0),(73, 444.0),(83, 685.0),(58, 287.0),(251, 574.0),(52, 574.0),(64, 747.0),(69, 741.0),(200, 333.0),(227, 412.0),(90, 704.0),(112, 648.0),(76, 704.0),(38, 889.0),(59, 287.0),(41, 407.0),(50, 574.0),(51, 574.0),(46, 287.0),(189, 1167.0),(225, 889.0),(233, 833.0),(114, 519.0),(53, 574.0),(183, 606.0),(75, 778.0),(116, 407.0),(232, 704.0),(250, 852.0),(88, 741.0),(104, 685.0),(85, 833.0),(78, 852.0),(166, 574.0),(91, 407.0),(167, 500.0),(115, 481.0),(77, 944.0),(123, 407.0),(117, 685.0),(170, 481.0),(92, 606.0),(120, 574.0),(161, 333.0),(179, 500.0),(205, 333.0),(34, 400.0),(71, 815.0),(80, 741.0),(206, 333.0),(113, 630.0),(97, 667.0),(32, 287.0),(109, 944.0),(98, 611.0),(43, 606.0),(121, 519.0),(175, 685.0),(37, 889.0),(100, 667.0),(42, 500.0),(172, 278.0),(79, 833.0),(186, 481.0),(89, 704.0),(48, 574.0),(118, 556.0),(68, 833.0),(164, 167.0),(198, 333.0),(45, 333.0),(191, 481.0),(203, 333.0),(208, 1000.0),(173, 278.0),(63, 481.0),(102, 389.0),(72, 870.0),(93, 407.0),(107, 648.0),(62, 606.0),(106, 370.0),(182, 650.0),(81, 833.0),(199, 333.0),(82, 796.0),(184, 259.0),(234, 963.0),(202, 333.0),(193, 333.0),(39, 259.0),(94, 606.0),(87, 944.0),(60, 606.0),(96, 259.0),(66, 759.0),(188, 1000.0),(162, 574.0),(248, 389.0),(33, 333.0),(249, 574.0),(86, 741.0),(194, 333.0),(171, 481.0),(187, 481.0),(185, 481.0),(196, 333.0),(174, 685.0),(40, 407.0),(99, 537.0),(74, 667.0),(57, 574.0),(168, 574.0),(119, 833.0),(108, 389.0),(110, 685.0),(197, 333.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Symbol: FontMetrics = FontMetrics {
ascent: 0.0,
descent: 0.0,
cap_height: 0.0,
x_height: 0.0,
italic_angle: 0.0,
bbox: (-180.0, -293.0, 1090.0, 1010.0),
flags: 0,
font_family: "Symbol".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(78, 722.0),(60, 549.0),(85, 690.0),(69, 611.0),(107, 549.0),(210, 790.0),(217, 603.0),(100, 494.0),(185, 549.0),(45, 549.0),(166, 500.0),(86, 439.0),(123, 480.0),(177, 549.0),(197, 768.0),(215, 250.0),(112, 549.0),(163, 549.0),(32, 250.0),(241, 329.0),(108, 549.0),(174, 987.0),(90, 611.0),(103, 411.0),(124, 200.0),(105, 329.0),(97, 631.0),(195, 987.0),(74, 631.0),(183, 460.0),(224, 494.0),(80, 768.0),(118, 713.0),(230, 384.0),(209, 713.0),(162, 247.0),(62, 549.0),(117, 576.0),(51, 500.0),(218, 603.0),(251, 384.0),(179, 549.0),(38, 778.0),(187, 549.0),(203, 713.0),(66, 667.0),(235, 384.0),(82, 556.0),(114, 549.0),(175, 603.0),(186, 549.0),(87, 768.0),(168, 753.0),(39, 439.0),(59, 278.0),(110, 521.0),(193, 686.0),(171, 1042.0),(211, 790.0),(61, 549.0),(229, 713.0),(46, 250.0),(178, 411.0),(182, 494.0),(173, 603.0),(119, 686.0),(84, 611.0),(238, 494.0),(83, 592.0),(227, 790.0),(248, 384.0),(116, 439.0),(54, 500.0),(122, 494.0),(40, 333.0),(201, 713.0),(225, 329.0),(58, 278.0),(247, 384.0),(49, 500.0),(72, 722.0),(37, 833.0),(55, 500.0),(242, 274.0),(106, 603.0),(125, 480.0),(172, 987.0),(188, 1000.0),(204, 713.0),(95, 500.0),(96, 500.0),(250, 384.0),(252, 494.0),(113, 521.0),(63, 444.0),(165, 713.0),(243, 686.0),(53, 500.0),(169, 753.0),(161, 620.0),(226, 790.0),(170, 753.0),(167, 753.0),(212, 890.0),(184, 549.0),(205, 713.0),(199, 768.0),(41, 333.0),(92, 863.0),(104, 603.0),(65, 722.0),(202, 713.0),(42, 500.0),(76, 686.0),(194, 795.0),(222, 987.0),(52, 500.0),(77, 889.0),(232, 384.0),(44, 250.0),(239, 494.0),(200, 768.0),(109, 576.0),(115, 603.0),(36, 549.0),(89, 795.0),(246, 384.0),(221, 603.0),(111, 549.0),(198, 823.0),(35, 500.0),(176, 400.0),(233, 384.0),(71, 603.0),(192, 823.0),(50, 500.0),(254, 494.0),(70, 763.0),(56, 500.0),(220, 987.0),(228, 786.0),(189, 603.0),(93, 333.0),(43, 549.0),(57, 500.0),(88, 645.0),(99, 549.0),(101, 439.0),(73, 333.0),(120, 493.0),(160, 750.0),(191, 658.0),(196, 768.0),(207, 713.0),(206, 713.0),(34, 713.0),(79, 722.0),(81, 741.0),(214, 549.0),(223, 603.0),(48, 500.0),(102, 521.0),(180, 549.0),(236, 494.0),(181, 713.0),(219, 1042.0),(68, 612.0),(98, 549.0),(245, 686.0),(231, 384.0),(208, 768.0),(244, 686.0),(249, 384.0),(47, 278.0),(237, 494.0),(253, 494.0),(64, 549.0),(67, 722.0),(164, 167.0),(91, 333.0),(75, 722.0),(94, 658.0),(190, 1000.0),(216, 713.0),(33, 333.0),(234, 384.0),(121, 686.0),(213, 823.0),(126, 549.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Times_Bold: FontMetrics = FontMetrics {
ascent: 683.0,
descent: -217.0,
cap_height: 676.0,
x_height: 461.0,
italic_angle: 0.0,
bbox: (-168.0, -218.0, 1000.0, 935.0),
flags: 0,
font_family: "Times".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(90, 667.0),(161, 333.0),(195, 333.0),(185, 500.0),(187, 500.0),(37, 1000.0),(194, 333.0),(54, 500.0),(118, 500.0),(111, 500.0),(227, 300.0),(83, 556.0),(87, 1000.0),(88, 722.0),(103, 500.0),(114, 444.0),(183, 350.0),(198, 333.0),(41, 333.0),(184, 333.0),(56, 500.0),(206, 333.0),(202, 333.0),(68, 722.0),(50, 500.0),(59, 333.0),(52, 500.0),(92, 278.0),(51, 500.0),(95, 500.0),(106, 333.0),(46, 250.0),(126, 520.0),(168, 500.0),(178, 500.0),(98, 556.0),(200, 333.0),(44, 250.0),(71, 778.0),(63, 500.0),(65, 722.0),(182, 540.0),(66, 667.0),(203, 333.0),(38, 833.0),(232, 667.0),(166, 500.0),(120, 500.0),(248, 278.0),(97, 500.0),(122, 444.0),(64, 930.0),(167, 500.0),(35, 500.0),(73, 389.0),(172, 333.0),(234, 1000.0),(208, 1000.0),(249, 500.0),(70, 611.0),(91, 333.0),(170, 500.0),(116, 333.0),(250, 722.0),(58, 333.0),(79, 778.0),(81, 778.0),(173, 333.0),(180, 250.0),(197, 333.0),(235, 330.0),(171, 500.0),(60, 570.0),(164, 167.0),(119, 722.0),(121, 500.0),(123, 394.0),(36, 500.0),(165, 500.0),(33, 333.0),(174, 556.0),(77, 944.0),(100, 556.0),(101, 444.0),(105, 278.0),(193, 333.0),(74, 500.0),(112, 556.0),(76, 667.0),(191, 500.0),(49, 500.0),(93, 333.0),(94, 581.0),(175, 556.0),(89, 722.0),(115, 389.0),(162, 500.0),(186, 500.0),(53, 500.0),(245, 278.0),(40, 333.0),(125, 394.0),(124, 220.0),(109, 833.0),(251, 556.0),(196, 333.0),(233, 778.0),(113, 556.0),(188, 1000.0),(34, 555.0),(99, 444.0),(85, 722.0),(179, 500.0),(84, 667.0),(199, 333.0),(225, 1000.0),(205, 333.0),(62, 570.0),(108, 278.0),(189, 1000.0),(45, 333.0),(177, 500.0),(61, 570.0),(96, 333.0),(169, 278.0),(82, 722.0),(32, 250.0),(241, 722.0),(104, 556.0),(207, 333.0),(163, 500.0),(42, 500.0),(67, 722.0),(69, 667.0),(117, 556.0),(86, 722.0),(47, 278.0),(80, 611.0),(57, 500.0),(43, 570.0),(102, 333.0),(110, 556.0),(72, 778.0),(107, 556.0),(48, 500.0),(39, 333.0),(55, 500.0),(75, 778.0),(78, 722.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_Oblique: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 523.0,
italic_angle: -12.0,
bbox: (-170.0, -225.0, 1116.0, 931.0),
flags: 64,
font_family: "Helvetica".to_string(),
font_weight: "Medium".to_string(),
glyph_widths: vec![
(39, 222.0),(83, 667.0),(188, 1000.0),(68, 722.0),(235, 365.0),(114, 333.0),(98, 556.0),(208, 1000.0),(124, 260.0),(105, 222.0),(69, 667.0),(36, 556.0),(80, 667.0),(60, 584.0),(203, 333.0),(178, 556.0),(227, 370.0),(185, 333.0),(47, 278.0),(82, 722.0),(53, 556.0),(161, 333.0),(54, 556.0),(173, 333.0),(99, 500.0),(91, 278.0),(104, 556.0),(115, 500.0),(96, 222.0),(191, 611.0),(72, 722.0),(37, 889.0),(110, 556.0),(162, 556.0),(174, 500.0),(233, 778.0),(41, 333.0),(38, 667.0),(94, 469.0),(165, 556.0),(42, 389.0),(106, 222.0),(71, 778.0),(50, 556.0),(177, 556.0),(184, 222.0),(118, 500.0),(120, 500.0),(171, 556.0),(194, 333.0),(77, 833.0),(251, 611.0),(64, 1015.0),(193, 333.0),(111, 556.0),(202, 333.0),(163, 556.0),(32, 278.0),(67, 722.0),(122, 500.0),(234, 1000.0),(75, 667.0),(200, 333.0),(205, 333.0),(245, 278.0),(73, 278.0),(81, 778.0),(207, 333.0),(250, 944.0),(169, 191.0),(123, 334.0),(86, 667.0),(102, 278.0),(164, 167.0),(180, 278.0),(196, 333.0),(59, 278.0),(125, 334.0),(175, 500.0),(35, 556.0),(112, 556.0),(43, 584.0),(33, 278.0),(113, 556.0),(85, 722.0),(56, 556.0),(46, 278.0),(55, 556.0),(45, 333.0),(100, 556.0),(195, 333.0),(90, 611.0),(197, 333.0),(66, 667.0),(74, 500.0),(58, 278.0),(76, 556.0),(52, 556.0),(70, 611.0),(92, 278.0),(44, 278.0),(179, 556.0),(107, 500.0),(206, 333.0),(49, 556.0),(108, 222.0),(189, 1000.0),(79, 778.0),(109, 833.0),(89, 667.0),(183, 350.0),(48, 556.0),(40, 333.0),(51, 556.0),(87, 944.0),(88, 667.0),(172, 333.0),(225, 1000.0),(126, 584.0),(166, 556.0),(61, 584.0),(119, 722.0),(84, 611.0),(186, 333.0),(168, 556.0),(95, 556.0),(116, 278.0),(232, 556.0),(78, 722.0),(97, 556.0),(65, 667.0),(117, 556.0),(93, 278.0),(167, 556.0),(199, 333.0),(62, 584.0),(34, 355.0),(121, 500.0),(249, 611.0),(248, 222.0),(63, 556.0),(170, 333.0),(103, 556.0),(101, 556.0),(182, 537.0),(241, 889.0),(57, 556.0),(187, 556.0),(198, 333.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Helvetica_BoldOblique: FontMetrics = FontMetrics {
ascent: 718.0,
descent: -207.0,
cap_height: 718.0,
x_height: 532.0,
italic_angle: -12.0,
bbox: (-174.0, -228.0, 1114.0, 962.0),
flags: 64,
font_family: "Helvetica".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(193, 333.0),(54, 556.0),(86, 667.0),(100, 611.0),(42, 389.0),(101, 556.0),(245, 278.0),(187, 556.0),(74, 556.0),(41, 333.0),(114, 389.0),(162, 556.0),(106, 278.0),(165, 556.0),(161, 333.0),(63, 611.0),(87, 944.0),(170, 500.0),(66, 722.0),(235, 365.0),(208, 1000.0),(72, 722.0),(171, 556.0),(122, 500.0),(186, 500.0),(189, 1000.0),(248, 278.0),(32, 278.0),(95, 556.0),(117, 611.0),(75, 722.0),(44, 278.0),(167, 556.0),(58, 333.0),(232, 611.0),(107, 556.0),(43, 584.0),(197, 333.0),(111, 611.0),(91, 333.0),(85, 722.0),(185, 500.0),(64, 975.0),(84, 611.0),(61, 584.0),(163, 556.0),(46, 278.0),(94, 584.0),(89, 667.0),(55, 556.0),(119, 778.0),(183, 350.0),(76, 611.0),(99, 556.0),(104, 611.0),(195, 333.0),(83, 667.0),(33, 333.0),(37, 889.0),(53, 556.0),(45, 333.0),(79, 778.0),(59, 333.0),(113, 611.0),(51, 556.0),(69, 667.0),(250, 944.0),(169, 238.0),(241, 889.0),(80, 667.0),(48, 556.0),(196, 333.0),(168, 556.0),(60, 584.0),(110, 611.0),(199, 333.0),(40, 333.0),(73, 278.0),(179, 556.0),(194, 333.0),(173, 333.0),(71, 778.0),(182, 556.0),(49, 556.0),(225, 1000.0),(227, 370.0),(67, 722.0),(121, 556.0),(90, 611.0),(65, 722.0),(205, 333.0),(174, 611.0),(102, 333.0),(38, 722.0),(125, 389.0),(70, 611.0),(120, 556.0),(96, 278.0),(118, 556.0),(251, 611.0),(56, 556.0),(68, 722.0),(172, 333.0),(180, 278.0),(198, 333.0),(39, 278.0),(77, 833.0),(188, 1000.0),(112, 611.0),(116, 333.0),(166, 556.0),(233, 778.0),(82, 722.0),(36, 556.0),(34, 474.0),(177, 556.0),(184, 278.0),(200, 333.0),(109, 889.0),(52, 556.0),(57, 556.0),(47, 278.0),(62, 584.0),(78, 722.0),(103, 611.0),(206, 333.0),(191, 611.0),(123, 389.0),(105, 278.0),(126, 584.0),(175, 611.0),(234, 1000.0),(202, 333.0),(249, 611.0),(207, 333.0),(115, 556.0),(108, 278.0),(35, 556.0),(93, 333.0),(124, 280.0),(203, 333.0),(81, 778.0),(98, 611.0),(164, 167.0),(178, 556.0),(50, 556.0),(88, 667.0),(92, 278.0),(97, 556.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Courier_Bold: FontMetrics = FontMetrics {
ascent: 629.0,
descent: -157.0,
cap_height: 562.0,
x_height: 439.0,
italic_angle: 0.0,
bbox: (-113.0, -250.0, 749.0, 801.0),
flags: 1,
font_family: "Courier".to_string(),
font_weight: "Bold".to_string(),
glyph_widths: vec![
(167, 600.0),(111, 600.0),(174, 600.0),(124, 600.0),(197, 600.0),(38, 600.0),(79, 600.0),(227, 600.0),(83, 600.0),(199, 600.0),(37, 600.0),(109, 600.0),(126, 600.0),(101, 600.0),(116, 600.0),(251, 600.0),(46, 600.0),(205, 600.0),(33, 600.0),(69, 600.0),(113, 600.0),(80, 600.0),(169, 600.0),(85, 600.0),(233, 600.0),(42, 600.0),(170, 600.0),(173, 600.0),(44, 600.0),(86, 600.0),(43, 600.0),(114, 600.0),(168, 600.0),(249, 600.0),(95, 600.0),(179, 600.0),(60, 600.0),(105, 600.0),(187, 600.0),(202, 600.0),(182, 600.0),(165, 600.0),(241, 600.0),(61, 600.0),(67, 600.0),(183, 600.0),(203, 600.0),(234, 600.0),(56, 600.0),(171, 600.0),(55, 600.0),(164, 600.0),(47, 600.0),(48, 600.0),(64, 600.0),(100, 600.0),(54, 600.0),(65, 600.0),(90, 600.0),(103, 600.0),(125, 600.0),(84, 600.0),(193, 600.0),(66, 600.0),(40, 600.0),(81, 600.0),(196, 600.0),(225, 600.0),(89, 600.0),(177, 600.0),(41, 600.0),(175, 600.0),(250, 600.0),(75, 600.0),(59, 600.0),(123, 600.0),(104, 600.0),(120, 600.0),(50, 600.0),(162, 600.0),(172, 600.0),(49, 600.0),(194, 600.0),(77, 600.0),(232, 600.0),(178, 600.0),(35, 600.0),(70, 600.0),(63, 600.0),(99, 600.0),(121, 600.0),(180, 600.0),(93, 600.0),(195, 600.0),(208, 600.0),(163, 600.0),(110, 600.0),(51, 600.0),(184, 600.0),(107, 600.0),(94, 600.0),(166, 600.0),(36, 600.0),(39, 600.0),(186, 600.0),(45, 600.0),(34, 600.0),(92, 600.0),(96, 600.0),(97, 600.0),(207, 600.0),(98, 600.0),(189, 600.0),(71, 600.0),(198, 600.0),(206, 600.0),(235, 600.0),(191, 600.0),(32, 600.0),(188, 600.0),(53, 600.0),(72, 600.0),(58, 600.0),(73, 600.0),(74, 600.0),(200, 600.0),(161, 600.0),(88, 600.0),(76, 600.0),(78, 600.0),(122, 600.0),(185, 600.0),(119, 600.0),(102, 600.0),(106, 600.0),(52, 600.0),(57, 600.0),(87, 600.0),(112, 600.0),(115, 600.0),(91, 600.0),(248, 600.0),(62, 600.0),(82, 600.0),(118, 600.0),(117, 600.0),(68, 600.0),(108, 600.0),(245, 600.0),].into_iter().collect(),
};
}

lazy_static! {
pub static ref Times_Roman: FontMetrics = FontMetrics {
ascent: 683.0,
descent: -217.0,
cap_height: 662.0,
x_height: 450.0,
italic_angle: 0.0,
bbox: (-168.0, -218.0, 1000.0, 898.0),
flags: 0,
font_family: "Times".to_string(),
font_weight: "Roman".to_string(),
glyph_widths: vec![
(121, 500.0),(233, 722.0),(67, 667.0),(37, 833.0),(90, 611.0),(46, 250.0),(180, 250.0),(120, 500.0),(118, 500.0),(193, 333.0),(80, 556.0),(178, 500.0),(44, 250.0),(98, 500.0),(166, 500.0),(248, 278.0),(83, 556.0),(107, 500.0),(45, 333.0),(41, 333.0),(78, 722.0),(112, 500.0),(172, 333.0),(105, 278.0),(97, 444.0),(51, 500.0),(195, 333.0),(198, 333.0),(84, 611.0),(76, 611.0),(115, 389.0),(196, 333.0),(71, 722.0),(100, 500.0),(167, 500.0),(125, 480.0),(34, 408.0),(79, 722.0),(114, 333.0),(59, 278.0),(33, 333.0),(61, 564.0),(72, 722.0),(165, 500.0),(184, 333.0),(200, 333.0),(73, 333.0),(188, 1000.0),(99, 444.0),(35, 500.0),(64, 921.0),(65, 722.0),(81, 722.0),(111, 500.0),(119, 722.0),(170, 444.0),(206, 333.0),(110, 500.0),(57, 500.0),(102, 333.0),(94, 469.0),(205, 333.0),(56, 500.0),(179, 500.0),(104, 500.0),(36, 500.0),(207, 333.0),(241, 667.0),(103, 500.0),(113, 500.0),(187, 500.0),(68, 722.0),(245, 278.0),(92, 278.0),(95, 500.0),(101, 444.0),(55, 500.0),(74, 389.0),(63, 444.0),(124, 200.0),(183, 350.0),(232, 611.0),(54, 500.0),(69, 611.0),(43, 564.0),(40, 333.0),(86, 722.0),(185, 444.0),(197, 333.0),(182, 453.0),(189, 1000.0),(199, 333.0),(249, 500.0),(70, 556.0),(49, 500.0),(93, 333.0),(47, 278.0),(251, 500.0),(88, 722.0),(108, 278.0),(161, 333.0),(62, 564.0),(109, 778.0),(117, 500.0),(58, 278.0),(191, 444.0),(163, 500.0),(234, 889.0),(77, 889.0),(52, 500.0),(186, 444.0),(60, 564.0),(66, 667.0),(168, 500.0),(126, 541.0),(106, 278.0),(122, 444.0),(171, 500.0),(42, 500.0),(169, 180.0),(225, 889.0),(91, 333.0),(203, 333.0),(87, 944.0),(116, 278.0),(208, 1000.0),(39, 333.0),(85, 722.0),(162, 500.0),(48, 500.0),(250, 722.0),(75, 722.0),(202, 333.0),(175, 556.0),(174, 556.0),(235, 310.0),(123, 480.0),(53, 500.0),(227, 276.0),(50, 500.0),(177, 500.0),(164, 167.0),(96, 333.0),(173, 333.0),(82, 667.0),(32, 250.0),(89, 722.0),(38, 778.0),(194, 333.0),].into_iter().collect(),
};
}


lazy_static! {
    pub static ref FONT_METRICS: std::collections::HashMap<&'static str, &'static FontMetrics> = {
        let mut m = std::collections::HashMap::new();
        m.insert("AvantGarde-BookOblique", &*AvantGarde_BookOblique as &'static FontMetrics);
        m.insert("Bookman-Light", &*Bookman_Light as &'static FontMetrics);
        m.insert("Courier", &*Courier as &'static FontMetrics);
        m.insert("Times-BoldItalic", &*Times_BoldItalic as &'static FontMetrics);
        m.insert("AvantGarde-DemiOblique", &*AvantGarde_DemiOblique as &'static FontMetrics);
        m.insert("Palatino-Roman", &*Palatino_Roman as &'static FontMetrics);
        m.insert("ZapfChancery-MediumItalic", &*ZapfChancery_MediumItalic as &'static FontMetrics);
        m.insert("Helvetica-Narrow", &*Helvetica_Narrow as &'static FontMetrics);
        m.insert("AvantGarde-Book", &*AvantGarde_Book as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Bold", &*NewCenturySchlbk_Bold as &'static FontMetrics);
        m.insert("Helvetica-Bold", &*Helvetica_Bold as &'static FontMetrics);
        m.insert("Courier-BoldOblique", &*Courier_BoldOblique as &'static FontMetrics);
        m.insert("Palatino-Italic", &*Palatino_Italic as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Roman", &*NewCenturySchlbk_Roman as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Italic", &*NewCenturySchlbk_Italic as &'static FontMetrics);
        m.insert("Courier-Oblique", &*Courier_Oblique as &'static FontMetrics);
        m.insert("Bookman-LightItalic", &*Bookman_LightItalic as &'static FontMetrics);
        m.insert("Times-Italic", &*Times_Italic as &'static FontMetrics);
        m.insert("AvantGarde-Demi", &*AvantGarde_Demi as &'static FontMetrics);
        m.insert("Helvetica-Narrow-Oblique", &*Helvetica_Narrow_Oblique as &'static FontMetrics);
        m.insert("Helvetica-Narrow-BoldOblique", &*Helvetica_Narrow_BoldOblique as &'static FontMetrics);
        m.insert("Bookman-DemiItalic", &*Bookman_DemiItalic as &'static FontMetrics);
        m.insert("Palatino-Bold", &*Palatino_Bold as &'static FontMetrics);
        m.insert("ZapfDingbats", &*ZapfDingbats as &'static FontMetrics);
        m.insert("Bookman-Demi", &*Bookman_Demi as &'static FontMetrics);
        m.insert("Helvetica-Narrow-Bold", &*Helvetica_Narrow_Bold as &'static FontMetrics);
        m.insert("Palatino-BoldItalic", &*Palatino_BoldItalic as &'static FontMetrics);
        m.insert("Helvetica", &*Helvetica as &'static FontMetrics);
        m.insert("NewCenturySchlbk-BoldItalic", &*NewCenturySchlbk_BoldItalic as &'static FontMetrics);
        m.insert("Symbol", &*Symbol as &'static FontMetrics);
        m.insert("Times-Bold", &*Times_Bold as &'static FontMetrics);
        m.insert("Helvetica-Oblique", &*Helvetica_Oblique as &'static FontMetrics);
        m.insert("Helvetica-BoldOblique", &*Helvetica_BoldOblique as &'static FontMetrics);
        m.insert("Courier-Bold", &*Courier_Bold as &'static FontMetrics);
        m.insert("Times-Roman", &*Times_Roman as &'static FontMetrics);
        m
    };
}
